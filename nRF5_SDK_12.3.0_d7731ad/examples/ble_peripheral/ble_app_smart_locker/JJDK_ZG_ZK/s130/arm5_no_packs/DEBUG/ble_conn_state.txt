; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\ble_conn_state.o --asm_dir=.\DEBUG\ --list_dir=.\DEBUG\ --depend=.\debug\ble_conn_state.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\power -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\usbd -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\gpiote -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\queue -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\sensorsim -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\usbd -I..\..\..\..\..\..\components\libraries\usbd\class\audio -I..\..\..\..\..\..\components\libraries\usbd\class\cdc -I..\..\..\..\..\..\components\libraries\usbd\class\cdc\acm -I..\..\..\..\..\..\components\libraries\usbd\class\hid -I..\..\..\..\..\..\components\libraries\usbd\class\hid\generic -I..\..\..\..\..\..\components\libraries\usbd\class\hid\kbd -I..\..\..\..\..\..\components\libraries\usbd\class\hid\mouse -I..\..\..\..\..\..\components\libraries\usbd\class\msc -I..\..\..\..\..\..\components\libraries\usbd\config -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s130\headers -I..\..\..\..\..\..\components\softdevice\s130\headers\nrf51 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_sls -ID:\development\nordic_ble\src_code\nrf51_sdk_v12_3_0\nRF5_SDK_12.3.0_d7731ad\examples\ble_peripheral\ble_app_smart_locker\JJDK_ZG_ZK\s130\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.11.1\Device\Include -D__MICROLIB -D_RTE_ -DNRF51 -DBLE_STACK_SUPPORT_REQD -DNRF51822 -DBOARD_JJDK_ZG_ZK -DNRF_SD_BLE_API_VERSION=2 -DS130 -DNRF51 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 --omf_browse=.\debug\ble_conn_state.crf ..\..\..\..\..\..\components\ble\common\ble_conn_state.c]
                          THUMB

                          AREA ||i.bcs_internal_state_reset||, CODE, READONLY, ALIGN=2

                  bcs_internal_state_reset PROC
;;;104     */
;;;105    void bcs_internal_state_reset(void)
000000  b510              PUSH     {r4,lr}
;;;106    {
;;;107        memset( &m_bcs, 0, sizeof(ble_conn_state_t) );
000002  2134              MOVS     r1,#0x34
000004  4801              LDR      r0,|L1.12|
000006  f7fffffe          BL       __aeabi_memclr4
;;;108    }
00000a  bd10              POP      {r4,pc}
;;;109    
                          ENDP

                  |L1.12|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_central_handles||, CODE, READONLY, ALIGN=2

                  ble_conn_state_central_handles PROC
;;;344    
;;;345    sdk_mapped_flags_key_list_t ble_conn_state_central_handles(void)
000000  b510              PUSH     {r4,lr}
;;;346    {
000002  4604              MOV      r4,r0
;;;347        return sdk_mapped_flags_key_list_get(m_bcs.valid_conn_handles,
000004  4805              LDR      r0,|L2.28|
000006  7d80              LDRB     r0,[r0,#0x16]
000008  4904              LDR      r1,|L2.28|
00000a  7d49              LDRB     r1,[r1,#0x15]
00000c  4008              ANDS     r0,r0,r1
00000e  4602              MOV      r2,r0
000010  4902              LDR      r1,|L2.28|
000012  1d09              ADDS     r1,r1,#4
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       sdk_mapped_flags_key_list_get
;;;348                                            (m_bcs.flags.central_flags) & (m_bcs.flags.connected_flags));
;;;349    }
00001a  bd10              POP      {r4,pc}
;;;350    
                          ENDP

                  |L2.28|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_conn_handles||, CODE, READONLY, ALIGN=2

                  ble_conn_state_conn_handles PROC
;;;338    
;;;339    sdk_mapped_flags_key_list_t ble_conn_state_conn_handles(void)
000000  b510              PUSH     {r4,lr}
;;;340    {
000002  4604              MOV      r4,r0
;;;341        return sdk_mapped_flags_key_list_get(m_bcs.valid_conn_handles, m_bcs.flags.valid_flags);
000004  4803              LDR      r0,|L3.20|
000006  7d02              LDRB     r2,[r0,#0x14]  ; m_bcs
000008  1d01              ADDS     r1,r0,#4
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       sdk_mapped_flags_key_list_get
;;;342    }
000010  bd10              POP      {r4,pc}
;;;343    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_encrypted||, CODE, READONLY, ALIGN=2

                  ble_conn_state_encrypted PROC
;;;304    
;;;305    bool ble_conn_state_encrypted(uint16_t conn_handle)
000000  b510              PUSH     {r4,lr}
;;;306    {
000002  4604              MOV      r4,r0
;;;307        return sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000004  4803              LDR      r0,|L4.20|
000006  7dc1              LDRB     r1,[r0,#0x17]
000008  4622              MOV      r2,r4
00000a  1d00              ADDS     r0,r0,#4
00000c  f7fffffe          BL       sdk_mapped_flags_get_by_key
;;;308                                           m_bcs.flags.encrypted_flags,
;;;309                                           conn_handle);
;;;310    }
000010  bd10              POP      {r4,pc}
;;;311    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_init||, CODE, READONLY, ALIGN=1

                  ble_conn_state_init PROC
;;;208    
;;;209    void ble_conn_state_init(void)
000000  b510              PUSH     {r4,lr}
;;;210    {
;;;211        bcs_internal_state_reset();
000002  f7fffffe          BL       bcs_internal_state_reset
;;;212    }
000006  bd10              POP      {r4,pc}
;;;213    
                          ENDP


                          AREA ||i.ble_conn_state_mitm_protected||, CODE, READONLY, ALIGN=2

                  ble_conn_state_mitm_protected PROC
;;;312    
;;;313    bool ble_conn_state_mitm_protected(uint16_t conn_handle)
000000  b510              PUSH     {r4,lr}
;;;314    {
000002  4604              MOV      r4,r0
;;;315        return sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000004  4803              LDR      r0,|L6.20|
000006  7e01              LDRB     r1,[r0,#0x18]
000008  4622              MOV      r2,r4
00000a  1d00              ADDS     r0,r0,#4
00000c  f7fffffe          BL       sdk_mapped_flags_get_by_key
;;;316                                           m_bcs.flags.mitm_protected_flags,
;;;317                                           conn_handle);
;;;318    }
000010  bd10              POP      {r4,pc}
;;;319    
                          ENDP

000012  0000              DCW      0x0000
                  |L6.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_n_centrals||, CODE, READONLY, ALIGN=2

                  ble_conn_state_n_centrals PROC
;;;326    
;;;327    uint32_t ble_conn_state_n_centrals(void)
000000  b510              PUSH     {r4,lr}
;;;328    {
;;;329        return sdk_mapped_flags_n_flags_set((m_bcs.flags.central_flags) & (m_bcs.flags.connected_flags));
000002  4904              LDR      r1,|L7.20|
000004  7d89              LDRB     r1,[r1,#0x16]
000006  4a03              LDR      r2,|L7.20|
000008  7d52              LDRB     r2,[r2,#0x15]
00000a  4011              ANDS     r1,r1,r2
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       sdk_mapped_flags_n_flags_set
;;;330    }
000012  bd10              POP      {r4,pc}
;;;331    
                          ENDP

                  |L7.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_n_connections||, CODE, READONLY, ALIGN=2

                  ble_conn_state_n_connections PROC
;;;320    
;;;321    uint32_t ble_conn_state_n_connections(void)
000000  b510              PUSH     {r4,lr}
;;;322    {
;;;323        return sdk_mapped_flags_n_flags_set(m_bcs.flags.connected_flags);
000002  4902              LDR      r1,|L8.12|
000004  7d48              LDRB     r0,[r1,#0x15]
000006  f7fffffe          BL       sdk_mapped_flags_n_flags_set
;;;324    }
00000a  bd10              POP      {r4,pc}
;;;325    
                          ENDP

                  |L8.12|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_n_peripherals||, CODE, READONLY, ALIGN=2

                  ble_conn_state_n_peripherals PROC
;;;332    
;;;333    uint32_t ble_conn_state_n_peripherals(void)
000000  b510              PUSH     {r4,lr}
;;;334    {
;;;335        return sdk_mapped_flags_n_flags_set((~m_bcs.flags.central_flags) & (m_bcs.flags.connected_flags));
000002  4904              LDR      r1,|L9.20|
000004  7d49              LDRB     r1,[r1,#0x15]
000006  4a03              LDR      r2,|L9.20|
000008  7d92              LDRB     r2,[r2,#0x16]
00000a  4391              BICS     r1,r1,r2
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       sdk_mapped_flags_n_flags_set
;;;336    }
000012  bd10              POP      {r4,pc}
;;;337    
                          ENDP

                  |L9.20|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_on_ble_evt||, CODE, READONLY, ALIGN=2

                  ble_conn_state_on_ble_evt PROC
;;;214    
;;;215    void ble_conn_state_on_ble_evt(ble_evt_t * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;216    {
000002  4604              MOV      r4,r0
;;;217        switch (p_ble_evt->header.evt_id)
000004  8820              LDRH     r0,[r4,#0]
000006  2810              CMP      r0,#0x10
000008  d004              BEQ      |L10.20|
00000a  2811              CMP      r0,#0x11
00000c  d01e              BEQ      |L10.76|
00000e  281a              CMP      r0,#0x1a
000010  d13f              BNE      |L10.146|
000012  e01f              B        |L10.84|
                  |L10.20|
;;;218        {
;;;219            case BLE_GAP_EVT_CONNECTED:
;;;220                record_purge_disconnected();
000014  f7fffffe          BL       record_purge_disconnected
;;;221    
;;;222                if ( !record_activate(p_ble_evt->evt.gap_evt.conn_handle) )
000018  88a0              LDRH     r0,[r4,#4]
00001a  f7fffffe          BL       record_activate
00001e  2800              CMP      r0,#0
000020  d104              BNE      |L10.44|
;;;223                {
;;;224                    // No more records available. Should not happen.
;;;225                    APP_ERROR_HANDLER(NRF_ERROR_NO_MEM);
000022  bf00              NOP      
000024  2004              MOVS     r0,#4
000026  f7fffffe          BL       app_error_handler_bare
00002a  e00e              B        |L10.74|
                  |L10.44|
;;;226                }
;;;227                else
;;;228                {
;;;229                    bool is_central =
00002c  7da0              LDRB     r0,[r4,#0x16]
00002e  2802              CMP      r0,#2
000030  d101              BNE      |L10.54|
000032  2001              MOVS     r0,#1
000034  e000              B        |L10.56|
                  |L10.54|
000036  2000              MOVS     r0,#0
                  |L10.56|
000038  4605              MOV      r5,r0
;;;230                            (p_ble_evt->evt.gap_evt.params.connected.role == BLE_GAP_ROLE_CENTRAL);
;;;231    
;;;232                    sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
00003a  88a2              LDRH     r2,[r4,#4]
00003c  462b              MOV      r3,r5
00003e  4916              LDR      r1,|L10.152|
000040  4608              MOV      r0,r1
000042  3812              SUBS     r0,r0,#0x12
000044  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;233                                                  &m_bcs.flags.central_flags,
;;;234                                                   p_ble_evt->evt.gap_evt.conn_handle,
;;;235                                                   is_central);
;;;236                }
000048  bf00              NOP      
                  |L10.74|
;;;237    
;;;238                break;
00004a  e022              B        |L10.146|
                  |L10.76|
;;;239    
;;;240            case BLE_GAP_EVT_DISCONNECTED:
;;;241                record_set_disconnected(p_ble_evt->evt.gap_evt.conn_handle);
00004c  88a0              LDRH     r0,[r4,#4]
00004e  f7fffffe          BL       record_set_disconnected
;;;242                break;
000052  e01e              B        |L10.146|
                  |L10.84|
;;;243    
;;;244            case BLE_GAP_EVT_CONN_SEC_UPDATE:
;;;245                sdk_mapped_flags_update_by_key(
000054  7a20              LDRB     r0,[r4,#8]
000056  0900              LSRS     r0,r0,#4
000058  2801              CMP      r0,#1
00005a  dd01              BLE      |L10.96|
00005c  2001              MOVS     r0,#1
00005e  e000              B        |L10.98|
                  |L10.96|
000060  2000              MOVS     r0,#0
                  |L10.98|
000062  4603              MOV      r3,r0
000064  88a2              LDRH     r2,[r4,#4]
000066  490c              LDR      r1,|L10.152|
000068  1c49              ADDS     r1,r1,#1
00006a  4608              MOV      r0,r1
00006c  3813              SUBS     r0,r0,#0x13
00006e  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;246                              m_bcs.valid_conn_handles,
;;;247                             &m_bcs.flags.encrypted_flags,
;;;248                              p_ble_evt->evt.gap_evt.conn_handle,
;;;249                             (p_ble_evt->evt.gap_evt.params.conn_sec_update.conn_sec.sec_mode.lv > 1));
;;;250                sdk_mapped_flags_update_by_key(
000072  7a20              LDRB     r0,[r4,#8]
000074  0900              LSRS     r0,r0,#4
000076  2802              CMP      r0,#2
000078  dd01              BLE      |L10.126|
00007a  2001              MOVS     r0,#1
00007c  e000              B        |L10.128|
                  |L10.126|
00007e  2000              MOVS     r0,#0
                  |L10.128|
000080  4603              MOV      r3,r0
000082  88a2              LDRH     r2,[r4,#4]
000084  4904              LDR      r1,|L10.152|
000086  1c89              ADDS     r1,r1,#2
000088  4608              MOV      r0,r1
00008a  3814              SUBS     r0,r0,#0x14
00008c  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;251                              m_bcs.valid_conn_handles,
;;;252                             &m_bcs.flags.mitm_protected_flags,
;;;253                              p_ble_evt->evt.gap_evt.conn_handle,
;;;254                             (p_ble_evt->evt.gap_evt.params.conn_sec_update.conn_sec.sec_mode.lv > 2));
;;;255                break;
000090  bf00              NOP      
                  |L10.146|
000092  bf00              NOP                            ;238
;;;256        }
;;;257    }
000094  bd70              POP      {r4-r6,pc}
;;;258    
                          ENDP

000096  0000              DCW      0x0000
                  |L10.152|
                          DCD      m_bcs+0x16

                          AREA ||i.ble_conn_state_periph_handles||, CODE, READONLY, ALIGN=2

                  ble_conn_state_periph_handles PROC
;;;351    
;;;352    sdk_mapped_flags_key_list_t ble_conn_state_periph_handles(void)
000000  b510              PUSH     {r4,lr}
;;;353    {
000002  4604              MOV      r4,r0
;;;354        return sdk_mapped_flags_key_list_get(m_bcs.valid_conn_handles,
000004  4805              LDR      r0,|L11.28|
000006  7d40              LDRB     r0,[r0,#0x15]
000008  4904              LDR      r1,|L11.28|
00000a  7d89              LDRB     r1,[r1,#0x16]
00000c  4388              BICS     r0,r0,r1
00000e  4602              MOV      r2,r0
000010  4902              LDR      r1,|L11.28|
000012  1d09              ADDS     r1,r1,#4
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       sdk_mapped_flags_key_list_get
;;;355                                            (~m_bcs.flags.central_flags) & (m_bcs.flags.connected_flags));
;;;356    }
00001a  bd10              POP      {r4,pc}
;;;357    
                          ENDP

                  |L11.28|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_role||, CODE, READONLY, ALIGN=2

                  ble_conn_state_role PROC
;;;267    
;;;268    uint8_t ble_conn_state_role(uint16_t conn_handle)
000000  b570              PUSH     {r4-r6,lr}
;;;269    {
000002  4604              MOV      r4,r0
;;;270        uint8_t role = BLE_GAP_ROLE_INVALID;
000004  2500              MOVS     r5,#0
;;;271    
;;;272        if ( sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles, m_bcs.flags.valid_flags, conn_handle) )
000006  480c              LDR      r0,|L12.56|
000008  7d01              LDRB     r1,[r0,#0x14]  ; m_bcs
00000a  4622              MOV      r2,r4
00000c  1d00              ADDS     r0,r0,#4
00000e  f7fffffe          BL       sdk_mapped_flags_get_by_key
000012  2800              CMP      r0,#0
000014  d00d              BEQ      |L12.50|
;;;273        {
;;;274            bool central = sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000016  4808              LDR      r0,|L12.56|
000018  7d81              LDRB     r1,[r0,#0x16]
00001a  4622              MOV      r2,r4
00001c  1d00              ADDS     r0,r0,#4
00001e  f7fffffe          BL       sdk_mapped_flags_get_by_key
000022  4606              MOV      r6,r0
;;;275                                                       m_bcs.flags.central_flags,
;;;276                                                       conn_handle);
;;;277    
;;;278            role = central ? BLE_GAP_ROLE_CENTRAL : BLE_GAP_ROLE_PERIPH;
000024  2e00              CMP      r6,#0
000026  d001              BEQ      |L12.44|
000028  2002              MOVS     r0,#2
00002a  e000              B        |L12.46|
                  |L12.44|
00002c  2001              MOVS     r0,#1
                  |L12.46|
00002e  4605              MOV      r5,r0
;;;279        }
000030  bf00              NOP      
                  |L12.50|
;;;280    
;;;281        return role;
000032  4628              MOV      r0,r5
;;;282    }
000034  bd70              POP      {r4-r6,pc}
;;;283    
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_status||, CODE, READONLY, ALIGN=2

                  ble_conn_state_status PROC
;;;284    
;;;285    ble_conn_state_status_t ble_conn_state_status(uint16_t conn_handle)
000000  b5f8              PUSH     {r3-r7,lr}
;;;286    {
000002  4604              MOV      r4,r0
;;;287        ble_conn_state_status_t conn_status = BLE_CONN_STATUS_INVALID;
000004  2500              MOVS     r5,#0
;;;288        bool valid = sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000006  480c              LDR      r0,|L13.56|
000008  7d01              LDRB     r1,[r0,#0x14]  ; m_bcs
00000a  4622              MOV      r2,r4
00000c  1d00              ADDS     r0,r0,#4
00000e  f7fffffe          BL       sdk_mapped_flags_get_by_key
000012  4606              MOV      r6,r0
;;;289                                                 m_bcs.flags.valid_flags,
;;;290                                                 conn_handle);
;;;291    
;;;292        if (valid)
000014  2e00              CMP      r6,#0
000016  d00d              BEQ      |L13.52|
;;;293        {
;;;294            bool connected = sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000018  4807              LDR      r0,|L13.56|
00001a  7d41              LDRB     r1,[r0,#0x15]
00001c  4622              MOV      r2,r4
00001e  1d00              ADDS     r0,r0,#4
000020  f7fffffe          BL       sdk_mapped_flags_get_by_key
000024  4607              MOV      r7,r0
;;;295                                                         m_bcs.flags.connected_flags,
;;;296                                                         conn_handle);
;;;297    
;;;298            conn_status = connected ? BLE_CONN_STATUS_CONNECTED : BLE_CONN_STATUS_DISCONNECTED;
000026  2f00              CMP      r7,#0
000028  d001              BEQ      |L13.46|
00002a  2002              MOVS     r0,#2
00002c  e000              B        |L13.48|
                  |L13.46|
00002e  2001              MOVS     r0,#1
                  |L13.48|
000030  4605              MOV      r5,r0
;;;299        }
000032  bf00              NOP      
                  |L13.52|
;;;300    
;;;301        return conn_status;
000034  4628              MOV      r0,r5
;;;302    }
000036  bdf8              POP      {r3-r7,pc}
;;;303    
                          ENDP

                  |L13.56|
                          DCD      m_bcs

                          AREA ||i.ble_conn_state_user_flag_acquire||, CODE, READONLY, ALIGN=1

                  ble_conn_state_user_flag_acquire PROC
;;;358    
;;;359    ble_conn_state_user_flag_id_t ble_conn_state_user_flag_acquire(void)
000000  b510              PUSH     {r4,lr}
;;;360    {
;;;361        for (ble_conn_state_user_flag_id_t i = BLE_CONN_STATE_USER_FLAG0;
000002  2400              MOVS     r4,#0
000004  e00b              B        |L14.30|
                  |L14.6|
;;;362                                           i < BLE_CONN_STATE_N_USER_FLAGS;
;;;363                                           i++)
;;;364        {
;;;365            if ( !user_flag_is_acquired(i) )
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       user_flag_is_acquired
00000c  2800              CMP      r0,#0
00000e  d104              BNE      |L14.26|
;;;366            {
;;;367                user_flag_acquire(i);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       user_flag_acquire
;;;368                return i;
000016  4620              MOV      r0,r4
                  |L14.24|
;;;369            }
;;;370        }
;;;371    
;;;372        return BLE_CONN_STATE_USER_FLAG_INVALID;
;;;373    }
000018  bd10              POP      {r4,pc}
                  |L14.26|
00001a  1c60              ADDS     r0,r4,#1              ;363
00001c  b2c4              UXTB     r4,r0                 ;363
                  |L14.30|
00001e  2c18              CMP      r4,#0x18              ;362
000020  dbf1              BLT      |L14.6|
000022  2018              MOVS     r0,#0x18              ;372
000024  e7f8              B        |L14.24|
;;;374    
                          ENDP


                          AREA ||i.ble_conn_state_user_flag_collection||, CODE, READONLY, ALIGN=2

                  ble_conn_state_user_flag_collection PROC
;;;404    
;;;405    sdk_mapped_flags_t ble_conn_state_user_flag_collection(ble_conn_state_user_flag_id_t flag_id)
000000  b510              PUSH     {r4,lr}
;;;406    {
000002  4604              MOV      r4,r0
;;;407        if ( user_flag_is_acquired(flag_id) )
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       user_flag_is_acquired
00000a  2800              CMP      r0,#0
00000c  d002              BEQ      |L15.20|
;;;408        {
;;;409            return m_bcs.flags.user_flags[flag_id];
00000e  4802              LDR      r0,|L15.24|
000010  5d00              LDRB     r0,[r0,r4]
                  |L15.18|
;;;410        }
;;;411        else
;;;412        {
;;;413            return 0;
;;;414        }
;;;415    }
000012  bd10              POP      {r4,pc}
                  |L15.20|
000014  2000              MOVS     r0,#0                 ;413
000016  e7fc              B        |L15.18|
                          ENDP

                  |L15.24|
                          DCD      m_bcs+0x19

                          AREA ||i.ble_conn_state_user_flag_get||, CODE, READONLY, ALIGN=2

                  ble_conn_state_user_flag_get PROC
;;;375    
;;;376    bool ble_conn_state_user_flag_get(uint16_t conn_handle, ble_conn_state_user_flag_id_t flag_id)
000000  b570              PUSH     {r4-r6,lr}
;;;377    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;378        if (user_flag_is_acquired(flag_id))
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       user_flag_is_acquired
00000c  2800              CMP      r0,#0
00000e  d006              BEQ      |L16.30|
;;;379        {
;;;380            return sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000010  4804              LDR      r0,|L16.36|
000012  5d01              LDRB     r1,[r0,r4]
000014  462a              MOV      r2,r5
000016  3815              SUBS     r0,r0,#0x15
000018  f7fffffe          BL       sdk_mapped_flags_get_by_key
                  |L16.28|
;;;381                                               m_bcs.flags.user_flags[flag_id],
;;;382                                               conn_handle);
;;;383        }
;;;384        else
;;;385        {
;;;386            return false;
;;;387        }
;;;388    }
00001c  bd70              POP      {r4-r6,pc}
                  |L16.30|
00001e  2000              MOVS     r0,#0                 ;386
000020  e7fc              B        |L16.28|
;;;389    
                          ENDP

000022  0000              DCW      0x0000
                  |L16.36|
                          DCD      m_bcs+0x19

                          AREA ||i.ble_conn_state_user_flag_set||, CODE, READONLY, ALIGN=2

                  ble_conn_state_user_flag_set PROC
;;;390    
;;;391    void ble_conn_state_user_flag_set(uint16_t                      conn_handle,
000000  b570              PUSH     {r4-r6,lr}
;;;392                                      ble_conn_state_user_flag_id_t flag_id,
;;;393                                      bool                          value)
;;;394    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;395        if (user_flag_is_acquired(flag_id))
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       user_flag_is_acquired
00000e  2800              CMP      r0,#0
000010  d006              BEQ      |L17.32|
;;;396        {
;;;397            sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
000012  4804              LDR      r0,|L17.36|
000014  1901              ADDS     r1,r0,r4
000016  4633              MOV      r3,r6
000018  462a              MOV      r2,r5
00001a  3815              SUBS     r0,r0,#0x15
00001c  f7fffffe          BL       sdk_mapped_flags_update_by_key
                  |L17.32|
;;;398                                          &m_bcs.flags.user_flags[flag_id],
;;;399                                           conn_handle,
;;;400                                           value);
;;;401        }
;;;402    }
000020  bd70              POP      {r4-r6,pc}
;;;403    
                          ENDP

000022  0000              DCW      0x0000
                  |L17.36|
                          DCD      m_bcs+0x19

                          AREA ||i.ble_conn_state_valid||, CODE, READONLY, ALIGN=2

                  ble_conn_state_valid PROC
;;;259    
;;;260    bool ble_conn_state_valid(uint16_t conn_handle)
000000  b510              PUSH     {r4,lr}
;;;261    {
000002  4604              MOV      r4,r0
;;;262        return sdk_mapped_flags_get_by_key(m_bcs.valid_conn_handles,
000004  4803              LDR      r0,|L18.20|
000006  7d01              LDRB     r1,[r0,#0x14]  ; m_bcs
000008  4622              MOV      r2,r4
00000a  1d00              ADDS     r0,r0,#4
00000c  f7fffffe          BL       sdk_mapped_flags_get_by_key
;;;263                                           m_bcs.flags.valid_flags,
;;;264                                           conn_handle);
;;;265    }
000010  bd10              POP      {r4,pc}
;;;266    
                          ENDP

000012  0000              DCW      0x0000
                  |L18.20|
                          DCD      m_bcs

                          AREA ||i.record_activate||, CODE, READONLY, ALIGN=2

                  record_activate PROC
;;;118     */
;;;119    static bool record_activate(uint16_t conn_handle)
000000  b570              PUSH     {r4-r6,lr}
;;;120    {
000002  4604              MOV      r4,r0
;;;121        uint16_t available_index = sdk_mapped_flags_first_key_index_get(~m_bcs.flags.valid_flags);
000004  490f              LDR      r1,|L19.68|
000006  7d09              LDRB     r1,[r1,#0x14]  ; m_bcs
000008  43c9              MVNS     r1,r1
00000a  b2c8              UXTB     r0,r1
00000c  f7fffffe          BL       sdk_mapped_flags_first_key_index_get
000010  4605              MOV      r5,r0
;;;122    
;;;123        if (available_index != SDK_MAPPED_FLAGS_INVALID_INDEX)
000012  480d              LDR      r0,|L19.72|
000014  4285              CMP      r5,r0
000016  d013              BEQ      |L19.64|
;;;124        {
;;;125            m_bcs.valid_conn_handles[available_index] = conn_handle;
000018  0069              LSLS     r1,r5,#1
00001a  480a              LDR      r0,|L19.68|
00001c  1d00              ADDS     r0,r0,#4
00001e  5244              STRH     r4,[r0,r1]
;;;126            sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
000020  2301              MOVS     r3,#1
000022  4622              MOV      r2,r4
000024  4601              MOV      r1,r0
000026  3111              ADDS     r1,r1,#0x11
000028  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;127                                          &m_bcs.flags.connected_flags,
;;;128                                           conn_handle,
;;;129                                           1);
;;;130            sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
00002c  2301              MOVS     r3,#1
00002e  4622              MOV      r2,r4
000030  4904              LDR      r1,|L19.68|
000032  3114              ADDS     r1,r1,#0x14
000034  4608              MOV      r0,r1
000036  3810              SUBS     r0,r0,#0x10
000038  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;131                                          &m_bcs.flags.valid_flags,
;;;132                                           conn_handle,
;;;133                                           1);
;;;134    
;;;135            return true;
00003c  2001              MOVS     r0,#1
                  |L19.62|
;;;136        }
;;;137    
;;;138        return false;
;;;139    }
00003e  bd70              POP      {r4-r6,pc}
                  |L19.64|
000040  2000              MOVS     r0,#0                 ;138
000042  e7fc              B        |L19.62|
;;;140    
                          ENDP

                  |L19.68|
                          DCD      m_bcs
                  |L19.72|
                          DCD      0x0000ffff

                          AREA ||i.record_invalidate||, CODE, READONLY, ALIGN=2

                  record_invalidate PROC
;;;145     */
;;;146    static void record_invalidate(uint16_t conn_handle)
000000  b538              PUSH     {r3-r5,lr}
;;;147    {
000002  4604              MOV      r4,r0
;;;148        sdk_mapped_flags_bulk_update_by_key(m_bcs.valid_conn_handles,
000004  2000              MOVS     r0,#0
000006  4623              MOV      r3,r4
000008  221d              MOVS     r2,#0x1d
00000a  4903              LDR      r1,|L20.24|
00000c  9000              STR      r0,[sp,#0]
00000e  4608              MOV      r0,r1
000010  3810              SUBS     r0,r0,#0x10
000012  f7fffffe          BL       sdk_mapped_flags_bulk_update_by_key
;;;149                                            m_bcs.flag_array,
;;;150                                            BLE_CONN_STATE_N_FLAGS,
;;;151                                            conn_handle,
;;;152                                            0);
;;;153    }
000016  bd38              POP      {r3-r5,pc}
;;;154    
                          ENDP

                  |L20.24|
                          DCD      m_bcs+0x14

                          AREA ||i.record_purge_disconnected||, CODE, READONLY, ALIGN=2

                  record_purge_disconnected PROC
;;;171     */
;;;172    static void record_purge_disconnected()
000000  b510              PUSH     {r4,lr}
;;;173    {
000002  b08a              SUB      sp,sp,#0x28
;;;174        sdk_mapped_flags_key_list_t disconnected_list;
;;;175    
;;;176        disconnected_list = sdk_mapped_flags_key_list_get(
000004  480e              LDR      r0,|L21.64|
000006  7d00              LDRB     r0,[r0,#0x14]  ; m_bcs
000008  490d              LDR      r1,|L21.64|
00000a  7d49              LDRB     r1,[r1,#0x15]
00000c  4388              BICS     r0,r0,r1
00000e  4602              MOV      r2,r0
000010  490b              LDR      r1,|L21.64|
000012  1d09              ADDS     r1,r1,#4
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       sdk_mapped_flags_key_list_get
00001a  2214              MOVS     r2,#0x14
00001c  4669              MOV      r1,sp
00001e  a805              ADD      r0,sp,#0x14
000020  f7fffffe          BL       __aeabi_memcpy4
;;;177                                       m_bcs.valid_conn_handles,
;;;178                                     (~m_bcs.flags.connected_flags) & (m_bcs.flags.valid_flags));
;;;179    
;;;180        for (uint32_t i = 0; i < disconnected_list.len; i++)
000024  2400              MOVS     r4,#0
000026  e005              B        |L21.52|
                  |L21.40|
;;;181        {
;;;182            record_invalidate(disconnected_list.flag_keys[i]);
000028  0062              LSLS     r2,r4,#1
00002a  a906              ADD      r1,sp,#0x18
00002c  5a88              LDRH     r0,[r1,r2]
00002e  f7fffffe          BL       record_invalidate
000032  1c64              ADDS     r4,r4,#1              ;180
                  |L21.52|
000034  9805              LDR      r0,[sp,#0x14]         ;180
000036  42a0              CMP      r0,r4                 ;180
000038  d8f6              BHI      |L21.40|
;;;183        }
;;;184    }
00003a  b00a              ADD      sp,sp,#0x28
00003c  bd10              POP      {r4,pc}
;;;185    
                          ENDP

00003e  0000              DCW      0x0000
                  |L21.64|
                          DCD      m_bcs

                          AREA ||i.record_set_disconnected||, CODE, READONLY, ALIGN=2

                  record_set_disconnected PROC
;;;159     */
;;;160    static void record_set_disconnected(uint16_t conn_handle)
000000  b510              PUSH     {r4,lr}
;;;161    {
000002  4604              MOV      r4,r0
;;;162        sdk_mapped_flags_update_by_key(m_bcs.valid_conn_handles,
000004  2300              MOVS     r3,#0
000006  4622              MOV      r2,r4
000008  4902              LDR      r1,|L22.20|
00000a  4608              MOV      r0,r1
00000c  3811              SUBS     r0,r0,#0x11
00000e  f7fffffe          BL       sdk_mapped_flags_update_by_key
;;;163                                      &m_bcs.flags.connected_flags,
;;;164                                       conn_handle,
;;;165                                       0);
;;;166    }
000012  bd10              POP      {r4,pc}
;;;167    
                          ENDP

                  |L22.20|
                          DCD      m_bcs+0x15

                          AREA ||i.user_flag_acquire||, CODE, READONLY, ALIGN=2

                  user_flag_acquire PROC
;;;202     */
;;;203    static void user_flag_acquire(ble_conn_state_user_flag_id_t flag_id)
000000  4903              LDR      r1,|L23.16|
;;;204    {
;;;205        m_bcs.acquired_flags |= (1 << flag_id);
000002  6809              LDR      r1,[r1,#0]  ; m_bcs
000004  2201              MOVS     r2,#1
000006  4082              LSLS     r2,r2,r0
000008  4311              ORRS     r1,r1,r2
00000a  4a01              LDR      r2,|L23.16|
00000c  6011              STR      r1,[r2,#0]  ; m_bcs
;;;206    }
00000e  4770              BX       lr
;;;207    
                          ENDP

                  |L23.16|
                          DCD      m_bcs

                          AREA ||i.user_flag_is_acquired||, CODE, READONLY, ALIGN=2

                  user_flag_is_acquired PROC
;;;192     */
;;;193    static bool user_flag_is_acquired(ble_conn_state_user_flag_id_t flag_id)
000000  4601              MOV      r1,r0
;;;194    {
;;;195        return ((m_bcs.acquired_flags & (1 << flag_id)) != 0);
000002  4805              LDR      r0,|L24.24|
000004  6800              LDR      r0,[r0,#0]  ; m_bcs
000006  2201              MOVS     r2,#1
000008  408a              LSLS     r2,r2,r1
00000a  4010              ANDS     r0,r0,r2
00000c  2800              CMP      r0,#0
00000e  d001              BEQ      |L24.20|
000010  2001              MOVS     r0,#1
                  |L24.18|
;;;196    }
000012  4770              BX       lr
                  |L24.20|
000014  2000              MOVS     r0,#0                 ;195
000016  e7fc              B        |L24.18|
;;;197    
                          ENDP

                  |L24.24|
                          DCD      m_bcs

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_bcs
                          %        52

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\common\\ble_conn_state.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_ble_conn_state_c_eac0480a____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.2.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_ble_conn_state_c_eac0480a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_ble_conn_state_c_eac0480a____REVSH|
#line 144
|__asm___16_ble_conn_state_c_eac0480a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
