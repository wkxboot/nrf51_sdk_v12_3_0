; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\pm_mutex.o --asm_dir=.\DEBUG\ --list_dir=.\DEBUG\ --depend=.\debug\pm_mutex.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\power -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\usbd -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\gpiote -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\queue -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\sensorsim -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\usbd -I..\..\..\..\..\..\components\libraries\usbd\class\audio -I..\..\..\..\..\..\components\libraries\usbd\class\cdc -I..\..\..\..\..\..\components\libraries\usbd\class\cdc\acm -I..\..\..\..\..\..\components\libraries\usbd\class\hid -I..\..\..\..\..\..\components\libraries\usbd\class\hid\generic -I..\..\..\..\..\..\components\libraries\usbd\class\hid\kbd -I..\..\..\..\..\..\components\libraries\usbd\class\hid\mouse -I..\..\..\..\..\..\components\libraries\usbd\class\msc -I..\..\..\..\..\..\components\libraries\usbd\config -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s130\headers -I..\..\..\..\..\..\components\softdevice\s130\headers\nrf51 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_sls -ID:\development\nordic_ble\src_code\nrf51_sdk_v12_3_0\nRF5_SDK_12.3.0_d7731ad\examples\ble_peripheral\ble_app_smart_locker\JJDK_ZG_ZK\s130\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.11.1\Device\Include -D__MICROLIB -D_RTE_ -DNRF51 -DBLE_STACK_SUPPORT_REQD -DNRF51822 -DBOARD_JJDK_ZG_ZK -DNRF_SD_BLE_API_VERSION=2 -DS130 -DNRF51 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 --omf_browse=.\debug\pm_mutex.crf ..\..\..\..\..\..\components\ble\peer_manager\pm_mutex.c]
                          THUMB

                          AREA ||i.lock_by_mask||, CODE, READONLY, ALIGN=1

                  lock_by_mask PROC
;;;59      */
;;;60     static bool lock_by_mask(uint8_t * p_mutex, uint8_t mutex_mask)
000000  b5f8              PUSH     {r3-r7,lr}
;;;61     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;62         bool success = false;
000006  2600              MOVS     r6,#0
;;;63     
;;;64         if ( (*p_mutex & mutex_mask) == 0 )
000008  7820              LDRB     r0,[r4,#0]
00000a  4028              ANDS     r0,r0,r5
00000c  2800              CMP      r0,#0
00000e  d110              BNE      |L1.50|
;;;65         {
;;;66             CRITICAL_REGION_ENTER();
000010  9000              STR      r0,[sp,#0]
000012  4668              MOV      r0,sp
000014  f7fffffe          BL       app_util_critical_region_enter
;;;67             if ( (*p_mutex & mutex_mask) == 0 )
000018  7820              LDRB     r0,[r4,#0]
00001a  4028              ANDS     r0,r0,r5
00001c  2800              CMP      r0,#0
00001e  d103              BNE      |L1.40|
;;;68             {
;;;69                 *p_mutex |= mutex_mask;
000020  7820              LDRB     r0,[r4,#0]
000022  4328              ORRS     r0,r0,r5
000024  7020              STRB     r0,[r4,#0]
;;;70     
;;;71                 success = true;
000026  2601              MOVS     r6,#1
                  |L1.40|
;;;72             }
;;;73             CRITICAL_REGION_EXIT();
000028  4668              MOV      r0,sp
00002a  7800              LDRB     r0,[r0,#0]
00002c  f7fffffe          BL       app_util_critical_region_exit
000030  bf00              NOP      
                  |L1.50|
;;;74         }
;;;75     
;;;76         return ( success );
000032  4630              MOV      r0,r6
;;;77     }
000034  bdf8              POP      {r3-r7,pc}
;;;78     
                          ENDP


                          AREA ||i.pm_mutex_init||, CODE, READONLY, ALIGN=1

                  pm_mutex_init PROC
;;;79     
;;;80     void pm_mutex_init(uint8_t * p_mutex, uint16_t mutex_size)
000000  b570              PUSH     {r4-r6,lr}
;;;81     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;82         if (p_mutex != NULL)
000006  2c00              CMP      r4,#0
000008  d004              BEQ      |L2.20|
;;;83         {
;;;84             memset(&p_mutex[0], 0, MUTEX_STORAGE_SIZE(mutex_size));
00000a  1de8              ADDS     r0,r5,#7
00000c  10c1              ASRS     r1,r0,#3
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       __aeabi_memclr
                  |L2.20|
;;;85         }
;;;86     }
000014  bd70              POP      {r4-r6,pc}
;;;87     
                          ENDP


                          AREA ||i.pm_mutex_lock||, CODE, READONLY, ALIGN=1

                  pm_mutex_lock PROC
;;;88     
;;;89     bool pm_mutex_lock(uint8_t * p_mutex, uint16_t mutex_id)
000000  b570              PUSH     {r4-r6,lr}
;;;90     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;91         if (p_mutex != NULL)
000006  2c00              CMP      r4,#0
000008  d009              BEQ      |L3.30|
;;;92         {
;;;93             return ( lock_by_mask(&(p_mutex[mutex_id >> 3]), (1 << (mutex_id & 0x07))) );
00000a  076b              LSLS     r3,r5,#29
00000c  0f5b              LSRS     r3,r3,#29
00000e  2201              MOVS     r2,#1
000010  409a              LSLS     r2,r2,r3
000012  b2d1              UXTB     r1,r2
000014  10ea              ASRS     r2,r5,#3
000016  1910              ADDS     r0,r2,r4
000018  f7fffffe          BL       lock_by_mask
                  |L3.28|
;;;94         }
;;;95         else
;;;96         {
;;;97             return false;
;;;98         }
;;;99     }
00001c  bd70              POP      {r4-r6,pc}
                  |L3.30|
00001e  2000              MOVS     r0,#0                 ;97
000020  e7fc              B        |L3.28|
;;;100    
                          ENDP


                          AREA ||i.pm_mutex_lock_first_available||, CODE, READONLY, ALIGN=1

                  pm_mutex_lock_first_available PROC
;;;116    
;;;117    uint16_t pm_mutex_lock_first_available(uint8_t * p_mutex, uint16_t mutex_size)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;119        if (p_mutex != NULL)
000006  2d00              CMP      r5,#0
000008  d012              BEQ      |L4.48|
;;;120        {
;;;121            for ( uint16_t i = 0; i < mutex_size; i++ )
00000a  2400              MOVS     r4,#0
00000c  e00e              B        |L4.44|
                  |L4.14|
;;;122            {
;;;123                if ( lock_by_mask(&(p_mutex[i >> 3]), 1 << (i & 0x07)) )
00000e  0763              LSLS     r3,r4,#29
000010  0f5b              LSRS     r3,r3,#29
000012  2201              MOVS     r2,#1
000014  409a              LSLS     r2,r2,r3
000016  b2d1              UXTB     r1,r2
000018  10e2              ASRS     r2,r4,#3
00001a  1950              ADDS     r0,r2,r5
00001c  f7fffffe          BL       lock_by_mask
000020  2800              CMP      r0,#0
000022  d001              BEQ      |L4.40|
;;;124                {
;;;125                    return ( i );
000024  4620              MOV      r0,r4
                  |L4.38|
;;;126                }
;;;127            }
;;;128        }
;;;129    
;;;130        return ( mutex_size );
;;;131    }
000026  bd70              POP      {r4-r6,pc}
                  |L4.40|
000028  1c60              ADDS     r0,r4,#1              ;121
00002a  b284              UXTH     r4,r0                 ;121
                  |L4.44|
00002c  42b4              CMP      r4,r6                 ;121
00002e  dbee              BLT      |L4.14|
                  |L4.48|
000030  4630              MOV      r0,r6                 ;130
000032  e7f8              B        |L4.38|
;;;132    
                          ENDP


                          AREA ||i.pm_mutex_lock_status_get||, CODE, READONLY, ALIGN=1

                  pm_mutex_lock_status_get PROC
;;;133    
;;;134    bool pm_mutex_lock_status_get(uint8_t * p_mutex, uint16_t mutex_id)
000000  b510              PUSH     {r4,lr}
;;;135    {
000002  4602              MOV      r2,r0
;;;136        if (p_mutex != NULL)
000004  2a00              CMP      r2,#0
000006  d00c              BEQ      |L5.34|
;;;137        {
;;;138            return ( (p_mutex[mutex_id >> 3] & (1 << (mutex_id & 0x07))) );
000008  10c8              ASRS     r0,r1,#3
00000a  5c10              LDRB     r0,[r2,r0]
00000c  074c              LSLS     r4,r1,#29
00000e  0f64              LSRS     r4,r4,#29
000010  2301              MOVS     r3,#1
000012  40a3              LSLS     r3,r3,r4
000014  4018              ANDS     r0,r0,r3
000016  2800              CMP      r0,#0
000018  d001              BEQ      |L5.30|
00001a  2001              MOVS     r0,#1
                  |L5.28|
;;;139        }
;;;140        else
;;;141        {
;;;142            return true;
;;;143        }
;;;144    }
00001c  bd10              POP      {r4,pc}
                  |L5.30|
00001e  2000              MOVS     r0,#0                 ;138
000020  e7fc              B        |L5.28|
                  |L5.34|
000022  2001              MOVS     r0,#1                 ;142
000024  e7fa              B        |L5.28|
;;;145    #endif // NRF_MODULE_ENABLED(PEER_MANAGER)
                          ENDP


                          AREA ||i.pm_mutex_unlock||, CODE, READONLY, ALIGN=1

                  pm_mutex_unlock PROC
;;;101    
;;;102    void pm_mutex_unlock(uint8_t * p_mutex, uint16_t mutex_id)
000000  b5f8              PUSH     {r3-r7,lr}
;;;103    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;104        uint8_t mutex_base = mutex_id >> 3;
000006  0568              LSLS     r0,r5,#21
000008  0e06              LSRS     r6,r0,#24
;;;105        uint8_t mutex_mask = (1 << (mutex_id & 0x07));
00000a  0769              LSLS     r1,r5,#29
00000c  0f49              LSRS     r1,r1,#29
00000e  2001              MOVS     r0,#1
000010  4088              LSLS     r0,r0,r1
000012  b2c7              UXTB     r7,r0
;;;106    
;;;107        if   ((p_mutex != NULL)
000014  2c00              CMP      r4,#0
000016  d010              BEQ      |L6.58|
;;;108           && (p_mutex[mutex_base] & mutex_mask))
000018  5da0              LDRB     r0,[r4,r6]
00001a  4038              ANDS     r0,r0,r7
00001c  2800              CMP      r0,#0
00001e  d00c              BEQ      |L6.58|
;;;109        {
;;;110            CRITICAL_REGION_ENTER();
000020  2100              MOVS     r1,#0
000022  9100              STR      r1,[sp,#0]
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       app_util_critical_region_enter
;;;111            p_mutex[mutex_base] &= ~mutex_mask;
00002a  5da0              LDRB     r0,[r4,r6]
00002c  43b8              BICS     r0,r0,r7
00002e  55a0              STRB     r0,[r4,r6]
;;;112            CRITICAL_REGION_EXIT();
000030  4668              MOV      r0,sp
000032  7800              LDRB     r0,[r0,#0]
000034  f7fffffe          BL       app_util_critical_region_exit
000038  bf00              NOP      
                  |L6.58|
;;;113        }
;;;114    }
00003a  bdf8              POP      {r3-r7,pc}
;;;115    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\peer_manager\\pm_mutex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_pm_mutex_c_3d8067ae____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.2.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_pm_mutex_c_3d8067ae____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_pm_mutex_c_3d8067ae____REVSH|
#line 144
|__asm___10_pm_mutex_c_3d8067ae____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
