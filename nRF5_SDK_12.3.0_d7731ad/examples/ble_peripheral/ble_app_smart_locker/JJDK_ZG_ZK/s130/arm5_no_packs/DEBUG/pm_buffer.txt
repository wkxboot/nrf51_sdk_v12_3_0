; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\pm_buffer.o --asm_dir=.\DEBUG\ --list_dir=.\DEBUG\ --depend=.\debug\pm_buffer.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\power -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\usbd -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\gpiote -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\queue -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\sensorsim -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\usbd -I..\..\..\..\..\..\components\libraries\usbd\class\audio -I..\..\..\..\..\..\components\libraries\usbd\class\cdc -I..\..\..\..\..\..\components\libraries\usbd\class\cdc\acm -I..\..\..\..\..\..\components\libraries\usbd\class\hid -I..\..\..\..\..\..\components\libraries\usbd\class\hid\generic -I..\..\..\..\..\..\components\libraries\usbd\class\hid\kbd -I..\..\..\..\..\..\components\libraries\usbd\class\hid\mouse -I..\..\..\..\..\..\components\libraries\usbd\class\msc -I..\..\..\..\..\..\components\libraries\usbd\config -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s130\headers -I..\..\..\..\..\..\components\softdevice\s130\headers\nrf51 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_sls -ID:\development\nordic_ble\src_code\nrf51_sdk_v12_3_0\nRF5_SDK_12.3.0_d7731ad\examples\ble_peripheral\ble_app_smart_locker\JJDK_ZG_ZK\s130\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.11.1\Device\Include -D__MICROLIB -D_RTE_ -DNRF51 -DBLE_STACK_SUPPORT_REQD -DNRF51822 -DBOARD_JJDK_ZG_ZK -DNRF_SD_BLE_API_VERSION=2 -DS130 -DNRF51 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 --omf_browse=.\debug\pm_buffer.crf ..\..\..\..\..\..\components\ble\peer_manager\pm_buffer.c]
                          THUMB

                          AREA ||i.pm_buffer_block_acquire||, CODE, READONLY, ALIGN=1

                  pm_buffer_block_acquire PROC
;;;87     
;;;88     uint8_t pm_buffer_block_acquire(pm_buffer_t * p_buffer, uint32_t n_blocks)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;89     {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
;;;90         if (!BUFFER_IS_VALID(p_buffer))
000006  2c00              CMP      r4,#0
000008  d005              BEQ      |L1.22|
00000a  6820              LDR      r0,[r4,#0]
00000c  2800              CMP      r0,#0
00000e  d002              BEQ      |L1.22|
000010  6860              LDR      r0,[r4,#4]
000012  2800              CMP      r0,#0
000014  d101              BNE      |L1.26|
                  |L1.22|
;;;91         {
;;;92             return ( PM_BUFFER_INVALID_ID );
000016  20ff              MOVS     r0,#0xff
                  |L1.24|
;;;93         }
;;;94     
;;;95         uint8_t first_locked_mutex = PM_BUFFER_INVALID_ID;
;;;96     
;;;97         for (uint8_t i = 0; i < p_buffer->n_blocks; i++)
;;;98         {
;;;99             if (pm_mutex_lock(p_buffer->p_mutex, i))
;;;100            {
;;;101                if (first_locked_mutex == PM_BUFFER_INVALID_ID)
;;;102                {
;;;103                    first_locked_mutex = i;
;;;104                }
;;;105                if ((i - first_locked_mutex + 1) == n_blocks)
;;;106                {
;;;107                    return first_locked_mutex;
;;;108                }
;;;109            }
;;;110            else if (first_locked_mutex != PM_BUFFER_INVALID_ID)
;;;111            {
;;;112                for (uint8_t j = first_locked_mutex; j < i; j++)
;;;113                {
;;;114                    pm_buffer_release(p_buffer, j);
;;;115                }
;;;116                first_locked_mutex = PM_BUFFER_INVALID_ID;
;;;117            }
;;;118        }
;;;119    
;;;120        return ( PM_BUFFER_INVALID_ID );
;;;121    }
000018  bdfe              POP      {r1-r7,pc}
                  |L1.26|
00001a  25ff              MOVS     r5,#0xff              ;95
00001c  2600              MOVS     r6,#0                 ;97
00001e  e01e              B        |L1.94|
                  |L1.32|
000020  4631              MOV      r1,r6                 ;99
000022  6860              LDR      r0,[r4,#4]            ;99
000024  f7fffffe          BL       pm_mutex_lock
000028  2800              CMP      r0,#0                 ;99
00002a  d009              BEQ      |L1.64|
00002c  2dff              CMP      r5,#0xff              ;101
00002e  d100              BNE      |L1.50|
000030  4635              MOV      r5,r6                 ;103
                  |L1.50|
000032  1b70              SUBS     r0,r6,r5              ;105
000034  1c40              ADDS     r0,r0,#1              ;105
000036  9902              LDR      r1,[sp,#8]            ;105
000038  4288              CMP      r0,r1                 ;105
00003a  d10e              BNE      |L1.90|
00003c  4628              MOV      r0,r5                 ;107
00003e  e7eb              B        |L1.24|
                  |L1.64|
000040  2dff              CMP      r5,#0xff              ;110
000042  d00a              BEQ      |L1.90|
000044  462f              MOV      r7,r5                 ;112
000046  e005              B        |L1.84|
                  |L1.72|
000048  4639              MOV      r1,r7                 ;114
00004a  4620              MOV      r0,r4                 ;114
00004c  f7fffffe          BL       pm_buffer_release
000050  1c78              ADDS     r0,r7,#1              ;112
000052  b2c7              UXTB     r7,r0                 ;112
                  |L1.84|
000054  42b7              CMP      r7,r6                 ;112
000056  dbf7              BLT      |L1.72|
000058  25ff              MOVS     r5,#0xff              ;116
                  |L1.90|
00005a  1c70              ADDS     r0,r6,#1              ;97
00005c  b2c6              UXTB     r6,r0                 ;97
                  |L1.94|
00005e  68a0              LDR      r0,[r4,#8]            ;97
000060  42b0              CMP      r0,r6                 ;97
000062  d8dd              BHI      |L1.32|
000064  20ff              MOVS     r0,#0xff              ;120
000066  e7d7              B        |L1.24|
;;;122    
                          ENDP


                          AREA ||i.pm_buffer_init||, CODE, READONLY, ALIGN=1

                  pm_buffer_init PROC
;;;56     
;;;57     ret_code_t pm_buffer_init(pm_buffer_t * p_buffer,
000000  b5ff              PUSH     {r0-r7,lr}
;;;58                               uint8_t     * p_buffer_memory,
;;;59                               uint32_t      buffer_memory_size,
;;;60                               uint8_t     * p_mutex_memory,
;;;61                               uint32_t      mutex_memory_size,
;;;62                               uint32_t      n_blocks,
;;;63                               uint32_t      block_size)
;;;64     {
000002  b081              SUB      sp,sp,#4
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  461f              MOV      r7,r3
00000a  9d0b              LDR      r5,[sp,#0x2c]
;;;65         if (   (p_buffer           != NULL)
00000c  2c00              CMP      r4,#0
00000e  d01e              BEQ      |L2.78|
;;;66             && (p_buffer_memory    != NULL)
000010  2e00              CMP      r6,#0
000012  d01c              BEQ      |L2.78|
;;;67             && (p_mutex_memory     != NULL)
000014  2f00              CMP      r7,#0
000016  d01a              BEQ      |L2.78|
;;;68             && (buffer_memory_size >= (n_blocks * block_size))
000018  980c              LDR      r0,[sp,#0x30]
00001a  4368              MULS     r0,r5,r0
00001c  9903              LDR      r1,[sp,#0xc]
00001e  4288              CMP      r0,r1
000020  d815              BHI      |L2.78|
;;;69             && (mutex_memory_size  >= MUTEX_STORAGE_SIZE(n_blocks))
000022  1de8              ADDS     r0,r5,#7
000024  08c1              LSRS     r1,r0,#3
000026  980a              LDR      r0,[sp,#0x28]
000028  4281              CMP      r1,r0
00002a  d810              BHI      |L2.78|
;;;70             && (n_blocks           != 0)
00002c  2d00              CMP      r5,#0
00002e  d00e              BEQ      |L2.78|
;;;71             && (block_size         != 0))
000030  980c              LDR      r0,[sp,#0x30]
000032  2800              CMP      r0,#0
000034  d00b              BEQ      |L2.78|
;;;72         {
;;;73             p_buffer->p_memory   = p_buffer_memory;
000036  6026              STR      r6,[r4,#0]
;;;74             p_buffer->p_mutex    = p_mutex_memory;
000038  6067              STR      r7,[r4,#4]
;;;75             p_buffer->n_blocks   = n_blocks;
00003a  60a5              STR      r5,[r4,#8]
;;;76             p_buffer->block_size = block_size;
00003c  980c              LDR      r0,[sp,#0x30]
00003e  60e0              STR      r0,[r4,#0xc]
;;;77             pm_mutex_init(p_buffer->p_mutex, n_blocks);
000040  b2a9              UXTH     r1,r5
000042  6860              LDR      r0,[r4,#4]
000044  f7fffffe          BL       pm_mutex_init
;;;78     
;;;79             return NRF_SUCCESS;
000048  2000              MOVS     r0,#0
                  |L2.74|
;;;80         }
;;;81         else
;;;82         {
;;;83             return NRF_ERROR_INVALID_PARAM;
;;;84         }
;;;85     }
00004a  b005              ADD      sp,sp,#0x14
00004c  bdf0              POP      {r4-r7,pc}
                  |L2.78|
00004e  2007              MOVS     r0,#7                 ;83
000050  e7fb              B        |L2.74|
;;;86     
                          ENDP


                          AREA ||i.pm_buffer_ptr_get||, CODE, READONLY, ALIGN=1

                  pm_buffer_ptr_get PROC
;;;123    
;;;124    uint8_t * pm_buffer_ptr_get(pm_buffer_t * p_buffer, uint8_t id)
000000  b570              PUSH     {r4-r6,lr}
;;;125    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;126        if (!BUFFER_IS_VALID(p_buffer))
000006  2c00              CMP      r4,#0
000008  d005              BEQ      |L3.22|
00000a  6820              LDR      r0,[r4,#0]
00000c  2800              CMP      r0,#0
00000e  d002              BEQ      |L3.22|
000010  6860              LDR      r0,[r4,#4]
000012  2800              CMP      r0,#0
000014  d101              BNE      |L3.26|
                  |L3.22|
;;;127        {
;;;128            return ( NULL );
000016  2000              MOVS     r0,#0
                  |L3.24|
;;;129        }
;;;130    
;;;131        if ( (id != PM_BUFFER_INVALID_ID)
;;;132        &&   pm_mutex_lock_status_get(p_buffer->p_mutex, id) )
;;;133        {
;;;134            return ( &p_buffer->p_memory[id * p_buffer->block_size] );
;;;135        }
;;;136        else
;;;137        {
;;;138            return ( NULL );
;;;139        }
;;;140    }
000018  bd70              POP      {r4-r6,pc}
                  |L3.26|
00001a  2dff              CMP      r5,#0xff              ;131
00001c  d00a              BEQ      |L3.52|
00001e  4629              MOV      r1,r5                 ;132
000020  6860              LDR      r0,[r4,#4]            ;132
000022  f7fffffe          BL       pm_mutex_lock_status_get
000026  2800              CMP      r0,#0                 ;132
000028  d004              BEQ      |L3.52|
00002a  68e0              LDR      r0,[r4,#0xc]          ;134
00002c  4368              MULS     r0,r5,r0              ;134
00002e  6821              LDR      r1,[r4,#0]            ;134
000030  1808              ADDS     r0,r1,r0              ;134
000032  e7f1              B        |L3.24|
                  |L3.52|
000034  2000              MOVS     r0,#0                 ;138
000036  e7ef              B        |L3.24|
;;;141    
                          ENDP


                          AREA ||i.pm_buffer_release||, CODE, READONLY, ALIGN=1

                  pm_buffer_release PROC
;;;142    
;;;143    void pm_buffer_release(pm_buffer_t * p_buffer, uint8_t id)
000000  b570              PUSH     {r4-r6,lr}
;;;144    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;145        if (    BUFFER_IS_VALID(p_buffer)
000006  2c00              CMP      r4,#0
000008  d011              BEQ      |L4.46|
00000a  6820              LDR      r0,[r4,#0]
00000c  2800              CMP      r0,#0
00000e  d00e              BEQ      |L4.46|
000010  6860              LDR      r0,[r4,#4]
000012  2800              CMP      r0,#0
000014  d00b              BEQ      |L4.46|
;;;146           &&  (id != PM_BUFFER_INVALID_ID)
000016  2dff              CMP      r5,#0xff
000018  d009              BEQ      |L4.46|
;;;147           &&   pm_mutex_lock_status_get(p_buffer->p_mutex, id))
00001a  4629              MOV      r1,r5
00001c  6860              LDR      r0,[r4,#4]
00001e  f7fffffe          BL       pm_mutex_lock_status_get
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L4.46|
;;;148        {
;;;149            pm_mutex_unlock(p_buffer->p_mutex, id);
000026  4629              MOV      r1,r5
000028  6860              LDR      r0,[r4,#4]
00002a  f7fffffe          BL       pm_mutex_unlock
                  |L4.46|
;;;150        }
;;;151    }
00002e  bd70              POP      {r4-r6,pc}
;;;152    #endif // NRF_MODULE_ENABLED(PEER_MANAGER)
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\peer_manager\\pm_buffer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_pm_buffer_c_dfd62912____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.2.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_pm_buffer_c_dfd62912____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_pm_buffer_c_dfd62912____REVSH|
#line 144
|__asm___11_pm_buffer_c_dfd62912____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
