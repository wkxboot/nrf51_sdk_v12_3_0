; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\peer_data_storage.o --asm_dir=.\DEBUG\ --list_dir=.\DEBUG\ --depend=.\debug\peer_data_storage.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\power -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\usbd -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\gpiote -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\queue -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\sensorsim -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\usbd -I..\..\..\..\..\..\components\libraries\usbd\class\audio -I..\..\..\..\..\..\components\libraries\usbd\class\cdc -I..\..\..\..\..\..\components\libraries\usbd\class\cdc\acm -I..\..\..\..\..\..\components\libraries\usbd\class\hid -I..\..\..\..\..\..\components\libraries\usbd\class\hid\generic -I..\..\..\..\..\..\components\libraries\usbd\class\hid\kbd -I..\..\..\..\..\..\components\libraries\usbd\class\hid\mouse -I..\..\..\..\..\..\components\libraries\usbd\class\msc -I..\..\..\..\..\..\components\libraries\usbd\config -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s130\headers -I..\..\..\..\..\..\components\softdevice\s130\headers\nrf51 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_sls -ID:\development\nordic_ble\src_code\nrf51_sdk_v12_3_0\nRF5_SDK_12.3.0_d7731ad\examples\ble_peripheral\ble_app_smart_locker\JJDK_ZG_ZK\s130\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.11.1\Device\Include -D__MICROLIB -D_RTE_ -DNRF51 -DBLE_STACK_SUPPORT_REQD -DNRF51822 -DBOARD_JJDK_ZG_ZK -DNRF_SD_BLE_API_VERSION=2 -DS130 -DNRF51 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 --omf_browse=.\debug\peer_data_storage.crf ..\..\..\..\..\..\components\ble\peer_manager\peer_data_storage.c]
                          THUMB

                          AREA ||i.fds_evt_handler||, CODE, READONLY, ALIGN=2

                  fds_evt_handler PROC
;;;251    
;;;252    static void fds_evt_handler(fds_evt_t const * const p_fds_evt)
000000  b51f              PUSH     {r0-r4,lr}
;;;253    {
000002  4604              MOV      r4,r0
;;;254        pds_evt_t pds_evt;
;;;255    
;;;256        pds_evt.result = (p_fds_evt->result == FDS_SUCCESS);
000004  6860              LDR      r0,[r4,#4]
000006  2800              CMP      r0,#0
000008  d101              BNE      |L1.14|
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L1.16|
                  |L1.14|
00000e  2000              MOVS     r0,#0
                  |L1.16|
000010  9003              STR      r0,[sp,#0xc]
;;;257    
;;;258        switch (p_fds_evt->id)
000012  7820              LDRB     r0,[r4,#0]
000014  0003              MOVS     r3,r0
000016  f7fffffe          BL       __ARM_common_switch8
00001a  068a              DCB      0x06,0x8a
00001c  04053456          DCB      0x04,0x05,0x34,0x56
000020  838a              DCB      0x83,0x8a
;;;259        {
;;;260            case FDS_EVT_WRITE:
;;;261            case FDS_EVT_UPDATE:
000022  bf00              NOP      
;;;262                if (   file_id_within_pm_range(p_fds_evt->write.file_id)
000024  89a0              LDRH     r0,[r4,#0xc]
000026  f7fffffe          BL       file_id_within_pm_range
00002a  2800              CMP      r0,#0
00002c  d104              BNE      |L1.56|
;;;263                    || record_key_within_pm_range(p_fds_evt->write.record_key))
00002e  89e0              LDRH     r0,[r4,#0xe]
000030  f7fffffe          BL       record_key_within_pm_range
000034  2800              CMP      r0,#0
000036  d023              BEQ      |L1.128|
                  |L1.56|
;;;264                {
;;;265                    pds_evt.peer_id = file_id_to_peer_id(p_fds_evt->write.file_id);
000038  89a0              LDRH     r0,[r4,#0xc]
00003a  f7fffffe          BL       file_id_to_peer_id
00003e  4669              MOV      r1,sp
000040  8048              STRH     r0,[r1,#2]
;;;266                    pds_evt.data_id = record_key_to_peer_data_id(p_fds_evt->write.record_key);
000042  89e0              LDRH     r0,[r4,#0xe]
000044  f7fffffe          BL       record_key_to_peer_data_id
000048  4669              MOV      r1,sp
00004a  7108              STRB     r0,[r1,#4]
;;;267    
;;;268                    if (p_fds_evt->id == FDS_EVT_WRITE)
00004c  7820              LDRB     r0,[r4,#0]
00004e  2801              CMP      r0,#1
000050  d107              BNE      |L1.98|
;;;269                    {
;;;270                        pds_evt.evt_id = (p_fds_evt->result == FDS_SUCCESS) ? PDS_EVT_STORED :
000052  6860              LDR      r0,[r4,#4]
000054  2800              CMP      r0,#0
000056  d100              BNE      |L1.90|
000058  e000              B        |L1.92|
                  |L1.90|
;;;271                                                                              PDS_EVT_ERROR_STORE;
00005a  2003              MOVS     r0,#3
                  |L1.92|
00005c  4669              MOV      r1,sp
00005e  7008              STRB     r0,[r1,#0]
000060  e007              B        |L1.114|
                  |L1.98|
;;;272                    }
;;;273                    else
;;;274                    {
;;;275                        pds_evt.evt_id = (p_fds_evt->result == FDS_SUCCESS) ? PDS_EVT_UPDATED :
000062  6860              LDR      r0,[r4,#4]
000064  2800              CMP      r0,#0
000066  d101              BNE      |L1.108|
000068  2001              MOVS     r0,#1
00006a  e000              B        |L1.110|
                  |L1.108|
;;;276                                                                              PDS_EVT_ERROR_UPDATE;
00006c  2004              MOVS     r0,#4
                  |L1.110|
00006e  4669              MOV      r1,sp
000070  7008              STRB     r0,[r1,#0]
                  |L1.114|
;;;277                    }
;;;278    
;;;279                    pds_evt.result      = p_fds_evt->result;
000072  6860              LDR      r0,[r4,#4]
000074  9003              STR      r0,[sp,#0xc]
;;;280                    pds_evt.store_token = p_fds_evt->write.record_id;
000076  68a0              LDR      r0,[r4,#8]
000078  9002              STR      r0,[sp,#8]
;;;281    
;;;282                    pds_evt_send(&pds_evt);
00007a  4668              MOV      r0,sp
00007c  f7fffffe          BL       pds_evt_send
                  |L1.128|
;;;283                }
;;;284                break;
000080  e056              B        |L1.304|
;;;285    
;;;286            case FDS_EVT_DEL_RECORD:
;;;287                if (   file_id_within_pm_range(p_fds_evt->del.file_id)
000082  89a0              LDRH     r0,[r4,#0xc]
000084  f7fffffe          BL       file_id_within_pm_range
000088  2800              CMP      r0,#0
00008a  d104              BNE      |L1.150|
;;;288                    || record_key_within_pm_range(p_fds_evt->del.record_key))
00008c  89e0              LDRH     r0,[r4,#0xe]
00008e  f7fffffe          BL       record_key_within_pm_range
000092  2800              CMP      r0,#0
000094  d016              BEQ      |L1.196|
                  |L1.150|
;;;289                {
;;;290                    pds_evt.peer_id = file_id_to_peer_id(p_fds_evt->del.file_id);
000096  89a0              LDRH     r0,[r4,#0xc]
000098  f7fffffe          BL       file_id_to_peer_id
00009c  4669              MOV      r1,sp
00009e  8048              STRH     r0,[r1,#2]
;;;291                    pds_evt.data_id = record_key_to_peer_data_id(p_fds_evt->del.record_key);
0000a0  89e0              LDRH     r0,[r4,#0xe]
0000a2  f7fffffe          BL       record_key_to_peer_data_id
0000a6  4669              MOV      r1,sp
0000a8  7108              STRB     r0,[r1,#4]
;;;292    
;;;293                    pds_evt.evt_id = (p_fds_evt->result == FDS_SUCCESS) ? PDS_EVT_CLEARED :
0000aa  6860              LDR      r0,[r4,#4]
0000ac  2800              CMP      r0,#0
0000ae  d101              BNE      |L1.180|
0000b0  2002              MOVS     r0,#2
0000b2  e000              B        |L1.182|
                  |L1.180|
;;;294                                                                          PDS_EVT_ERROR_CLEAR;
0000b4  2005              MOVS     r0,#5
                  |L1.182|
0000b6  4669              MOV      r1,sp
0000b8  7008              STRB     r0,[r1,#0]
;;;295    
;;;296                    pds_evt.store_token = p_fds_evt->del.record_id;
0000ba  68a0              LDR      r0,[r4,#8]
0000bc  9002              STR      r0,[sp,#8]
;;;297    
;;;298                    pds_evt_send(&pds_evt);
0000be  4668              MOV      r0,sp
0000c0  f7fffffe          BL       pds_evt_send
                  |L1.196|
;;;299                }
;;;300                break;
0000c4  e034              B        |L1.304|
;;;301    
;;;302            case FDS_EVT_DEL_FILE:
;;;303                {
;;;304                    if (    file_id_within_pm_range(p_fds_evt->del.file_id)
0000c6  89a0              LDRH     r0,[r4,#0xc]
0000c8  f7fffffe          BL       file_id_within_pm_range
0000cc  2800              CMP      r0,#0
0000ce  d026              BEQ      |L1.286|
;;;305                        && (p_fds_evt->del.record_key == FDS_RECORD_KEY_DIRTY))
0000d0  89e0              LDRH     r0,[r4,#0xe]
0000d2  2800              CMP      r0,#0
0000d4  d123              BNE      |L1.286|
;;;306                    {
;;;307                        pds_evt.peer_id = file_id_to_peer_id(p_fds_evt->del.file_id);
0000d6  89a0              LDRH     r0,[r4,#0xc]
0000d8  f7fffffe          BL       file_id_to_peer_id
0000dc  4669              MOV      r1,sp
0000de  8048              STRH     r0,[r1,#2]
;;;308                        pds_evt.data_id = record_key_to_peer_data_id(p_fds_evt->del.record_key);
0000e0  89e0              LDRH     r0,[r4,#0xe]
0000e2  f7fffffe          BL       record_key_to_peer_data_id
0000e6  4601              MOV      r1,r0
0000e8  4668              MOV      r0,sp
0000ea  7101              STRB     r1,[r0,#4]
;;;309    
;;;310                        pds_evt.data_id = PM_PEER_DATA_ID_INVALID;
0000ec  21ff              MOVS     r1,#0xff
0000ee  7101              STRB     r1,[r0,#4]
;;;311                        if (p_fds_evt->result == FDS_SUCCESS)
0000f0  6860              LDR      r0,[r4,#4]
0000f2  2800              CMP      r0,#0
0000f4  d106              BNE      |L1.260|
;;;312                        {
;;;313                            pds_evt.evt_id = PDS_EVT_PEER_ID_CLEAR;
0000f6  2006              MOVS     r0,#6
0000f8  4669              MOV      r1,sp
0000fa  7008              STRB     r0,[r1,#0]
;;;314                            peer_id_free(pds_evt.peer_id);
0000fc  8848              LDRH     r0,[r1,#2]
0000fe  f7fffffe          BL       peer_id_free
000102  e002              B        |L1.266|
                  |L1.260|
;;;315                        }
;;;316                        else
;;;317                        {
;;;318                            pds_evt.evt_id = PDS_EVT_ERROR_PEER_ID_CLEAR;
000104  2007              MOVS     r0,#7
000106  4669              MOV      r1,sp
000108  7008              STRB     r0,[r1,#0]
                  |L1.266|
;;;319                        }
;;;320    
;;;321                        m_peer_delete_queued  = false;
00010a  2000              MOVS     r0,#0
00010c  490e              LDR      r1,|L1.328|
00010e  7008              STRB     r0,[r1,#0]
;;;322                        m_peer_delete_ongoing = false;
000110  490e              LDR      r1,|L1.332|
000112  7008              STRB     r0,[r1,#0]
;;;323    
;;;324                        peer_data_delete();
000114  f7fffffe          BL       peer_data_delete
;;;325    
;;;326                        pds_evt_send(&pds_evt);
000118  4668              MOV      r0,sp
00011a  f7fffffe          BL       pds_evt_send
                  |L1.286|
;;;327                    }
;;;328                }
;;;329                break;
00011e  e007              B        |L1.304|
;;;330    
;;;331            case FDS_EVT_GC:
;;;332                pds_evt.evt_id = PDS_EVT_COMPRESSED;
000120  2008              MOVS     r0,#8
000122  4669              MOV      r1,sp
000124  7008              STRB     r0,[r1,#0]
;;;333                pds_evt_send(&pds_evt);
000126  4668              MOV      r0,sp
000128  f7fffffe          BL       pds_evt_send
;;;334                break;
00012c  e000              B        |L1.304|
;;;335    
;;;336            default:
;;;337                break;
00012e  bf00              NOP      
                  |L1.304|
000130  bf00              NOP                            ;284
;;;338        }
;;;339    
;;;340        if (m_peer_delete_queued)
000132  4805              LDR      r0,|L1.328|
000134  7800              LDRB     r0,[r0,#0]  ; m_peer_delete_queued
000136  2800              CMP      r0,#0
000138  d004              BEQ      |L1.324|
;;;341        {
;;;342            m_peer_delete_queued  = false;
00013a  2000              MOVS     r0,#0
00013c  4902              LDR      r1,|L1.328|
00013e  7008              STRB     r0,[r1,#0]
;;;343            peer_data_delete();
000140  f7fffffe          BL       peer_data_delete
                  |L1.324|
;;;344        }
;;;345    }
000144  bd1f              POP      {r0-r4,pc}
;;;346    
                          ENDP

000146  0000              DCW      0x0000
                  |L1.328|
                          DCD      m_peer_delete_queued
                  |L1.332|
                          DCD      m_peer_delete_ongoing

                          AREA ||i.file_id_to_peer_id||, CODE, READONLY, ALIGN=1

                  file_id_to_peer_id PROC
;;;102    // Function to convert peer data id to type id.
;;;103    static pm_peer_id_t file_id_to_peer_id(uint16_t file_id)
000000  4601              MOV      r1,r0
;;;104    {
;;;105        return (pm_peer_id_t)(file_id + FILE_ID_TO_PEER_ID);
000002  2003              MOVS     r0,#3
000004  0380              LSLS     r0,r0,#14
000006  1a08              SUBS     r0,r1,r0
000008  b280              UXTH     r0,r0
;;;106    }
00000a  4770              BX       lr
;;;107    
                          ENDP


                          AREA ||i.file_id_within_pm_range||, CODE, READONLY, ALIGN=2

                  file_id_within_pm_range PROC
;;;123    // Function for checking whether a file ID is relevant for the Peer Manager.
;;;124    static bool file_id_within_pm_range(uint16_t file_id)
000000  4601              MOV      r1,r0
;;;125    {
;;;126        return ((PDS_FIRST_RESERVED_FILE_ID <= file_id)
000002  2003              MOVS     r0,#3
000004  0380              LSLS     r0,r0,#14
000006  4281              CMP      r1,r0
000008  db04              BLT      |L3.20|
;;;127             && (file_id <= PDS_LAST_RESERVED_FILE_ID));
00000a  4803              LDR      r0,|L3.24|
00000c  4281              CMP      r1,r0
00000e  dc01              BGT      |L3.20|
000010  2001              MOVS     r0,#1
                  |L3.18|
;;;128    }
000012  4770              BX       lr
                  |L3.20|
000014  2000              MOVS     r0,#0                 ;127
000016  e7fc              B        |L3.18|
;;;129    
                          ENDP

                  |L3.24|
                          DCD      0x0000fffe

                          AREA ||i.pds_evt_send||, CODE, READONLY, ALIGN=2

                  pds_evt_send PROC
;;;85     // Function for dispatching events to all registered event handlers.
;;;86     static void pds_evt_send(pds_evt_t * p_event)
000000  b570              PUSH     {r4-r6,lr}
;;;87     {
000002  4605              MOV      r5,r0
;;;88         for (uint32_t i = 0; i < PDS_EVENT_HANDLERS_CNT; i++)
000004  2400              MOVS     r4,#0
000006  e005              B        |L4.20|
                  |L4.8|
;;;89         {
;;;90             m_evt_handlers[i](p_event);
000008  00a0              LSLS     r0,r4,#2
00000a  4a04              LDR      r2,|L4.28|
00000c  5811              LDR      r1,[r2,r0]
00000e  4628              MOV      r0,r5
000010  4788              BLX      r1
000012  1c64              ADDS     r4,r4,#1              ;88
                  |L4.20|
000014  2c00              CMP      r4,#0                 ;88
000016  d0f7              BEQ      |L4.8|
;;;91         }
;;;92     }
000018  bd70              POP      {r4-r6,pc}
;;;93     
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      m_evt_handlers

                          AREA ||i.pds_init||, CODE, READONLY, ALIGN=2

                  pds_init PROC
;;;347    
;;;348    ret_code_t pds_init()
000000  b510              PUSH     {r4,lr}
;;;349    {
;;;350        ret_code_t ret;
;;;351    
;;;352        // Check for re-initialization if debugging.
;;;353        NRF_PM_DEBUG_CHECK(!m_module_initialized);
;;;354    
;;;355        ret = fds_register(fds_evt_handler);
000002  480c              LDR      r0,|L5.52|
000004  f7fffffe          BL       fds_register
000008  4604              MOV      r4,r0
;;;356        if (ret != NRF_SUCCESS)
00000a  2c00              CMP      r4,#0
00000c  d001              BEQ      |L5.18|
;;;357        {
;;;358            return NRF_ERROR_INTERNAL;
00000e  2003              MOVS     r0,#3
                  |L5.16|
;;;359        }
;;;360    
;;;361        ret = fds_init();
;;;362        if (ret != NRF_SUCCESS)
;;;363        {
;;;364            return NRF_ERROR_STORAGE_FULL;
;;;365        }
;;;366    
;;;367        peer_id_init();
;;;368        peer_ids_load();
;;;369    
;;;370        m_module_initialized = true;
;;;371    
;;;372        return NRF_SUCCESS;
;;;373    }
000010  bd10              POP      {r4,pc}
                  |L5.18|
000012  f7fffffe          BL       fds_init
000016  4604              MOV      r4,r0                 ;361
000018  2c00              CMP      r4,#0                 ;362
00001a  d001              BEQ      |L5.32|
00001c  2086              MOVS     r0,#0x86              ;364
00001e  e7f7              B        |L5.16|
                  |L5.32|
000020  f7fffffe          BL       peer_id_init
000024  f7fffffe          BL       peer_ids_load
000028  2001              MOVS     r0,#1                 ;370
00002a  4903              LDR      r1,|L5.56|
00002c  7008              STRB     r0,[r1,#0]            ;370
00002e  2000              MOVS     r0,#0                 ;372
000030  e7ee              B        |L5.16|
;;;374    
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      fds_evt_handler
                  |L5.56|
                          DCD      m_module_initialized

                          AREA ||i.pds_next_deleted_peer_id_get||, CODE, READONLY, ALIGN=1

                  pds_next_deleted_peer_id_get PROC
;;;680    
;;;681    pm_peer_id_t pds_next_deleted_peer_id_get(pm_peer_id_t prev_peer_id)
000000  b510              PUSH     {r4,lr}
;;;682    {
000002  4604              MOV      r4,r0
;;;683        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;684        return peer_id_get_next_deleted(prev_peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       peer_id_get_next_deleted
;;;685    }
00000a  bd10              POP      {r4,pc}
;;;686    
                          ENDP


                          AREA ||i.pds_next_peer_id_get||, CODE, READONLY, ALIGN=1

                  pds_next_peer_id_get PROC
;;;673    
;;;674    pm_peer_id_t pds_next_peer_id_get(pm_peer_id_t prev_peer_id)
000000  b510              PUSH     {r4,lr}
;;;675    {
000002  4604              MOV      r4,r0
;;;676        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;677        return peer_id_get_next_used(prev_peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       peer_id_get_next_used
;;;678    }
00000a  bd10              POP      {r4,pc}
;;;679    
                          ENDP


                          AREA ||i.pds_peer_count_get||, CODE, READONLY, ALIGN=1

                  pds_peer_count_get PROC
;;;687    
;;;688    uint32_t pds_peer_count_get(void)
000000  b510              PUSH     {r4,lr}
;;;689    {
;;;690        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;691        return peer_id_n_ids();
000002  f7fffffe          BL       peer_id_n_ids
;;;692    }
000006  bd10              POP      {r4,pc}
;;;693    #endif // NRF_MODULE_ENABLED(PEER_MANAGER)
                          ENDP


                          AREA ||i.pds_peer_data_delete||, CODE, READONLY, ALIGN=1

                  pds_peer_data_delete PROC
;;;614    // @note emdi: unused..
;;;615    ret_code_t pds_peer_data_delete(pm_peer_id_t peer_id, pm_peer_data_id_t data_id)
000000  b5fe              PUSH     {r1-r7,lr}
;;;616    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;617        ret_code_t        ret;
;;;618        fds_record_desc_t record_desc;
;;;619    
;;;620        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;621    
;;;622        VERIFY_PEER_ID_IN_RANGE(peer_id);
000006  bf00              NOP      
000008  2dff              CMP      r5,#0xff
00000a  dd01              BLE      |L9.16|
00000c  2007              MOVS     r0,#7
                  |L9.14|
;;;623        VERIFY_PEER_DATA_ID_IN_RANGE(data_id);
;;;624    
;;;625        ret = peer_data_find(peer_id, data_id, &record_desc);
;;;626    
;;;627        if (ret != NRF_SUCCESS)
;;;628        {
;;;629            return NRF_ERROR_NOT_FOUND;
;;;630        }
;;;631    
;;;632        ret = fds_record_delete(&record_desc);
;;;633    
;;;634        switch (ret)
;;;635        {
;;;636            case FDS_SUCCESS:
;;;637                return NRF_SUCCESS;
;;;638    
;;;639            case FDS_ERR_NO_SPACE_IN_QUEUES:
;;;640                return NRF_ERROR_BUSY;
;;;641    
;;;642            default:
;;;643                return NRF_ERROR_INTERNAL;
;;;644        }
;;;645    }
00000e  bdfe              POP      {r1-r7,pc}
                  |L9.16|
000010  bf00              NOP                            ;622
000012  bf00              NOP                            ;623
000014  4630              MOV      r0,r6                 ;623
000016  f7fffffe          BL       peer_data_id_is_valid
00001a  2800              CMP      r0,#0                 ;623
00001c  d101              BNE      |L9.34|
00001e  2007              MOVS     r0,#7                 ;623
000020  e7f5              B        |L9.14|
                  |L9.34|
000022  bf00              NOP                            ;623
000024  466a              MOV      r2,sp                 ;625
000026  4631              MOV      r1,r6                 ;625
000028  4628              MOV      r0,r5                 ;625
00002a  f7fffffe          BL       peer_data_find
00002e  4604              MOV      r4,r0                 ;625
000030  2c00              CMP      r4,#0                 ;627
000032  d001              BEQ      |L9.56|
000034  2005              MOVS     r0,#5                 ;629
000036  e7ea              B        |L9.14|
                  |L9.56|
000038  4668              MOV      r0,sp                 ;632
00003a  f7fffffe          BL       fds_record_delete
00003e  4604              MOV      r4,r0                 ;632
000040  2c00              CMP      r4,#0                 ;634
000042  d002              BEQ      |L9.74|
000044  2c08              CMP      r4,#8                 ;634
000046  d104              BNE      |L9.82|
000048  e001              B        |L9.78|
                  |L9.74|
00004a  2000              MOVS     r0,#0                 ;637
00004c  e7df              B        |L9.14|
                  |L9.78|
00004e  2011              MOVS     r0,#0x11              ;640
000050  e7dd              B        |L9.14|
                  |L9.82|
000052  2003              MOVS     r0,#3                 ;643
000054  e7db              B        |L9.14|
;;;646    
                          ENDP


                          AREA ||i.pds_peer_data_iterate||, CODE, READONLY, ALIGN=2

                  pds_peer_data_iterate PROC
;;;446    
;;;447    bool pds_peer_data_iterate(pm_peer_data_id_t            data_id,
000000  b5f0              PUSH     {r4-r7,lr}
;;;448                               pm_peer_id_t         * const p_peer_id,
;;;449                               pm_peer_data_flash_t * const p_data)
;;;450    {
000002  b087              SUB      sp,sp,#0x1c
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
;;;451        ret_code_t         ret;
;;;452        uint16_t           rec_key;
;;;453        fds_record_desc_t  rec_desc;
;;;454        fds_flash_record_t rec_flash;
;;;455    
;;;456        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;457        NRF_PM_DEBUG_CHECK(p_peer_id != NULL);
;;;458        NRF_PM_DEBUG_CHECK(p_data    != NULL);
;;;459    
;;;460        // @note emdi: should we check the data_id ?
;;;461        rec_key = peer_data_id_to_record_key(data_id);
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       peer_data_id_to_record_key
000010  9006              STR      r0,[sp,#0x18]
;;;462    
;;;463        if (fds_record_find_by_key(rec_key, &rec_desc, &m_fds_ftok) != NRF_SUCCESS)
000012  4a11              LDR      r2,|L10.88|
000014  a903              ADD      r1,sp,#0xc
000016  9806              LDR      r0,[sp,#0x18]
000018  f7fffffe          BL       fds_record_find_by_key
00001c  2800              CMP      r0,#0
00001e  d002              BEQ      |L10.38|
;;;464        {
;;;465            return false;
000020  2000              MOVS     r0,#0
                  |L10.34|
;;;466        }
;;;467    
;;;468        ret = fds_record_open(&rec_desc, &rec_flash);
;;;469    
;;;470        if (ret != NRF_SUCCESS)
;;;471        {
;;;472            // It can only happen if the record was deleted after the call to fds_record_find_by_key(),
;;;473            // before we could open it, or if CRC support was enabled in Flash Data Storage at compile
;;;474            // time and the CRC check failed.
;;;475            return false;
;;;476        }
;;;477    
;;;478        p_data->data_id      = data_id;
;;;479        p_data->length_words = rec_flash.p_header->tl.length_words;
;;;480        p_data->p_all_data   = rec_flash.p_data;
;;;481    
;;;482        *p_peer_id           = file_id_to_peer_id(rec_flash.p_header->ic.file_id);
;;;483    
;;;484        (void)fds_record_close(&rec_desc);
;;;485    
;;;486        return true;
;;;487    }
000022  b007              ADD      sp,sp,#0x1c
000024  bdf0              POP      {r4-r7,pc}
                  |L10.38|
000026  a901              ADD      r1,sp,#4              ;468
000028  a803              ADD      r0,sp,#0xc            ;468
00002a  f7fffffe          BL       fds_record_open
00002e  4605              MOV      r5,r0                 ;468
000030  2d00              CMP      r5,#0                 ;470
000032  d001              BEQ      |L10.56|
000034  2000              MOVS     r0,#0                 ;475
000036  e7f4              B        |L10.34|
                  |L10.56|
000038  70a6              STRB     r6,[r4,#2]            ;478
00003a  9801              LDR      r0,[sp,#4]            ;479
00003c  8840              LDRH     r0,[r0,#2]            ;479
00003e  8020              STRH     r0,[r4,#0]            ;479
000040  9802              LDR      r0,[sp,#8]            ;480
000042  6060              STR      r0,[r4,#4]            ;480
000044  9901              LDR      r1,[sp,#4]            ;482
000046  8888              LDRH     r0,[r1,#4]            ;482
000048  f7fffffe          BL       file_id_to_peer_id
00004c  8038              STRH     r0,[r7,#0]            ;482
00004e  a803              ADD      r0,sp,#0xc            ;484
000050  f7fffffe          BL       fds_record_close
000054  2001              MOVS     r0,#1                 ;486
000056  e7e4              B        |L10.34|
;;;488    
                          ENDP

                  |L10.88|
                          DCD      m_fds_ftok

                          AREA ||i.pds_peer_data_iterate_prepare||, CODE, READONLY, ALIGN=2

                  pds_peer_data_iterate_prepare PROC
;;;440    
;;;441    void pds_peer_data_iterate_prepare(void)
000000  4802              LDR      r0,|L11.12|
;;;442    {
;;;443        memset(&m_fds_ftok, 0x00, sizeof(fds_find_token_t));
000002  2100              MOVS     r1,#0
000004  6001              STR      r1,[r0,#0]  ; m_fds_ftok
000006  6041              STR      r1,[r0,#4]  ; m_fds_ftok
;;;444    }
000008  4770              BX       lr
;;;445    
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      m_fds_ftok

                          AREA ||i.pds_peer_data_read||, CODE, READONLY, ALIGN=1

                  pds_peer_data_read PROC
;;;375    
;;;376    ret_code_t pds_peer_data_read(pm_peer_id_t                    peer_id,
000000  b5ff              PUSH     {r0-r7,lr}
;;;377                                  pm_peer_data_id_t               data_id,
;;;378                                  pm_peer_data_t          * const p_data,
;;;379                                  uint32_t          const * const p_buf_len)
;;;380    {
000002  b087              SUB      sp,sp,#0x1c
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
000008  461f              MOV      r7,r3
;;;381        ret_code_t         ret;
;;;382        fds_record_desc_t  rec_desc;
;;;383        fds_flash_record_t rec_flash;
;;;384    
;;;385        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;386        NRF_PM_DEBUG_CHECK(p_data != NULL);
;;;387    
;;;388        VERIFY_PEER_ID_IN_RANGE(peer_id);
00000a  bf00              NOP      
00000c  9807              LDR      r0,[sp,#0x1c]
00000e  28ff              CMP      r0,#0xff
000010  dd02              BLE      |L12.24|
000012  2007              MOVS     r0,#7
                  |L12.20|
;;;389        VERIFY_PEER_DATA_ID_IN_RANGE(data_id);
;;;390    
;;;391        ret = peer_data_find(peer_id, data_id, &rec_desc);
;;;392    
;;;393        if (ret != NRF_SUCCESS)
;;;394        {
;;;395            return NRF_ERROR_NOT_FOUND;
;;;396        }
;;;397    
;;;398        // Shouldn't fail, unless the record was deleted in the meanwhile or the CRC check has failed.
;;;399        ret = fds_record_open(&rec_desc, &rec_flash);
;;;400    
;;;401        if (ret != NRF_SUCCESS)
;;;402        {
;;;403            return NRF_ERROR_NOT_FOUND;
;;;404        }
;;;405    
;;;406        // @note emdi: could this actually be set by the caller and used instead
;;;407        // of an additional parameter (data_id) ?
;;;408        p_data->data_id      = data_id;
;;;409        p_data->length_words = rec_flash.p_header->tl.length_words;
;;;410    
;;;411        // If p_buf_len is NULL, provide a pointer to data in flash, otherwise,
;;;412        // check that the buffer is large enough and copy the data in flash into the buffer.
;;;413        if (p_buf_len != NULL)
;;;414        {
;;;415            uint32_t const data_len_bytes = (p_data->length_words * sizeof(uint32_t));
;;;416    
;;;417            if ((*p_buf_len) <= data_len_bytes)
;;;418            {
;;;419                memcpy(p_data->p_all_data, rec_flash.p_data, data_len_bytes);
;;;420            }
;;;421            else
;;;422            {
;;;423                return NRF_ERROR_NO_MEM;
;;;424            }
;;;425        }
;;;426        else
;;;427        {
;;;428            // The cast is necessary because if no buffer is provided, we just copy the pointer,
;;;429            // but it that case it should be considered a pointer to const data by the caller,
;;;430            // since it is a pointer to data in flash.
;;;431            p_data->p_all_data = (void*)rec_flash.p_data;
;;;432        }
;;;433    
;;;434        // Shouldn't fail unless the record was already closed, in which case it can be ignored.
;;;435        (void)fds_record_close(&rec_desc);
;;;436    
;;;437        return NRF_SUCCESS;
;;;438    }
000014  b00b              ADD      sp,sp,#0x2c
000016  bdf0              POP      {r4-r7,pc}
                  |L12.24|
000018  bf00              NOP                            ;388
00001a  bf00              NOP                            ;389
00001c  4630              MOV      r0,r6                 ;389
00001e  f7fffffe          BL       peer_data_id_is_valid
000022  2800              CMP      r0,#0                 ;389
000024  d101              BNE      |L12.42|
000026  2007              MOVS     r0,#7                 ;389
000028  e7f4              B        |L12.20|
                  |L12.42|
00002a  bf00              NOP                            ;389
00002c  aa04              ADD      r2,sp,#0x10           ;391
00002e  4631              MOV      r1,r6                 ;391
000030  9807              LDR      r0,[sp,#0x1c]         ;391
000032  f7fffffe          BL       peer_data_find
000036  4605              MOV      r5,r0                 ;391
000038  2d00              CMP      r5,#0                 ;393
00003a  d001              BEQ      |L12.64|
00003c  2005              MOVS     r0,#5                 ;395
00003e  e7e9              B        |L12.20|
                  |L12.64|
000040  a902              ADD      r1,sp,#8              ;399
000042  a804              ADD      r0,sp,#0x10           ;399
000044  f7fffffe          BL       fds_record_open
000048  4605              MOV      r5,r0                 ;399
00004a  2d00              CMP      r5,#0                 ;401
00004c  d001              BEQ      |L12.82|
00004e  2005              MOVS     r0,#5                 ;403
000050  e7e0              B        |L12.20|
                  |L12.82|
000052  70a6              STRB     r6,[r4,#2]            ;408
000054  9802              LDR      r0,[sp,#8]            ;409
000056  8840              LDRH     r0,[r0,#2]            ;409
000058  8020              STRH     r0,[r4,#0]            ;409
00005a  2f00              CMP      r7,#0                 ;413
00005c  d00f              BEQ      |L12.126|
00005e  8820              LDRH     r0,[r4,#0]            ;415
000060  0080              LSLS     r0,r0,#2              ;415
000062  9001              STR      r0,[sp,#4]            ;415
000064  6839              LDR      r1,[r7,#0]            ;417
000066  9801              LDR      r0,[sp,#4]            ;417
000068  4281              CMP      r1,r0                 ;417
00006a  d805              BHI      |L12.120|
00006c  9903              LDR      r1,[sp,#0xc]          ;419
00006e  6860              LDR      r0,[r4,#4]            ;419
000070  9a01              LDR      r2,[sp,#4]            ;419
000072  f7fffffe          BL       __aeabi_memcpy
000076  e001              B        |L12.124|
                  |L12.120|
000078  2004              MOVS     r0,#4                 ;423
00007a  e7cb              B        |L12.20|
                  |L12.124|
00007c  e001              B        |L12.130|
                  |L12.126|
00007e  9803              LDR      r0,[sp,#0xc]          ;431
000080  6060              STR      r0,[r4,#4]            ;431
                  |L12.130|
000082  a804              ADD      r0,sp,#0x10           ;435
000084  f7fffffe          BL       fds_record_close
000088  2000              MOVS     r0,#0                 ;437
00008a  e7c3              B        |L12.20|
;;;439    
                          ENDP


                          AREA ||i.pds_peer_data_store||, CODE, READONLY, ALIGN=1

                  pds_peer_data_store PROC
;;;537    
;;;538    ret_code_t pds_peer_data_store(pm_peer_id_t                 peer_id,
000000  b5ff              PUSH     {r0-r7,lr}
;;;539                                   pm_peer_data_const_t const * p_peer_data,
;;;540                                   pm_prepare_token_t           prepare_token,
;;;541                                   pm_store_token_t           * p_store_token)
;;;542    {
000002  b089              SUB      sp,sp,#0x24
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  461e              MOV      r6,r3
;;;543        ret_code_t         ret;
;;;544        fds_record_t       rec;
;;;545        fds_record_desc_t  rec_desc;
;;;546        fds_record_chunk_t rec_chunk;
;;;547    
;;;548        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;549        NRF_PM_DEBUG_CHECK(p_peer_data != NULL);
;;;550    
;;;551        VERIFY_PEER_ID_IN_RANGE(peer_id);
00000a  bf00              NOP      
00000c  2fff              CMP      r7,#0xff
00000e  dd02              BLE      |L13.22|
000010  2007              MOVS     r0,#7
                  |L13.18|
;;;552        VERIFY_PEER_DATA_ID_IN_RANGE(p_peer_data->data_id);
;;;553    
;;;554        // Prepare chunk.
;;;555        rec_chunk.p_data       = p_peer_data->p_all_data;
;;;556        rec_chunk.length_words = p_peer_data->length_words;
;;;557    
;;;558        // Prepare the record to be stored in flash.
;;;559        rec.file_id         = peer_id_to_file_id(peer_id);
;;;560        rec.key             = peer_data_id_to_record_key(p_peer_data->data_id);
;;;561        rec.data.p_chunks   = &rec_chunk;
;;;562        rec.data.num_chunks = 1;
;;;563    
;;;564        ret = peer_data_find(peer_id, p_peer_data->data_id, &rec_desc);
;;;565    
;;;566        if (ret == NRF_ERROR_NOT_FOUND)
;;;567        {
;;;568            // No previous data exists in flash.
;;;569            if (prepare_token == PDS_PREPARE_TOKEN_INVALID)
;;;570            {
;;;571                // No space was previously reserved.
;;;572                ret = fds_record_write(&rec_desc, &rec);
;;;573            }
;;;574            else
;;;575            {
;;;576                // Space for this record was previously reserved.
;;;577                ret = fds_record_write_reserved(&rec_desc, &rec, (fds_reserve_token_t*)&prepare_token);
;;;578            }
;;;579        }
;;;580        else // NRF_SUCCESS
;;;581        {
;;;582            if (prepare_token != PDS_PREPARE_TOKEN_INVALID)
;;;583            {
;;;584                (void)fds_reserve_cancel((fds_reserve_token_t*)&prepare_token);
;;;585            }
;;;586    
;;;587            // Update existing record.
;;;588            ret = fds_record_update(&rec_desc, &rec);
;;;589        }
;;;590    
;;;591        switch (ret)
;;;592        {
;;;593            case FDS_SUCCESS:
;;;594                if (p_store_token != NULL)
;;;595                {
;;;596                    // Update the store token.
;;;597                    (void)fds_record_id_from_desc(&rec_desc, (uint32_t*)p_store_token);
;;;598                }
;;;599                return NRF_SUCCESS;
;;;600    
;;;601            case FDS_ERR_BUSY:
;;;602            case FDS_ERR_NO_SPACE_IN_QUEUES:
;;;603                return NRF_ERROR_BUSY;
;;;604    
;;;605            case FDS_ERR_NO_SPACE_IN_FLASH:
;;;606                return NRF_ERROR_STORAGE_FULL;
;;;607    
;;;608            default:
;;;609                return NRF_ERROR_INTERNAL;
;;;610        }
;;;611    }
000012  b00d              ADD      sp,sp,#0x34
000014  bdf0              POP      {r4-r7,pc}
                  |L13.22|
000016  bf00              NOP                            ;551
000018  bf00              NOP                            ;552
00001a  78a0              LDRB     r0,[r4,#2]            ;552
00001c  f7fffffe          BL       peer_data_id_is_valid
000020  2800              CMP      r0,#0                 ;552
000022  d101              BNE      |L13.40|
000024  2007              MOVS     r0,#7                 ;552
000026  e7f4              B        |L13.18|
                  |L13.40|
000028  bf00              NOP                            ;552
00002a  6860              LDR      r0,[r4,#4]            ;555
00002c  9001              STR      r0,[sp,#4]            ;555
00002e  8821              LDRH     r1,[r4,#0]            ;556
000030  4668              MOV      r0,sp                 ;556
000032  8101              STRH     r1,[r0,#8]            ;556
000034  4638              MOV      r0,r7                 ;559
000036  f7fffffe          BL       peer_id_to_file_id
00003a  4601              MOV      r1,r0                 ;559
00003c  4668              MOV      r0,sp                 ;559
00003e  8301              STRH     r1,[r0,#0x18]         ;559
000040  78a0              LDRB     r0,[r4,#2]            ;560
000042  f7fffffe          BL       peer_data_id_to_record_key
000046  4669              MOV      r1,sp                 ;560
000048  8348              STRH     r0,[r1,#0x1a]         ;560
00004a  a801              ADD      r0,sp,#4              ;561
00004c  9007              STR      r0,[sp,#0x1c]         ;561
00004e  2101              MOVS     r1,#1                 ;562
000050  a806              ADD      r0,sp,#0x18           ;562
000052  8101              STRH     r1,[r0,#8]            ;562
000054  78a1              LDRB     r1,[r4,#2]            ;564
000056  aa03              ADD      r2,sp,#0xc            ;564
000058  4638              MOV      r0,r7                 ;564
00005a  f7fffffe          BL       peer_data_find
00005e  4605              MOV      r5,r0                 ;564
000060  2d05              CMP      r5,#5                 ;566
000062  d10f              BNE      |L13.132|
000064  980b              LDR      r0,[sp,#0x2c]         ;569
000066  2800              CMP      r0,#0                 ;569
000068  d105              BNE      |L13.118|
00006a  a906              ADD      r1,sp,#0x18           ;572
00006c  a803              ADD      r0,sp,#0xc            ;572
00006e  f7fffffe          BL       fds_record_write
000072  4605              MOV      r5,r0                 ;572
000074  e011              B        |L13.154|
                  |L13.118|
000076  aa0b              ADD      r2,sp,#0x2c           ;577
000078  a906              ADD      r1,sp,#0x18           ;577
00007a  a803              ADD      r0,sp,#0xc            ;577
00007c  f7fffffe          BL       fds_record_write_reserved
000080  4605              MOV      r5,r0                 ;577
000082  e00a              B        |L13.154|
                  |L13.132|
000084  980b              LDR      r0,[sp,#0x2c]         ;582
000086  2800              CMP      r0,#0                 ;582
000088  d002              BEQ      |L13.144|
00008a  a80b              ADD      r0,sp,#0x2c           ;584
00008c  f7fffffe          BL       fds_reserve_cancel
                  |L13.144|
000090  a906              ADD      r1,sp,#0x18           ;588
000092  a803              ADD      r0,sp,#0xc            ;588
000094  f7fffffe          BL       fds_record_update
000098  4605              MOV      r5,r0                 ;588
                  |L13.154|
00009a  2d00              CMP      r5,#0                 ;591
00009c  d006              BEQ      |L13.172|
00009e  2d07              CMP      r5,#7                 ;591
0000a0  d00f              BEQ      |L13.194|
0000a2  2d08              CMP      r5,#8                 ;591
0000a4  d00b              BEQ      |L13.190|
0000a6  2d0e              CMP      r5,#0xe               ;591
0000a8  d10d              BNE      |L13.198|
0000aa  e007              B        |L13.188|
                  |L13.172|
0000ac  2e00              CMP      r6,#0                 ;594
0000ae  d003              BEQ      |L13.184|
0000b0  4631              MOV      r1,r6                 ;597
0000b2  a803              ADD      r0,sp,#0xc            ;597
0000b4  f7fffffe          BL       fds_record_id_from_desc
                  |L13.184|
0000b8  2000              MOVS     r0,#0                 ;599
0000ba  e7aa              B        |L13.18|
                  |L13.188|
0000bc  bf00              NOP                            ;602
                  |L13.190|
0000be  2011              MOVS     r0,#0x11              ;603
0000c0  e7a7              B        |L13.18|
                  |L13.194|
0000c2  2086              MOVS     r0,#0x86              ;606
0000c4  e7a5              B        |L13.18|
                  |L13.198|
0000c6  2003              MOVS     r0,#3                 ;609
0000c8  e7a3              B        |L13.18|
;;;612    
                          ENDP


                          AREA ||i.pds_peer_id_allocate||, CODE, READONLY, ALIGN=2

                  pds_peer_id_allocate PROC
;;;647    
;;;648    pm_peer_id_t pds_peer_id_allocate(void)
000000  b510              PUSH     {r4,lr}
;;;649    {
;;;650        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;651        return peer_id_allocate(PM_PEER_ID_INVALID);
000002  4802              LDR      r0,|L14.12|
000004  f7fffffe          BL       peer_id_allocate
;;;652    }
000008  bd10              POP      {r4,pc}
;;;653    
                          ENDP

00000a  0000              DCW      0x0000
                  |L14.12|
                          DCD      0x0000ffff

                          AREA ||i.pds_peer_id_free||, CODE, READONLY, ALIGN=1

                  pds_peer_id_free PROC
;;;654    
;;;655    ret_code_t pds_peer_id_free(pm_peer_id_t peer_id)
000000  b510              PUSH     {r4,lr}
;;;656    {
000002  4604              MOV      r4,r0
;;;657        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;658        VERIFY_PEER_ID_IN_RANGE(peer_id);
000004  bf00              NOP      
000006  2cff              CMP      r4,#0xff
000008  dd01              BLE      |L15.14|
00000a  2007              MOVS     r0,#7
                  |L15.12|
;;;659    
;;;660        (void)peer_id_delete(peer_id);
;;;661        peer_data_delete();
;;;662    
;;;663        return NRF_SUCCESS;
;;;664    }
00000c  bd10              POP      {r4,pc}
                  |L15.14|
00000e  bf00              NOP                            ;658
000010  4620              MOV      r0,r4                 ;660
000012  f7fffffe          BL       peer_id_delete
000016  f7fffffe          BL       peer_data_delete
00001a  2000              MOVS     r0,#0                 ;663
00001c  e7f6              B        |L15.12|
;;;665    
                          ENDP


                          AREA ||i.pds_peer_id_is_allocated||, CODE, READONLY, ALIGN=1

                  pds_peer_id_is_allocated PROC
;;;666    
;;;667    bool pds_peer_id_is_allocated(pm_peer_id_t peer_id)
000000  b510              PUSH     {r4,lr}
;;;668    {
000002  4604              MOV      r4,r0
;;;669        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;670        return peer_id_is_allocated(peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       peer_id_is_allocated
;;;671    }
00000a  bd10              POP      {r4,pc}
;;;672    
                          ENDP


                          AREA ||i.pds_space_reserve||, CODE, READONLY, ALIGN=1

                  pds_space_reserve PROC
;;;489    
;;;490    ret_code_t pds_space_reserve(pm_peer_data_const_t const * p_peer_data,
000000  b570              PUSH     {r4-r6,lr}
;;;491                                 pm_prepare_token_t         * p_prepare_token)
;;;492    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;493        ret_code_t ret;
;;;494    
;;;495        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;496        NRF_PM_DEBUG_CHECK(p_peer_data     != NULL);
;;;497        NRF_PM_DEBUG_CHECK(p_prepare_token != NULL);
;;;498    
;;;499        VERIFY_PEER_DATA_ID_IN_RANGE(p_peer_data->data_id);
000006  bf00              NOP      
000008  78a0              LDRB     r0,[r4,#2]
00000a  f7fffffe          BL       peer_data_id_is_valid
00000e  2800              CMP      r0,#0
000010  d101              BNE      |L17.22|
000012  2007              MOVS     r0,#7
                  |L17.20|
;;;500    
;;;501        ret = fds_reserve((fds_reserve_token_t*)p_prepare_token, p_peer_data->length_words);
;;;502    
;;;503        switch (ret)
;;;504        {
;;;505            case FDS_SUCCESS:
;;;506                return NRF_SUCCESS;
;;;507    
;;;508            case FDS_ERR_RECORD_TOO_LARGE:
;;;509                return NRF_ERROR_INVALID_LENGTH;
;;;510    
;;;511            case FDS_ERR_NO_SPACE_IN_FLASH:
;;;512                return NRF_ERROR_STORAGE_FULL;
;;;513    
;;;514            default:
;;;515                return NRF_ERROR_INTERNAL;
;;;516        }
;;;517    }
000014  bd70              POP      {r4-r6,pc}
                  |L17.22|
000016  bf00              NOP                            ;499
000018  8821              LDRH     r1,[r4,#0]            ;501
00001a  4630              MOV      r0,r6                 ;501
00001c  f7fffffe          BL       fds_reserve
000020  4605              MOV      r5,r0                 ;501
000022  0028              MOVS     r0,r5                 ;503
000024  d004              BEQ      |L17.48|
000026  2807              CMP      r0,#7                 ;503
000028  d006              BEQ      |L17.56|
00002a  2809              CMP      r0,#9                 ;503
00002c  d106              BNE      |L17.60|
00002e  e001              B        |L17.52|
                  |L17.48|
000030  2000              MOVS     r0,#0                 ;506
000032  e7ef              B        |L17.20|
                  |L17.52|
000034  2009              MOVS     r0,#9                 ;509
000036  e7ed              B        |L17.20|
                  |L17.56|
000038  2086              MOVS     r0,#0x86              ;512
00003a  e7eb              B        |L17.20|
                  |L17.60|
00003c  2003              MOVS     r0,#3                 ;515
00003e  e7e9              B        |L17.20|
;;;518    
                          ENDP


                          AREA ||i.pds_space_reserve_cancel||, CODE, READONLY, ALIGN=1

                  pds_space_reserve_cancel PROC
;;;519    
;;;520    ret_code_t pds_space_reserve_cancel(pm_prepare_token_t prepare_token)
000000  b531              PUSH     {r0,r4,r5,lr}
;;;521    {
;;;522        ret_code_t ret;
;;;523    
;;;524        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;525        NRF_PM_DEBUG_CHECK(prepare_token != PDS_PREPARE_TOKEN_INVALID);
;;;526    
;;;527        ret = fds_reserve_cancel((fds_reserve_token_t*)&prepare_token);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       fds_reserve_cancel
000008  4604              MOV      r4,r0
;;;528    
;;;529        if (ret != FDS_SUCCESS)
00000a  2c00              CMP      r4,#0
00000c  d001              BEQ      |L18.18|
;;;530        {
;;;531            return NRF_ERROR_INTERNAL;
00000e  2003              MOVS     r0,#3
                  |L18.16|
;;;532        }
;;;533    
;;;534        return NRF_SUCCESS;
;;;535    }
000010  bd38              POP      {r3-r5,pc}
                  |L18.18|
000012  2000              MOVS     r0,#0                 ;534
000014  e7fc              B        |L18.16|
;;;536    
                          ENDP


                          AREA ||i.peer_data_delete||, CODE, READONLY, ALIGN=2

                  peer_data_delete PROC
;;;151    // These operations will be sent to FDS one at a time.
;;;152    static void peer_data_delete()
000000  b5f0              PUSH     {r4-r7,lr}
;;;153    {
000002  b089              SUB      sp,sp,#0x24
;;;154        ret_code_t        ret;
;;;155        pm_peer_id_t      peer_id;
;;;156        uint16_t          file_id;
;;;157        fds_record_desc_t desc;
;;;158        fds_find_token_t  ftok;
;;;159    
;;;160        memset(&ftok, 0x00, sizeof(fds_find_token_t));
000004  2000              MOVS     r0,#0
000006  9004              STR      r0,[sp,#0x10]
000008  9005              STR      r0,[sp,#0x14]
;;;161        peer_id = peer_id_get_next_deleted(PM_PEER_ID_INVALID);
00000a  4822              LDR      r0,|L19.148|
00000c  f7fffffe          BL       peer_id_get_next_deleted
000010  4605              MOV      r5,r0
;;;162    
;;;163        while (    (peer_id != PM_PEER_ID_INVALID)
000012  e006              B        |L19.34|
                  |L19.20|
;;;164                && (fds_record_find_in_file(peer_id_to_file_id(peer_id), &desc, &ftok)
;;;165                == FDS_ERR_NOT_FOUND))
;;;166        {
;;;167            peer_id_free(peer_id);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       peer_id_free
;;;168            peer_id = peer_id_get_next_deleted(peer_id);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       peer_id_get_next_deleted
000020  4605              MOV      r5,r0
                  |L19.34|
000022  481c              LDR      r0,|L19.148|
000024  4285              CMP      r5,r0                 ;163
000026  d009              BEQ      |L19.60|
000028  4628              MOV      r0,r5                 ;164
00002a  f7fffffe          BL       peer_id_to_file_id
00002e  4607              MOV      r7,r0                 ;164
000030  aa04              ADD      r2,sp,#0x10           ;164
000032  a906              ADD      r1,sp,#0x18           ;164
000034  f7fffffe          BL       fds_record_find_in_file
000038  280a              CMP      r0,#0xa               ;164
00003a  d0eb              BEQ      |L19.20|
                  |L19.60|
;;;169        }
;;;170    
;;;171        if (!m_peer_delete_ongoing && (peer_id != PM_PEER_ID_INVALID))
00003c  4816              LDR      r0,|L19.152|
00003e  7800              LDRB     r0,[r0,#0]  ; m_peer_delete_ongoing
000040  2800              CMP      r0,#0
000042  d125              BNE      |L19.144|
000044  4813              LDR      r0,|L19.148|
000046  4285              CMP      r5,r0
000048  d022              BEQ      |L19.144|
;;;172        {
;;;173            m_peer_delete_ongoing = true;
00004a  2001              MOVS     r0,#1
00004c  4912              LDR      r1,|L19.152|
00004e  7008              STRB     r0,[r1,#0]
;;;174    
;;;175            file_id = peer_id_to_file_id(peer_id);
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       peer_id_to_file_id
000056  4606              MOV      r6,r0
;;;176            ret     = fds_file_delete(file_id);
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       fds_file_delete
00005e  4604              MOV      r4,r0
;;;177    
;;;178            if (ret == FDS_ERR_NO_SPACE_IN_QUEUES)
000060  2c08              CMP      r4,#8
000062  d103              BNE      |L19.108|
;;;179            {
;;;180                m_peer_delete_queued = true;
000064  2001              MOVS     r0,#1
000066  490d              LDR      r1,|L19.156|
000068  7008              STRB     r0,[r1,#0]
00006a  e011              B        |L19.144|
                  |L19.108|
;;;181            }
;;;182            else if (ret != NRF_SUCCESS)
00006c  2c00              CMP      r4,#0
00006e  d00f              BEQ      |L19.144|
;;;183            {
;;;184                m_peer_delete_ongoing = false;
000070  2000              MOVS     r0,#0
000072  4909              LDR      r1,|L19.152|
000074  7008              STRB     r0,[r1,#0]
;;;185    
;;;186                pds_evt_t pds_evt;
;;;187    
;;;188                pds_evt.evt_id      = PDS_EVT_ERROR_UNEXPECTED;
000076  2109              MOVS     r1,#9
000078  4668              MOV      r0,sp
00007a  7001              STRB     r1,[r0,#0]
;;;189                pds_evt.peer_id     = peer_id;
00007c  8045              STRH     r5,[r0,#2]
;;;190                pds_evt.data_id     = PM_PEER_DATA_ID_INVALID;
00007e  21ff              MOVS     r1,#0xff
000080  7101              STRB     r1,[r0,#4]
;;;191                pds_evt.store_token = PM_STORE_TOKEN_INVALID;
000082  2000              MOVS     r0,#0
000084  9002              STR      r0,[sp,#8]
;;;192                pds_evt.result      = ret;
000086  9403              STR      r4,[sp,#0xc]
;;;193    
;;;194                pds_evt_send(&pds_evt);
000088  4668              MOV      r0,sp
00008a  f7fffffe          BL       pds_evt_send
;;;195            }
00008e  bf00              NOP      
                  |L19.144|
;;;196        }
;;;197    }
000090  b009              ADD      sp,sp,#0x24
000092  bdf0              POP      {r4-r7,pc}
;;;198    
                          ENDP

                  |L19.148|
                          DCD      0x0000ffff
                  |L19.152|
                          DCD      m_peer_delete_ongoing
                  |L19.156|
                          DCD      m_peer_delete_queued

                          AREA ||i.peer_data_find||, CODE, READONLY, ALIGN=1

                  peer_data_find PROC
;;;199    
;;;200    static ret_code_t peer_data_find(pm_peer_id_t              peer_id,
000000  b5f0              PUSH     {r4-r7,lr}
;;;201                                     pm_peer_data_id_t         data_id,
;;;202                                     fds_record_desc_t * const p_desc)
;;;203    {
000002  b085              SUB      sp,sp,#0x14
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;204        ret_code_t       ret;
;;;205        fds_find_token_t ftok;
;;;206    
;;;207        NRF_PM_DEBUG_CHECK(peer_id < PM_PEER_ID_N_AVAILABLE_IDS);
;;;208        NRF_PM_DEBUG_CHECK(peer_data_id_is_valid(data_id));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       peer_data_id_is_valid
;;;209        NRF_PM_DEBUG_CHECK(p_desc != NULL);
;;;210    
;;;211        memset(&ftok, 0x00, sizeof(fds_find_token_t));
000010  2000              MOVS     r0,#0
000012  9002              STR      r0,[sp,#8]
000014  9003              STR      r0,[sp,#0xc]
;;;212    
;;;213        uint16_t file_id    = peer_id_to_file_id(peer_id);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       peer_id_to_file_id
00001c  9001              STR      r0,[sp,#4]
;;;214        uint16_t record_key = peer_data_id_to_record_key(data_id);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       peer_data_id_to_record_key
000024  9000              STR      r0,[sp,#0]
;;;215    
;;;216        ret = fds_record_find(file_id, record_key, p_desc, &ftok);
000026  ab02              ADD      r3,sp,#8
000028  4632              MOV      r2,r6
00002a  9900              LDR      r1,[sp,#0]
00002c  9801              LDR      r0,[sp,#4]
00002e  f7fffffe          BL       fds_record_find
000032  4607              MOV      r7,r0
;;;217    
;;;218        if (ret != FDS_SUCCESS)
000034  2f00              CMP      r7,#0
000036  d002              BEQ      |L20.62|
;;;219        {
;;;220            return NRF_ERROR_NOT_FOUND;
000038  2005              MOVS     r0,#5
                  |L20.58|
;;;221        }
;;;222    
;;;223        return NRF_SUCCESS;
;;;224    }
00003a  b005              ADD      sp,sp,#0x14
00003c  bdf0              POP      {r4-r7,pc}
                  |L20.62|
00003e  2000              MOVS     r0,#0                 ;223
000040  e7fb              B        |L20.58|
;;;225    
                          ENDP


                          AREA ||i.peer_data_id_is_valid||, CODE, READONLY, ALIGN=1

                  peer_data_id_is_valid PROC
;;;138    
;;;139    static bool peer_data_id_is_valid(pm_peer_data_id_t data_id)
000000  4601              MOV      r1,r0
;;;140    {
;;;141        return ((data_id == PM_PEER_DATA_ID_BONDING)                 ||
000002  2907              CMP      r1,#7
000004  d009              BEQ      |L21.26|
;;;142                (data_id == PM_PEER_DATA_ID_SERVICE_CHANGED_PENDING) ||
000006  2901              CMP      r1,#1
000008  d007              BEQ      |L21.26|
;;;143                (data_id == PM_PEER_DATA_ID_GATT_LOCAL)              ||
00000a  2908              CMP      r1,#8
00000c  d005              BEQ      |L21.26|
;;;144                (data_id == PM_PEER_DATA_ID_GATT_REMOTE)             ||
00000e  2905              CMP      r1,#5
000010  d003              BEQ      |L21.26|
;;;145                (data_id == PM_PEER_DATA_ID_PEER_RANK)               ||
000012  2906              CMP      r1,#6
000014  d001              BEQ      |L21.26|
;;;146                (data_id == PM_PEER_DATA_ID_APPLICATION));
000016  2904              CMP      r1,#4
000018  d101              BNE      |L21.30|
                  |L21.26|
00001a  2001              MOVS     r0,#1
                  |L21.28|
;;;147    }
00001c  4770              BX       lr
                  |L21.30|
00001e  2000              MOVS     r0,#0                 ;146
000020  e7fc              B        |L21.28|
;;;148    
                          ENDP


                          AREA ||i.peer_data_id_to_record_key||, CODE, READONLY, ALIGN=1

                  peer_data_id_to_record_key PROC
;;;109    // Function to convert peer data IDs to record keys.
;;;110    static uint16_t peer_data_id_to_record_key(pm_peer_data_id_t peer_data_id)
000000  4601              MOV      r1,r0
;;;111    {
;;;112        return (uint16_t)(peer_data_id + DATA_ID_TO_RECORD_KEY);
000002  2003              MOVS     r0,#3
000004  0380              LSLS     r0,r0,#14
000006  1808              ADDS     r0,r1,r0
000008  b280              UXTH     r0,r0
;;;113    }
00000a  4770              BX       lr
;;;114    
                          ENDP


                          AREA ||i.peer_id_to_file_id||, CODE, READONLY, ALIGN=1

                  peer_id_to_file_id PROC
;;;95     // Function to convert peer IDs to file IDs.
;;;96     static uint16_t peer_id_to_file_id(pm_peer_id_t peer_id)
000000  4601              MOV      r1,r0
;;;97     {
;;;98         return (uint16_t)(peer_id + PEER_ID_TO_FILE_ID);
000002  2003              MOVS     r0,#3
000004  0380              LSLS     r0,r0,#14
000006  1808              ADDS     r0,r1,r0
000008  b280              UXTH     r0,r0
;;;99     }
00000a  4770              BX       lr
;;;100    
                          ENDP


                          AREA ||i.peer_ids_load||, CODE, READONLY, ALIGN=1

                  peer_ids_load PROC
;;;226    
;;;227    static void peer_ids_load()
000000  b530              PUSH     {r4,r5,lr}
;;;228    {
000002  b087              SUB      sp,sp,#0x1c
;;;229        fds_record_desc_t  record_desc;
;;;230        fds_flash_record_t record;
;;;231        fds_find_token_t   ftok;
;;;232    
;;;233        memset(&ftok, 0x00, sizeof(fds_find_token_t));
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
000008  9001              STR      r0,[sp,#4]
;;;234    
;;;235        uint16_t const record_key = peer_data_id_to_record_key(PM_PEER_DATA_ID_BONDING);
00000a  2007              MOVS     r0,#7
00000c  f7fffffe          BL       peer_data_id_to_record_key
000010  4604              MOV      r4,r0
;;;236    
;;;237        while (fds_record_find_by_key(record_key, &record_desc, &ftok) == FDS_SUCCESS)
000012  e00f              B        |L24.52|
                  |L24.20|
;;;238        {
;;;239            pm_peer_id_t peer_id;
;;;240    
;;;241            // It is safe to ignore the return value since the descriptor was
;;;242            // just obtained and also 'record' is different from NULL.
;;;243            (void)fds_record_open(&record_desc, &record);
000014  a902              ADD      r1,sp,#8
000016  a804              ADD      r0,sp,#0x10
000018  f7fffffe          BL       fds_record_open
;;;244            peer_id = file_id_to_peer_id(record.p_header->ic.file_id);
00001c  9902              LDR      r1,[sp,#8]
00001e  8888              LDRH     r0,[r1,#4]
000020  f7fffffe          BL       file_id_to_peer_id
000024  4605              MOV      r5,r0
;;;245            (void)fds_record_close(&record_desc);
000026  a804              ADD      r0,sp,#0x10
000028  f7fffffe          BL       fds_record_close
;;;246    
;;;247            (void)peer_id_allocate(peer_id);
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       peer_id_allocate
;;;248        }
000032  bf00              NOP      
                  |L24.52|
000034  466a              MOV      r2,sp                 ;237
000036  a904              ADD      r1,sp,#0x10           ;237
000038  4620              MOV      r0,r4                 ;237
00003a  f7fffffe          BL       fds_record_find_by_key
00003e  2800              CMP      r0,#0                 ;237
000040  d0e8              BEQ      |L24.20|
;;;249    }
000042  b007              ADD      sp,sp,#0x1c
000044  bd30              POP      {r4,r5,pc}
;;;250    
                          ENDP


                          AREA ||i.record_key_to_peer_data_id||, CODE, READONLY, ALIGN=1

                  record_key_to_peer_data_id PROC
;;;116    // Function to convert record keys to peer data IDs.
;;;117    static pm_peer_data_id_t record_key_to_peer_data_id(uint16_t record_key)
000000  4601              MOV      r1,r0
;;;118    {
;;;119        return (pm_peer_data_id_t)(record_key + RECORD_KEY_TO_DATA_ID);
000002  2003              MOVS     r0,#3
000004  0380              LSLS     r0,r0,#14
000006  1a08              SUBS     r0,r1,r0
000008  b2c0              UXTB     r0,r0
;;;120    }
00000a  4770              BX       lr
;;;121    
                          ENDP


                          AREA ||i.record_key_within_pm_range||, CODE, READONLY, ALIGN=2

                  record_key_within_pm_range PROC
;;;131    // Function for checking whether a record key is relevant for the Peer Manager.
;;;132    static bool record_key_within_pm_range(uint16_t record_key)
000000  4601              MOV      r1,r0
;;;133    {
;;;134        return ((PDS_FIRST_RESERVED_RECORD_KEY <= record_key)
000002  2003              MOVS     r0,#3
000004  0380              LSLS     r0,r0,#14
000006  4281              CMP      r1,r0
000008  db04              BLT      |L26.20|
;;;135             && (record_key <= PDS_LAST_RESERVED_RECORD_KEY));
00000a  4803              LDR      r0,|L26.24|
00000c  4281              CMP      r1,r0
00000e  dc01              BGT      |L26.20|
000010  2001              MOVS     r0,#1
                  |L26.18|
;;;136    }
000012  4770              BX       lr
                  |L26.20|
000014  2000              MOVS     r0,#0                 ;135
000016  e7fc              B        |L26.18|
;;;137    
                          ENDP

                  |L26.24|
                          DCD      0x0000fffe

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  m_evt_handlers
                          DCD      pdb_pds_evt_handler

                          AREA ||.data||, DATA, ALIGN=2

                  m_module_initialized
000000  00                DCB      0x00
                  m_peer_delete_queued
000001  00                DCB      0x00
                  m_peer_delete_ongoing
000002  0000              DCB      0x00,0x00
                  m_fds_ftok
                          %        8

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L154.24|
                  |L154.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L154.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L154.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\peer_manager\\peer_data_storage.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_peer_data_storage_c_pds_init____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.2.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___19_peer_data_storage_c_pds_init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_peer_data_storage_c_pds_init____REVSH|
#line 144
|__asm___19_peer_data_storage_c_pds_init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
