; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\ble_conn_params.o --asm_dir=.\DEBUG\ --list_dir=.\DEBUG\ --depend=.\debug\ble_conn_params.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\power -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\usbd -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\gpiote -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\queue -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\sensorsim -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\usbd -I..\..\..\..\..\..\components\libraries\usbd\class\audio -I..\..\..\..\..\..\components\libraries\usbd\class\cdc -I..\..\..\..\..\..\components\libraries\usbd\class\cdc\acm -I..\..\..\..\..\..\components\libraries\usbd\class\hid -I..\..\..\..\..\..\components\libraries\usbd\class\hid\generic -I..\..\..\..\..\..\components\libraries\usbd\class\hid\kbd -I..\..\..\..\..\..\components\libraries\usbd\class\hid\mouse -I..\..\..\..\..\..\components\libraries\usbd\class\msc -I..\..\..\..\..\..\components\libraries\usbd\config -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s130\headers -I..\..\..\..\..\..\components\softdevice\s130\headers\nrf51 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_sls -ID:\development\nordic_ble\src_code\nrf51_sdk_v12_3_0\nRF5_SDK_12.3.0_d7731ad\examples\ble_peripheral\ble_app_smart_locker\JJDK_ZG_ZK\s130\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.11.1\Device\Include -D__MICROLIB -D_RTE_ -DNRF51 -DBLE_STACK_SUPPORT_REQD -DNRF51822 -DBOARD_JJDK_ZG_ZK -DNRF_SD_BLE_API_VERSION=2 -DS130 -DNRF51 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 --omf_browse=.\debug\ble_conn_params.crf ..\..\..\..\..\..\components\ble\common\ble_conn_params.c]
                          THUMB

                          AREA ||i.ble_conn_params_change_conn_params||, CODE, READONLY, ALIGN=2

                  ble_conn_params_change_conn_params PROC
;;;321    
;;;322    uint32_t ble_conn_params_change_conn_params(ble_gap_conn_params_t * new_params)
000000  b538              PUSH     {r3-r5,lr}
;;;323    {
000002  4604              MOV      r4,r0
;;;324        uint32_t err_code;
;;;325    
;;;326        m_preferred_conn_params = *new_params;
000004  2208              MOVS     r2,#8
000006  4621              MOV      r1,r4
000008  4813              LDR      r0,|L1.88|
00000a  f7fffffe          BL       __aeabi_memcpy
;;;327        // Set the connection params in stack
;;;328        err_code = sd_ble_gap_ppcp_set(&m_preferred_conn_params);
00000e  4812              LDR      r0,|L1.88|
000010  df7a              SVC      #0x7a
000012  4605              MOV      r5,r0
;;;329        if (err_code == NRF_SUCCESS)
000014  2d00              CMP      r5,#0
000016  d11c              BNE      |L1.82|
;;;330        {
;;;331            if (!is_conn_params_ok(&m_current_conn_params))
000018  4810              LDR      r0,|L1.92|
00001a  f7fffffe          BL       is_conn_params_ok
00001e  2800              CMP      r0,#0
000020  d10b              BNE      |L1.58|
;;;332            {
;;;333                m_change_param = true;
000022  2001              MOVS     r0,#1
000024  490e              LDR      r1,|L1.96|
000026  7008              STRB     r0,[r1,#0]
;;;334                err_code = sd_ble_gap_conn_param_update(m_conn_handle, &m_preferred_conn_params);
000028  490b              LDR      r1,|L1.88|
00002a  480e              LDR      r0,|L1.100|
00002c  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
00002e  df75              SVC      #0x75
000030  4605              MOV      r5,r0
;;;335                m_update_count = 1;
000032  2001              MOVS     r0,#1
000034  490c              LDR      r1,|L1.104|
000036  7008              STRB     r0,[r1,#0]
000038  e00b              B        |L1.82|
                  |L1.58|
;;;336            }
;;;337            else
;;;338            {
;;;339                // Notify the application that the procedure has succeded
;;;340                if (m_conn_params_config.evt_handler != NULL)
00003a  480c              LDR      r0,|L1.108|
00003c  6940              LDR      r0,[r0,#0x14]  ; m_conn_params_config
00003e  2800              CMP      r0,#0
000040  d006              BEQ      |L1.80|
;;;341                {
;;;342                    ble_conn_params_evt_t evt;
;;;343    
;;;344                    evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
000042  2001              MOVS     r0,#1
000044  9000              STR      r0,[sp,#0]
;;;345                    m_conn_params_config.evt_handler(&evt);
000046  4809              LDR      r0,|L1.108|
000048  6941              LDR      r1,[r0,#0x14]  ; m_conn_params_config
00004a  4668              MOV      r0,sp
00004c  4788              BLX      r1
;;;346                }
00004e  bf00              NOP      
                  |L1.80|
;;;347                err_code = NRF_SUCCESS;
000050  2500              MOVS     r5,#0
                  |L1.82|
;;;348            }
;;;349        }
;;;350        return err_code;
000052  4628              MOV      r0,r5
;;;351    }
000054  bd38              POP      {r3-r5,pc}
                          ENDP

000056  0000              DCW      0x0000
                  |L1.88|
                          DCD      m_preferred_conn_params
                  |L1.92|
                          DCD      m_current_conn_params
                  |L1.96|
                          DCD      m_change_param
                  |L1.100|
                          DCD      m_conn_handle
                  |L1.104|
                          DCD      m_update_count
                  |L1.108|
                          DCD      m_conn_params_config

                          AREA ||i.ble_conn_params_init||, CODE, READONLY, ALIGN=2

                  ble_conn_params_init PROC
;;;126    
;;;127    uint32_t ble_conn_params_init(const ble_conn_params_init_t * p_init)
000000  b570              PUSH     {r4-r6,lr}
;;;128    {
000002  4605              MOV      r5,r0
;;;129        uint32_t err_code;
;;;130    
;;;131        m_conn_params_config = *p_init;
000004  221c              MOVS     r2,#0x1c
000006  4629              MOV      r1,r5
000008  4814              LDR      r0,|L2.92|
00000a  f7fffffe          BL       __aeabi_memcpy4
;;;132        m_change_param = false;
00000e  2000              MOVS     r0,#0
000010  4913              LDR      r1,|L2.96|
000012  7008              STRB     r0,[r1,#0]
;;;133        if (p_init->p_conn_params != NULL)
000014  6828              LDR      r0,[r5,#0]
000016  2800              CMP      r0,#0
000018  d00b              BEQ      |L2.50|
;;;134        {
;;;135            m_preferred_conn_params = *p_init->p_conn_params;
00001a  2208              MOVS     r2,#8
00001c  4811              LDR      r0,|L2.100|
00001e  6829              LDR      r1,[r5,#0]
000020  f7fffffe          BL       __aeabi_memcpy
;;;136    
;;;137            // Set the connection params in stack
;;;138            err_code = sd_ble_gap_ppcp_set(&m_preferred_conn_params);
000024  480f              LDR      r0,|L2.100|
000026  df7a              SVC      #0x7a
000028  4604              MOV      r4,r0
;;;139            if (err_code != NRF_SUCCESS)
00002a  2c00              CMP      r4,#0
00002c  d008              BEQ      |L2.64|
;;;140            {
;;;141                return err_code;
00002e  4620              MOV      r0,r4
                  |L2.48|
;;;142            }
;;;143        }
;;;144        else
;;;145        {
;;;146            // Fetch the connection params from stack
;;;147            err_code = sd_ble_gap_ppcp_get(&m_preferred_conn_params);
;;;148            if (err_code != NRF_SUCCESS)
;;;149            {
;;;150                return err_code;
;;;151            }
;;;152        }
;;;153    
;;;154        m_conn_handle  = BLE_CONN_HANDLE_INVALID;
;;;155        m_update_count = 0;
;;;156    
;;;157        return app_timer_create(&m_conn_params_timer_id,
;;;158                                APP_TIMER_MODE_SINGLE_SHOT,
;;;159                                update_timeout_handler);
;;;160    }
000030  bd70              POP      {r4-r6,pc}
                  |L2.50|
000032  480c              LDR      r0,|L2.100|
000034  df7b              SVC      #0x7b                 ;147
000036  4604              MOV      r4,r0                 ;147
000038  2c00              CMP      r4,#0                 ;148
00003a  d001              BEQ      |L2.64|
00003c  4620              MOV      r0,r4                 ;150
00003e  e7f7              B        |L2.48|
                  |L2.64|
000040  2000              MOVS     r0,#0                 ;154
000042  43c0              MVNS     r0,r0                 ;154
000044  4908              LDR      r1,|L2.104|
000046  8008              STRH     r0,[r1,#0]            ;154
000048  2000              MOVS     r0,#0                 ;155
00004a  4908              LDR      r1,|L2.108|
00004c  7008              STRB     r0,[r1,#0]            ;155
00004e  4a08              LDR      r2,|L2.112|
000050  2100              MOVS     r1,#0                 ;157
000052  4808              LDR      r0,|L2.116|
000054  f7fffffe          BL       app_timer_create
000058  e7ea              B        |L2.48|
;;;161    
                          ENDP

00005a  0000              DCW      0x0000
                  |L2.92|
                          DCD      m_conn_params_config
                  |L2.96|
                          DCD      m_change_param
                  |L2.100|
                          DCD      m_preferred_conn_params
                  |L2.104|
                          DCD      m_conn_handle
                  |L2.108|
                          DCD      m_update_count
                  |L2.112|
                          DCD      update_timeout_handler
                  |L2.116|
                          DCD      m_conn_params_timer_id

                          AREA ||i.ble_conn_params_on_ble_evt||, CODE, READONLY, ALIGN=1

                  ble_conn_params_on_ble_evt PROC
;;;294    
;;;295    void ble_conn_params_on_ble_evt(ble_evt_t * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;296    {
000002  4604              MOV      r4,r0
;;;297        switch (p_ble_evt->header.evt_id)
000004  8820              LDRH     r0,[r4,#0]
000006  2810              CMP      r0,#0x10
000008  d006              BEQ      |L3.24|
00000a  2811              CMP      r0,#0x11
00000c  d008              BEQ      |L3.32|
00000e  2812              CMP      r0,#0x12
000010  d00e              BEQ      |L3.48|
000012  2850              CMP      r0,#0x50
000014  d110              BNE      |L3.56|
000016  e007              B        |L3.40|
                  |L3.24|
;;;298        {
;;;299            case BLE_GAP_EVT_CONNECTED:
;;;300                on_connect(p_ble_evt);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       on_connect
;;;301                break;
00001e  e00c              B        |L3.58|
                  |L3.32|
;;;302    
;;;303            case BLE_GAP_EVT_DISCONNECTED:
;;;304                on_disconnect(p_ble_evt);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       on_disconnect
;;;305                break;
000026  e008              B        |L3.58|
                  |L3.40|
;;;306    
;;;307            case BLE_GATTS_EVT_WRITE:
;;;308                on_write(p_ble_evt);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       on_write
;;;309                break;
00002e  e004              B        |L3.58|
                  |L3.48|
;;;310    
;;;311            case BLE_GAP_EVT_CONN_PARAM_UPDATE:
;;;312                on_conn_params_update(p_ble_evt);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       on_conn_params_update
;;;313                break;
000036  e000              B        |L3.58|
                  |L3.56|
;;;314    
;;;315            default:
;;;316                // No implementation needed.
;;;317                break;
000038  bf00              NOP      
                  |L3.58|
00003a  bf00              NOP                            ;301
;;;318        }
;;;319    }
00003c  bd10              POP      {r4,pc}
;;;320    
                          ENDP


                          AREA ||i.ble_conn_params_stop||, CODE, READONLY, ALIGN=2

                  ble_conn_params_stop PROC
;;;162    
;;;163    uint32_t ble_conn_params_stop(void)
000000  b510              PUSH     {r4,lr}
;;;164    {
;;;165        return app_timer_stop(m_conn_params_timer_id);
000002  4802              LDR      r0,|L4.12|
000004  6800              LDR      r0,[r0,#0]  ; m_conn_params_timer_id
000006  f7fffffe          BL       app_timer_stop
;;;166    }
00000a  bd10              POP      {r4,pc}
;;;167    
                          ENDP

                  |L4.12|
                          DCD      m_conn_params_timer_id

                          AREA ||i.conn_params_negotiation||, CODE, READONLY, ALIGN=2

                  conn_params_negotiation PROC
;;;168    
;;;169    static void conn_params_negotiation(void)
000000  b538              PUSH     {r3-r5,lr}
;;;170    {
;;;171        // Start negotiation if the received connection parameters are not acceptable
;;;172        if (!is_conn_params_ok(&m_current_conn_params))
000002  481f              LDR      r0,|L5.128|
000004  f7fffffe          BL       is_conn_params_ok
000008  2800              CMP      r0,#0
00000a  d129              BNE      |L5.96|
;;;173        {
;;;174            uint32_t err_code;
;;;175            uint32_t timeout_ticks;
;;;176    
;;;177            if (m_change_param)
00000c  481d              LDR      r0,|L5.132|
00000e  7800              LDRB     r0,[r0,#0]  ; m_change_param
000010  2800              CMP      r0,#0
000012  d00a              BEQ      |L5.42|
;;;178            {
;;;179                // Notify the application that the procedure has failed
;;;180                if (m_conn_params_config.evt_handler != NULL)
000014  481c              LDR      r0,|L5.136|
000016  6940              LDR      r0,[r0,#0x14]  ; m_conn_params_config
000018  2800              CMP      r0,#0
00001a  d020              BEQ      |L5.94|
;;;181                {
;;;182                    ble_conn_params_evt_t evt;
;;;183    
;;;184                    evt.evt_type = BLE_CONN_PARAMS_EVT_FAILED;
00001c  2000              MOVS     r0,#0
00001e  9000              STR      r0,[sp,#0]
;;;185                    m_conn_params_config.evt_handler(&evt);
000020  4819              LDR      r0,|L5.136|
000022  6941              LDR      r1,[r0,#0x14]  ; m_conn_params_config
000024  4668              MOV      r0,sp
000026  4788              BLX      r1
;;;186                }
000028  e019              B        |L5.94|
                  |L5.42|
;;;187            }
;;;188            else
;;;189            {
;;;190                if (m_update_count == 0)
00002a  4818              LDR      r0,|L5.140|
00002c  7800              LDRB     r0,[r0,#0]  ; m_update_count
00002e  2800              CMP      r0,#0
000030  d102              BNE      |L5.56|
;;;191                {
;;;192                    // First connection parameter update
;;;193                    timeout_ticks = m_conn_params_config.first_conn_params_update_delay;
000032  4815              LDR      r0,|L5.136|
000034  6845              LDR      r5,[r0,#4]  ; m_conn_params_config
000036  e001              B        |L5.60|
                  |L5.56|
;;;194                }
;;;195                else
;;;196                {
;;;197                    timeout_ticks = m_conn_params_config.next_conn_params_update_delay;
000038  4813              LDR      r0,|L5.136|
00003a  6885              LDR      r5,[r0,#8]  ; m_conn_params_config
                  |L5.60|
;;;198                }
;;;199    
;;;200                err_code = app_timer_start(m_conn_params_timer_id, timeout_ticks, NULL);
00003c  2200              MOVS     r2,#0
00003e  4629              MOV      r1,r5
000040  4813              LDR      r0,|L5.144|
000042  6800              LDR      r0,[r0,#0]  ; m_conn_params_timer_id
000044  f7fffffe          BL       app_timer_start
000048  4604              MOV      r4,r0
;;;201                if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
00004a  2c00              CMP      r4,#0
00004c  d007              BEQ      |L5.94|
00004e  480e              LDR      r0,|L5.136|
000050  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
000052  2800              CMP      r0,#0
000054  d003              BEQ      |L5.94|
;;;202                {
;;;203                    m_conn_params_config.error_handler(err_code);
000056  480c              LDR      r0,|L5.136|
000058  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
00005a  4620              MOV      r0,r4
00005c  4788              BLX      r1
                  |L5.94|
;;;204                }
;;;205            }
;;;206        }
00005e  e00a              B        |L5.118|
                  |L5.96|
;;;207        else
;;;208        {
;;;209            // Notify the application that the procedure has succeded
;;;210            if (m_conn_params_config.evt_handler != NULL)
000060  4809              LDR      r0,|L5.136|
000062  6940              LDR      r0,[r0,#0x14]  ; m_conn_params_config
000064  2800              CMP      r0,#0
000066  d006              BEQ      |L5.118|
;;;211            {
;;;212                ble_conn_params_evt_t evt;
;;;213    
;;;214                evt.evt_type = BLE_CONN_PARAMS_EVT_SUCCEEDED;
000068  2001              MOVS     r0,#1
00006a  9000              STR      r0,[sp,#0]
;;;215                m_conn_params_config.evt_handler(&evt);
00006c  4806              LDR      r0,|L5.136|
00006e  6941              LDR      r1,[r0,#0x14]  ; m_conn_params_config
000070  4668              MOV      r0,sp
000072  4788              BLX      r1
;;;216            }
000074  bf00              NOP      
                  |L5.118|
;;;217        }
;;;218        m_change_param = false;
000076  2000              MOVS     r0,#0
000078  4902              LDR      r1,|L5.132|
00007a  7008              STRB     r0,[r1,#0]
;;;219    }
00007c  bd38              POP      {r3-r5,pc}
;;;220    
                          ENDP

00007e  0000              DCW      0x0000
                  |L5.128|
                          DCD      m_current_conn_params
                  |L5.132|
                          DCD      m_change_param
                  |L5.136|
                          DCD      m_conn_params_config
                  |L5.140|
                          DCD      m_update_count
                  |L5.144|
                          DCD      m_conn_params_timer_id

                          AREA ||i.is_conn_params_ok||, CODE, READONLY, ALIGN=2

                  is_conn_params_ok PROC
;;;58     
;;;59     static bool is_conn_params_ok(ble_gap_conn_params_t * p_conn_params)
000000  4601              MOV      r1,r0
;;;60     {
;;;61         // Check if interval is within the acceptable range.
;;;62         // NOTE: Using max_conn_interval in the received event data because this contains
;;;63         //       the client's connection interval.
;;;64         if (
000002  8848              LDRH     r0,[r1,#2]
000004  4a06              LDR      r2,|L6.32|
000006  8812              LDRH     r2,[r2,#0]  ; m_preferred_conn_params
000008  4290              CMP      r0,r2
00000a  db06              BLT      |L6.26|
;;;65             (p_conn_params->max_conn_interval >= m_preferred_conn_params.min_conn_interval)
;;;66             &&
;;;67             (p_conn_params->max_conn_interval <= m_preferred_conn_params.max_conn_interval)
00000c  8848              LDRH     r0,[r1,#2]
00000e  4a04              LDR      r2,|L6.32|
000010  8852              LDRH     r2,[r2,#2]  ; m_preferred_conn_params
000012  4290              CMP      r0,r2
000014  dc01              BGT      |L6.26|
;;;68            )
;;;69         {
;;;70             return true;
000016  2001              MOVS     r0,#1
                  |L6.24|
;;;71         }
;;;72         else
;;;73         {
;;;74             return false;
;;;75         }
;;;76     }
000018  4770              BX       lr
                  |L6.26|
00001a  2000              MOVS     r0,#0                 ;74
00001c  e7fc              B        |L6.24|
;;;77     
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      m_preferred_conn_params

                          AREA ||i.on_conn_params_update||, CODE, READONLY, ALIGN=2

                  on_conn_params_update PROC
;;;285    
;;;286    static void on_conn_params_update(ble_evt_t * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;287    {
000002  4604              MOV      r4,r0
;;;288        // Copy the parameters
;;;289        m_current_conn_params = p_ble_evt->evt.gap_evt.params.conn_param_update.conn_params;
000004  2208              MOVS     r2,#8
000006  18a1              ADDS     r1,r4,r2
000008  4802              LDR      r0,|L7.20|
00000a  f7fffffe          BL       __aeabi_memcpy
;;;290    
;;;291        conn_params_negotiation();
00000e  f7fffffe          BL       conn_params_negotiation
;;;292    }
000012  bd10              POP      {r4,pc}
;;;293    
                          ENDP

                  |L7.20|
                          DCD      m_current_conn_params

                          AREA ||i.on_connect||, CODE, READONLY, ALIGN=2

                  on_connect PROC
;;;221    
;;;222    static void on_connect(ble_evt_t * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;223    {
000002  4604              MOV      r4,r0
;;;224        // Save connection parameters
;;;225        m_conn_handle         = p_ble_evt->evt.gap_evt.conn_handle;
000004  88a0              LDRH     r0,[r4,#4]
000006  4909              LDR      r1,|L8.44|
000008  8008              STRH     r0,[r1,#0]
;;;226        m_current_conn_params = p_ble_evt->evt.gap_evt.params.connected.conn_params;
00000a  2208              MOVS     r2,#8
00000c  4621              MOV      r1,r4
00000e  3118              ADDS     r1,r1,#0x18
000010  4807              LDR      r0,|L8.48|
000012  f7fffffe          BL       __aeabi_memcpy
;;;227        m_update_count        = 0;  // Connection parameter negotiation should re-start every connection
000016  2000              MOVS     r0,#0
000018  4906              LDR      r1,|L8.52|
00001a  7008              STRB     r0,[r1,#0]
;;;228    
;;;229        // Check if we shall handle negotiation on connect
;;;230        if (m_conn_params_config.start_on_notify_cccd_handle == BLE_GATT_HANDLE_INVALID)
00001c  4806              LDR      r0,|L8.56|
00001e  89c0              LDRH     r0,[r0,#0xe]  ; m_conn_params_config
000020  2800              CMP      r0,#0
000022  d101              BNE      |L8.40|
;;;231        {
;;;232            conn_params_negotiation();
000024  f7fffffe          BL       conn_params_negotiation
                  |L8.40|
;;;233        }
;;;234    }
000028  bd10              POP      {r4,pc}
;;;235    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      m_conn_handle
                  |L8.48|
                          DCD      m_current_conn_params
                  |L8.52|
                          DCD      m_update_count
                  |L8.56|
                          DCD      m_conn_params_config

                          AREA ||i.on_disconnect||, CODE, READONLY, ALIGN=2

                  on_disconnect PROC
;;;236    
;;;237    static void on_disconnect(ble_evt_t * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;238    {
000002  4605              MOV      r5,r0
;;;239        uint32_t err_code;
;;;240    
;;;241        m_conn_handle = BLE_CONN_HANDLE_INVALID;
000004  2000              MOVS     r0,#0
000006  43c0              MVNS     r0,r0
000008  490a              LDR      r1,|L9.52|
00000a  8008              STRH     r0,[r1,#0]
;;;242    
;;;243        // Stop timer if running
;;;244        m_update_count = 0; // Connection parameters updates should happen during every connection
00000c  2000              MOVS     r0,#0
00000e  490a              LDR      r1,|L9.56|
000010  7008              STRB     r0,[r1,#0]
;;;245    
;;;246        err_code = app_timer_stop(m_conn_params_timer_id);
000012  480a              LDR      r0,|L9.60|
000014  6800              LDR      r0,[r0,#0]  ; m_conn_params_timer_id
000016  f7fffffe          BL       app_timer_stop
00001a  4604              MOV      r4,r0
;;;247        if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
00001c  2c00              CMP      r4,#0
00001e  d007              BEQ      |L9.48|
000020  4807              LDR      r0,|L9.64|
000022  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
000024  2800              CMP      r0,#0
000026  d003              BEQ      |L9.48|
;;;248        {
;;;249            m_conn_params_config.error_handler(err_code);
000028  4805              LDR      r0,|L9.64|
00002a  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
00002c  4620              MOV      r0,r4
00002e  4788              BLX      r1
                  |L9.48|
;;;250        }
;;;251    }
000030  bd70              POP      {r4-r6,pc}
;;;252    
                          ENDP

000032  0000              DCW      0x0000
                  |L9.52|
                          DCD      m_conn_handle
                  |L9.56|
                          DCD      m_update_count
                  |L9.60|
                          DCD      m_conn_params_timer_id
                  |L9.64|
                          DCD      m_conn_params_config

                          AREA ||i.on_write||, CODE, READONLY, ALIGN=2

                  on_write PROC
;;;253    
;;;254    static void on_write(ble_evt_t * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;255    {
000002  4605              MOV      r5,r0
;;;256        ble_gatts_evt_write_t * p_evt_write = &p_ble_evt->evt.gatts_evt.params.write;
000004  1dac              ADDS     r4,r5,#6
;;;257    
;;;258        // Check if this the correct CCCD
;;;259        if (
000006  8820              LDRH     r0,[r4,#0]
000008  4910              LDR      r1,|L10.76|
00000a  89c9              LDRH     r1,[r1,#0xe]  ; m_conn_params_config
00000c  4288              CMP      r0,r1
00000e  d11b              BNE      |L10.72|
;;;260            (p_evt_write->handle == m_conn_params_config.start_on_notify_cccd_handle)
;;;261            &&
;;;262            (p_evt_write->len == 2)
000010  8960              LDRH     r0,[r4,#0xa]
000012  2802              CMP      r0,#2
000014  d118              BNE      |L10.72|
;;;263           )
;;;264        {
;;;265            // Check if this is a 'start notification'
;;;266            if (ble_srv_is_notification_enabled(p_evt_write->data))
000016  4620              MOV      r0,r4
000018  300c              ADDS     r0,r0,#0xc
00001a  f7fffffe          BL       ble_srv_is_notification_enabled
00001e  2800              CMP      r0,#0
000020  d002              BEQ      |L10.40|
;;;267            {
;;;268                // Do connection parameter negotiation if necessary
;;;269                conn_params_negotiation();
000022  f7fffffe          BL       conn_params_negotiation
000026  e00f              B        |L10.72|
                  |L10.40|
;;;270            }
;;;271            else
;;;272            {
;;;273                uint32_t err_code;
;;;274    
;;;275                // Stop timer if running
;;;276                err_code = app_timer_stop(m_conn_params_timer_id);
000028  4809              LDR      r0,|L10.80|
00002a  6800              LDR      r0,[r0,#0]  ; m_conn_params_timer_id
00002c  f7fffffe          BL       app_timer_stop
000030  4606              MOV      r6,r0
;;;277                if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
000032  2e00              CMP      r6,#0
000034  d007              BEQ      |L10.70|
000036  4805              LDR      r0,|L10.76|
000038  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
00003a  2800              CMP      r0,#0
00003c  d003              BEQ      |L10.70|
;;;278                {
;;;279                    m_conn_params_config.error_handler(err_code);
00003e  4803              LDR      r0,|L10.76|
000040  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
000042  4630              MOV      r0,r6
000044  4788              BLX      r1
                  |L10.70|
;;;280                }
;;;281            }
000046  bf00              NOP      
                  |L10.72|
;;;282        }
;;;283    }
000048  bd70              POP      {r4-r6,pc}
;;;284    
                          ENDP

00004a  0000              DCW      0x0000
                  |L10.76|
                          DCD      m_conn_params_config
                  |L10.80|
                          DCD      m_conn_params_timer_id

                          AREA ||i.update_timeout_handler||, CODE, READONLY, ALIGN=2

                  update_timeout_handler PROC
;;;78     
;;;79     static void update_timeout_handler(void * p_context)
000000  b538              PUSH     {r3-r5,lr}
;;;80     {
000002  4605              MOV      r5,r0
;;;81         UNUSED_PARAMETER(p_context);
;;;82     
;;;83         if (m_conn_handle != BLE_CONN_HANDLE_INVALID)
000004  4820              LDR      r0,|L11.136|
000006  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000008  4920              LDR      r1,|L11.140|
00000a  4288              CMP      r0,r1
00000c  d03b              BEQ      |L11.134|
;;;84         {
;;;85             // Check if we have reached the maximum number of attempts
;;;86             m_update_count++;
00000e  4820              LDR      r0,|L11.144|
000010  7800              LDRB     r0,[r0,#0]  ; m_update_count
000012  1c40              ADDS     r0,r0,#1
000014  491e              LDR      r1,|L11.144|
000016  7008              STRB     r0,[r1,#0]
;;;87             if (m_update_count <= m_conn_params_config.max_conn_params_update_count)
000018  481e              LDR      r0,|L11.148|
00001a  7b00              LDRB     r0,[r0,#0xc]  ; m_conn_params_config
00001c  7809              LDRB     r1,[r1,#0]  ; m_update_count
00001e  4288              CMP      r0,r1
000020  db0f              BLT      |L11.66|
;;;88             {
;;;89                 uint32_t err_code;
;;;90     
;;;91                 // Parameters are not ok, send connection parameters update request.
;;;92                 err_code = sd_ble_gap_conn_param_update(m_conn_handle, &m_preferred_conn_params);
000022  491d              LDR      r1,|L11.152|
000024  4818              LDR      r0,|L11.136|
000026  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000028  df75              SVC      #0x75
00002a  4604              MOV      r4,r0
;;;93                 if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
00002c  2c00              CMP      r4,#0
00002e  d007              BEQ      |L11.64|
000030  4818              LDR      r0,|L11.148|
000032  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
000034  2800              CMP      r0,#0
000036  d003              BEQ      |L11.64|
;;;94                 {
;;;95                     m_conn_params_config.error_handler(err_code);
000038  4816              LDR      r0,|L11.148|
00003a  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
00003c  4620              MOV      r0,r4
00003e  4788              BLX      r1
                  |L11.64|
;;;96                 }
;;;97             }
000040  e021              B        |L11.134|
                  |L11.66|
;;;98             else
;;;99             {
;;;100                m_update_count = 0;
000042  2000              MOVS     r0,#0
000044  4912              LDR      r1,|L11.144|
000046  7008              STRB     r0,[r1,#0]
;;;101    
;;;102                // Negotiation failed, disconnect automatically if this has been configured
;;;103                if (m_conn_params_config.disconnect_on_fail)
000048  4812              LDR      r0,|L11.148|
00004a  7c00              LDRB     r0,[r0,#0x10]  ; m_conn_params_config
00004c  2800              CMP      r0,#0
00004e  d00f              BEQ      |L11.112|
;;;104                {
;;;105                    uint32_t err_code;
;;;106    
;;;107                    err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
000050  213b              MOVS     r1,#0x3b
000052  480d              LDR      r0,|L11.136|
000054  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000056  df76              SVC      #0x76
000058  4604              MOV      r4,r0
;;;108                    if ((err_code != NRF_SUCCESS) && (m_conn_params_config.error_handler != NULL))
00005a  2c00              CMP      r4,#0
00005c  d007              BEQ      |L11.110|
00005e  480d              LDR      r0,|L11.148|
000060  6980              LDR      r0,[r0,#0x18]  ; m_conn_params_config
000062  2800              CMP      r0,#0
000064  d003              BEQ      |L11.110|
;;;109                    {
;;;110                        m_conn_params_config.error_handler(err_code);
000066  480b              LDR      r0,|L11.148|
000068  6981              LDR      r1,[r0,#0x18]  ; m_conn_params_config
00006a  4620              MOV      r0,r4
00006c  4788              BLX      r1
                  |L11.110|
;;;111                    }
;;;112                }
00006e  bf00              NOP      
                  |L11.112|
;;;113    
;;;114                // Notify the application that the procedure has failed
;;;115                if (m_conn_params_config.evt_handler != NULL)
000070  4808              LDR      r0,|L11.148|
000072  6940              LDR      r0,[r0,#0x14]  ; m_conn_params_config
000074  2800              CMP      r0,#0
000076  d006              BEQ      |L11.134|
;;;116                {
;;;117                    ble_conn_params_evt_t evt;
;;;118    
;;;119                    evt.evt_type = BLE_CONN_PARAMS_EVT_FAILED;
000078  2000              MOVS     r0,#0
00007a  9000              STR      r0,[sp,#0]
;;;120                    m_conn_params_config.evt_handler(&evt);
00007c  4805              LDR      r0,|L11.148|
00007e  6941              LDR      r1,[r0,#0x14]  ; m_conn_params_config
000080  4668              MOV      r0,sp
000082  4788              BLX      r1
;;;121                }
000084  bf00              NOP      
                  |L11.134|
;;;122            }
;;;123        }
;;;124    }
000086  bd38              POP      {r3-r5,pc}
;;;125    
                          ENDP

                  |L11.136|
                          DCD      m_conn_handle
                  |L11.140|
                          DCD      0x0000ffff
                  |L11.144|
                          DCD      m_update_count
                  |L11.148|
                          DCD      m_conn_params_config
                  |L11.152|
                          DCD      m_preferred_conn_params

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_conn_params_config
                          %        28
                  m_conn_params_timer_id_data
                          %        32

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  m_conn_params_timer_id
                          DCD      m_conn_params_timer_id_data

                          AREA ||.data||, DATA, ALIGN=1

                  m_preferred_conn_params
                          %        8
                  m_update_count
000008  0000              DCB      0x00,0x00
                  m_conn_handle
00000a  0000              DCB      0x00,0x00
                  m_current_conn_params
                          %        8
                  m_change_param
000014  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\common\\ble_conn_params.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_conn_params_c_2dcac06e____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.2.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_ble_conn_params_c_2dcac06e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_conn_params_c_2dcac06e____REVSH|
#line 144
|__asm___17_ble_conn_params_c_2dcac06e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
