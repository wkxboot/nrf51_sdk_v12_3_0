; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\system_nrf51.o --asm_dir=.\DEBUG\ --list_dir=.\DEBUG\ --depend=.\debug\system_nrf51.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\power -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\usbd -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\gpiote -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\queue -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\sensorsim -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\usbd -I..\..\..\..\..\..\components\libraries\usbd\class\audio -I..\..\..\..\..\..\components\libraries\usbd\class\cdc -I..\..\..\..\..\..\components\libraries\usbd\class\cdc\acm -I..\..\..\..\..\..\components\libraries\usbd\class\hid -I..\..\..\..\..\..\components\libraries\usbd\class\hid\generic -I..\..\..\..\..\..\components\libraries\usbd\class\hid\kbd -I..\..\..\..\..\..\components\libraries\usbd\class\hid\mouse -I..\..\..\..\..\..\components\libraries\usbd\class\msc -I..\..\..\..\..\..\components\libraries\usbd\config -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s130\headers -I..\..\..\..\..\..\components\softdevice\s130\headers\nrf51 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_sls -ID:\development\nordic_ble\src_code\nrf51_sdk_v12_3_0\nRF5_SDK_12.3.0_d7731ad\examples\ble_peripheral\ble_app_smart_locker\JJDK_ZG_ZK\s130\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.11.1\Device\Include -D__MICROLIB -D_RTE_ -DNRF51 -DBLE_STACK_SUPPORT_REQD -DNRF51822 -DBOARD_JJDK_ZG_ZK -DNRF_SD_BLE_API_VERSION=2 -DS130 -DNRF51 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 --omf_browse=.\debug\system_nrf51.crf RTE\Device\nRF51822_xxAA\system_nrf51.c]
                          THUMB

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;56     
;;;57     void SystemCoreClockUpdate(void)
000000  4801              LDR      r0,|L1.8|
;;;58     {
;;;59         SystemCoreClock = __SYSTEM_CLOCK;
000002  4902              LDR      r1,|L1.12|
000004  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;60     }
000006  4770              BX       lr
;;;61     
                          ENDP

                  |L1.8|
                          DCD      0x00f42400
                  |L1.12|
                          DCD      SystemCoreClock

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;61     
;;;62     void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;63     {
;;;64         /* If desired, switch off the unused RAM to lower consumption by the use of RAMON register.
;;;65            It can also be done in the application main() function. */
;;;66     
;;;67         /* Prepare the peripherals for use as indicated by the PAN 26 "System: Manual setup is required
;;;68            to enable the use of peripherals" found at Product Anomaly document for your device found at
;;;69            https://www.nordicsemi.com/. The side effect of executing these instructions in the devices
;;;70            that do not need it is that the new peripherals in the second generation devices (LPCOMP for
;;;71            example) will not be available. */
;;;72         if (is_manual_peripheral_setup_needed())
000002  f7fffffe          BL       is_manual_peripheral_setup_needed
000006  2800              CMP      r0,#0
000008  d005              BEQ      |L2.22|
;;;73         {
;;;74             *(uint32_t volatile *)0x40000504 = 0xC007FFDF;
00000a  4810              LDR      r0,|L2.76|
00000c  4910              LDR      r1,|L2.80|
00000e  6048              STR      r0,[r1,#4]
;;;75             *(uint32_t volatile *)0x40006C18 = 0x00008000;
000010  13c8              ASRS     r0,r1,#15
000012  4910              LDR      r1,|L2.84|
000014  6188              STR      r0,[r1,#0x18]
                  |L2.22|
;;;76         }
;;;77     
;;;78         /* Disable PROTENSET registers under debug, as indicated by PAN 59 "MPU: Reset value of DISABLEINDEBUG
;;;79            register is incorrect" found at Product Anomaly document for your device found at
;;;80            https://www.nordicsemi.com/. There is no side effect of using these instruction if not needed. */
;;;81         if (is_disabled_in_debug_needed())
000016  f7fffffe          BL       is_disabled_in_debug_needed
00001a  2800              CMP      r0,#0
00001c  d002              BEQ      |L2.36|
;;;82         {
;;;83             NRF_MPU->DISABLEINDEBUG = MPU_DISABLEINDEBUG_DISABLEINDEBUG_Disabled << MPU_DISABLEINDEBUG_DISABLEINDEBUG_Pos;
00001e  2001              MOVS     r0,#1
000020  490d              LDR      r1,|L2.88|
000022  6088              STR      r0,[r1,#8]
                  |L2.36|
;;;84         }
;;;85     
;;;86         /* Execute the following code to eliminate excessive current in sleep mode with RAM retention in nRF51802 devices,
;;;87            as indicated by PAN 76 "System: Excessive current in sleep mode with retention" found at Product Anomaly document
;;;88            for your device found at https://www.nordicsemi.com/. */
;;;89         if (is_peripheral_domain_setup_needed()){
000024  f7fffffe          BL       is_peripheral_domain_setup_needed
000028  2800              CMP      r0,#0
00002a  d00e              BEQ      |L2.74|
;;;90             if (*(uint32_t volatile *)0x4006EC00 != 1){
00002c  480b              LDR      r0,|L2.92|
00002e  6800              LDR      r0,[r0,#0]
000030  2801              CMP      r0,#1
000032  d007              BEQ      |L2.68|
;;;91                 *(uint32_t volatile *)0x4006EC00 = 0x9375;
000034  480a              LDR      r0,|L2.96|
000036  4909              LDR      r1,|L2.92|
000038  6008              STR      r0,[r1,#0]
;;;92                 while (*(uint32_t volatile *)0x4006EC00 != 1){
00003a  bf00              NOP      
                  |L2.60|
00003c  4807              LDR      r0,|L2.92|
00003e  6800              LDR      r0,[r0,#0]
000040  2801              CMP      r0,#1
000042  d1fb              BNE      |L2.60|
                  |L2.68|
;;;93                 }
;;;94             }
;;;95             *(uint32_t volatile *)0x4006EC14 = 0xC0;
000044  20c0              MOVS     r0,#0xc0
000046  4905              LDR      r1,|L2.92|
000048  6148              STR      r0,[r1,#0x14]
                  |L2.74|
;;;96         }
;;;97     }
00004a  bd10              POP      {r4,pc}
;;;98     
                          ENDP

                  |L2.76|
                          DCD      0xc007ffdf
                  |L2.80|
                          DCD      0x40000500
                  |L2.84|
                          DCD      0x40006c00
                  |L2.88|
                          DCD      0x40000600
                  |L2.92|
                          DCD      0x4006ec00
                  |L2.96|
                          DCD      0x00009375

                          AREA ||i.is_disabled_in_debug_needed||, CODE, READONLY, ALIGN=2

                  is_disabled_in_debug_needed PROC
;;;120    
;;;121    static bool is_disabled_in_debug_needed(void)
000000  480c              LDR      r0,|L3.52|
;;;122    {
;;;123        if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x1) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0))
000002  8c00              LDRH     r0,[r0,#0x20]
000004  b2c0              UXTB     r0,r0
000006  2801              CMP      r0,#1
000008  d112              BNE      |L3.48|
00000a  480a              LDR      r0,|L3.52|
00000c  8c80              LDRH     r0,[r0,#0x24]
00000e  0700              LSLS     r0,r0,#28
000010  0f00              LSRS     r0,r0,#28
000012  2800              CMP      r0,#0
000014  d10c              BNE      |L3.48|
;;;124        {
;;;125            if ((((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))
000016  4807              LDR      r0,|L3.52|
000018  6a80              LDR      r0,[r0,#0x28]
00001a  21f0              MOVS     r1,#0xf0
00001c  4008              ANDS     r0,r0,r1
00001e  2840              CMP      r0,#0x40
000020  d106              BNE      |L3.48|
000022  4804              LDR      r0,|L3.52|
000024  6ac0              LDR      r0,[r0,#0x2c]
000026  4008              ANDS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d101              BNE      |L3.48|
;;;126            {
;;;127                return true;
00002c  2001              MOVS     r0,#1
                  |L3.46|
;;;128            }
;;;129        }
;;;130    
;;;131        return false;
;;;132    }
00002e  4770              BX       lr
                  |L3.48|
000030  2000              MOVS     r0,#0                 ;131
000032  e7fc              B        |L3.46|
;;;133    
                          ENDP

                  |L3.52|
                          DCD      0xf0000fc0

                          AREA ||i.is_manual_peripheral_setup_needed||, CODE, READONLY, ALIGN=2

                  is_manual_peripheral_setup_needed PROC
;;;99     
;;;100    static bool is_manual_peripheral_setup_needed(void)
000000  4819              LDR      r0,|L4.104|
;;;101    {
;;;102        if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x1) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0))
000002  8c00              LDRH     r0,[r0,#0x20]
000004  b2c0              UXTB     r0,r0
000006  2801              CMP      r0,#1
000008  d12c              BNE      |L4.100|
00000a  4817              LDR      r0,|L4.104|
00000c  8c80              LDRH     r0,[r0,#0x24]
00000e  0700              LSLS     r0,r0,#28
000010  0f00              LSRS     r0,r0,#28
000012  2800              CMP      r0,#0
000014  d126              BNE      |L4.100|
;;;103        {
;;;104            if ((((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x00) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))
000016  4814              LDR      r0,|L4.104|
000018  6a80              LDR      r0,[r0,#0x28]
00001a  21f0              MOVS     r1,#0xf0
00001c  4008              ANDS     r0,r0,r1
00001e  2800              CMP      r0,#0
000020  d106              BNE      |L4.48|
000022  4811              LDR      r0,|L4.104|
000024  6ac0              LDR      r0,[r0,#0x2c]
000026  4008              ANDS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d101              BNE      |L4.48|
;;;105            {
;;;106                return true;
00002c  2001              MOVS     r0,#1
                  |L4.46|
;;;107            }
;;;108            if ((((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x10) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))
;;;109            {
;;;110                return true;
;;;111            }
;;;112            if ((((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))
;;;113            {
;;;114                return true;
;;;115            }
;;;116        }
;;;117    
;;;118        return false;
;;;119    }
00002e  4770              BX       lr
                  |L4.48|
000030  480d              LDR      r0,|L4.104|
000032  6a80              LDR      r0,[r0,#0x28]         ;108
000034  21f0              MOVS     r1,#0xf0              ;108
000036  4008              ANDS     r0,r0,r1              ;108
000038  2810              CMP      r0,#0x10              ;108
00003a  d106              BNE      |L4.74|
00003c  480a              LDR      r0,|L4.104|
00003e  6ac0              LDR      r0,[r0,#0x2c]         ;108
000040  4008              ANDS     r0,r0,r1              ;108
000042  2800              CMP      r0,#0                 ;108
000044  d101              BNE      |L4.74|
000046  2001              MOVS     r0,#1                 ;110
000048  e7f1              B        |L4.46|
                  |L4.74|
00004a  4807              LDR      r0,|L4.104|
00004c  6a80              LDR      r0,[r0,#0x28]         ;112
00004e  21f0              MOVS     r1,#0xf0              ;112
000050  4008              ANDS     r0,r0,r1              ;112
000052  2830              CMP      r0,#0x30              ;112
000054  d106              BNE      |L4.100|
000056  4804              LDR      r0,|L4.104|
000058  6ac0              LDR      r0,[r0,#0x2c]         ;112
00005a  4008              ANDS     r0,r0,r1              ;112
00005c  2800              CMP      r0,#0                 ;112
00005e  d101              BNE      |L4.100|
000060  2001              MOVS     r0,#1                 ;114
000062  e7e4              B        |L4.46|
                  |L4.100|
000064  2000              MOVS     r0,#0                 ;118
000066  e7e2              B        |L4.46|
;;;120    
                          ENDP

                  |L4.104|
                          DCD      0xf0000fc0

                          AREA ||i.is_peripheral_domain_setup_needed||, CODE, READONLY, ALIGN=2

                  is_peripheral_domain_setup_needed PROC
;;;133    
;;;134    static bool is_peripheral_domain_setup_needed(void)
000000  4813              LDR      r0,|L5.80|
;;;135    {
;;;136        if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x1) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0))
000002  8c00              LDRH     r0,[r0,#0x20]
000004  b2c0              UXTB     r0,r0
000006  2801              CMP      r0,#1
000008  d11f              BNE      |L5.74|
00000a  4811              LDR      r0,|L5.80|
00000c  8c80              LDRH     r0,[r0,#0x24]
00000e  0700              LSLS     r0,r0,#28
000010  0f00              LSRS     r0,r0,#28
000012  2800              CMP      r0,#0
000014  d119              BNE      |L5.74|
;;;137        {
;;;138            if ((((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0xA0) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))
000016  480e              LDR      r0,|L5.80|
000018  6a80              LDR      r0,[r0,#0x28]
00001a  21f0              MOVS     r1,#0xf0
00001c  4008              ANDS     r0,r0,r1
00001e  28a0              CMP      r0,#0xa0
000020  d106              BNE      |L5.48|
000022  480b              LDR      r0,|L5.80|
000024  6ac0              LDR      r0,[r0,#0x2c]
000026  4008              ANDS     r0,r0,r1
000028  2800              CMP      r0,#0
00002a  d101              BNE      |L5.48|
;;;139            {
;;;140                return true;
00002c  2001              MOVS     r0,#1
                  |L5.46|
;;;141            }
;;;142            if ((((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0xD0) && (((*(uint32_t *)0xF0000FEC) & 0x000000F0) == 0x0))
;;;143            {
;;;144                return true;
;;;145            }
;;;146        }
;;;147    
;;;148        return false;
;;;149    }
00002e  4770              BX       lr
                  |L5.48|
000030  4807              LDR      r0,|L5.80|
000032  6a80              LDR      r0,[r0,#0x28]         ;142
000034  21f0              MOVS     r1,#0xf0              ;142
000036  4008              ANDS     r0,r0,r1              ;142
000038  28d0              CMP      r0,#0xd0              ;142
00003a  d106              BNE      |L5.74|
00003c  4804              LDR      r0,|L5.80|
00003e  6ac0              LDR      r0,[r0,#0x2c]         ;142
000040  4008              ANDS     r0,r0,r1              ;142
000042  2800              CMP      r0,#0                 ;142
000044  d101              BNE      |L5.74|
000046  2001              MOVS     r0,#1                 ;144
000048  e7f1              B        |L5.46|
                  |L5.74|
00004a  2000              MOVS     r0,#0                 ;148
00004c  e7ef              B        |L5.46|
;;;150    
                          ENDP

00004e  0000              DCW      0x0000
                  |L5.80|
                          DCD      0xf0000fc0

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                  ||__tagsym$$used||
                          DCD      0x00f42400

;*** Start embedded assembler ***

#line 1 "RTE\\Device\\nRF51822_xxAA\\system_nrf51.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_system_nrf51_c_5d646a67____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.2.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_system_nrf51_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_system_nrf51_c_5d646a67____REVSH|
#line 144
|__asm___14_system_nrf51_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
