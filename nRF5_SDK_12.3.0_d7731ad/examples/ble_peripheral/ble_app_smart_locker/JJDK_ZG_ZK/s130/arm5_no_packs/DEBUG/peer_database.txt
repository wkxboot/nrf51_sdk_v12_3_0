; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\peer_database.o --asm_dir=.\DEBUG\ --list_dir=.\DEBUG\ --depend=.\debug\peer_database.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\power -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\usbd -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\gpiote -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\queue -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\sensorsim -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\usbd -I..\..\..\..\..\..\components\libraries\usbd\class\audio -I..\..\..\..\..\..\components\libraries\usbd\class\cdc -I..\..\..\..\..\..\components\libraries\usbd\class\cdc\acm -I..\..\..\..\..\..\components\libraries\usbd\class\hid -I..\..\..\..\..\..\components\libraries\usbd\class\hid\generic -I..\..\..\..\..\..\components\libraries\usbd\class\hid\kbd -I..\..\..\..\..\..\components\libraries\usbd\class\hid\mouse -I..\..\..\..\..\..\components\libraries\usbd\class\msc -I..\..\..\..\..\..\components\libraries\usbd\config -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s130\headers -I..\..\..\..\..\..\components\softdevice\s130\headers\nrf51 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_sls -ID:\development\nordic_ble\src_code\nrf51_sdk_v12_3_0\nRF5_SDK_12.3.0_d7731ad\examples\ble_peripheral\ble_app_smart_locker\JJDK_ZG_ZK\s130\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.11.1\Device\Include -D__MICROLIB -D_RTE_ -DNRF51 -DBLE_STACK_SUPPORT_REQD -DNRF51822 -DBOARD_JJDK_ZG_ZK -DNRF_SD_BLE_API_VERSION=2 -DS130 -DNRF51 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 --omf_browse=.\debug\peer_database.crf ..\..\..\..\..\..\components\ble\peer_manager\peer_database.c]
                          THUMB

                          AREA ||i.internal_state_reset||, CODE, READONLY, ALIGN=2

                  internal_state_reset PROC
;;;247     */
;;;248    static void internal_state_reset()
000000  b510              PUSH     {r4,lr}
;;;249    {
;;;250        for (uint32_t i = 0; i < N_WRITE_BUFFER_RECORDS; i++)
000002  2400              MOVS     r4,#0
000004  e006              B        |L1.20|
                  |L1.6|
;;;251        {
;;;252            write_buffer_record_invalidate(&m_write_buffer_records[i]);
000006  2114              MOVS     r1,#0x14
000008  4361              MULS     r1,r4,r1
00000a  4a04              LDR      r2,|L1.28|
00000c  1888              ADDS     r0,r1,r2
00000e  f7fffffe          BL       write_buffer_record_invalidate
000012  1c64              ADDS     r4,r4,#1              ;250
                  |L1.20|
000014  2c08              CMP      r4,#8                 ;250
000016  d3f6              BCC      |L1.6|
;;;253        }
;;;254    }
000018  bd10              POP      {r4,pc}
;;;255    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      m_write_buffer_records

                          AREA ||i.pdb_clear||, CODE, READONLY, ALIGN=1

                  pdb_clear PROC
;;;735    
;;;736    ret_code_t pdb_clear(pm_peer_id_t peer_id, pm_peer_data_id_t data_id)
000000  b570              PUSH     {r4-r6,lr}
;;;737    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;738        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;739        return pds_peer_data_delete(peer_id, data_id);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       pds_peer_data_delete
;;;740    }
00000e  bd70              POP      {r4-r6,pc}
;;;741    
                          ENDP


                          AREA ||i.pdb_evt_send||, CODE, READONLY, ALIGN=2

                  pdb_evt_send PROC
;;;234     */
;;;235    static void pdb_evt_send(pdb_evt_t * p_event)
000000  b570              PUSH     {r4-r6,lr}
;;;236    {
000002  4605              MOV      r5,r0
;;;237        for (uint32_t i = 0; i < PDB_EVENT_HANDLERS_CNT; i++)
000004  2400              MOVS     r4,#0
000006  e005              B        |L3.20|
                  |L3.8|
;;;238        {
;;;239            m_evt_handlers[i](p_event);
000008  00a0              LSLS     r0,r4,#2
00000a  4a04              LDR      r2,|L3.28|
00000c  5811              LDR      r1,[r2,r0]
00000e  4628              MOV      r0,r5
000010  4788              BLX      r1
000012  1c64              ADDS     r4,r4,#1              ;237
                  |L3.20|
000014  2c05              CMP      r4,#5                 ;237
000016  d3f7              BCC      |L3.8|
;;;240        }
;;;241    }
000018  bd70              POP      {r4-r6,pc}
;;;242    
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      m_evt_handlers

                          AREA ||i.pdb_init||, CODE, READONLY, ALIGN=2

                  pdb_init PROC
;;;374    
;;;375    ret_code_t pdb_init()
000000  b53e              PUSH     {r1-r5,lr}
;;;376    {
;;;377        ret_code_t ret;
;;;378    
;;;379        NRF_PM_DEBUG_CHECK(!m_module_initialized);
;;;380    
;;;381        internal_state_reset();
000002  f7fffffe          BL       internal_state_reset
;;;382    
;;;383        PM_BUFFER_INIT(&m_write_buffer, N_WRITE_BUFFERS, PDB_WRITE_BUF_SIZE, ret);
000006  bf00              NOP      
000008  2050              MOVS     r0,#0x50
00000a  2108              MOVS     r1,#8
00000c  2201              MOVS     r2,#1
00000e  4b0a              LDR      r3,|L4.56|
000010  9200              STR      r2,[sp,#0]
000012  9101              STR      r1,[sp,#4]
000014  9002              STR      r0,[sp,#8]
000016  00c2              LSLS     r2,r0,#3
000018  4908              LDR      r1,|L4.60|
00001a  4809              LDR      r0,|L4.64|
00001c  f7fffffe          BL       pm_buffer_init
000020  4604              MOV      r4,r0
000022  bf00              NOP      
;;;384    
;;;385        if (ret != NRF_SUCCESS)
000024  2c00              CMP      r4,#0
000026  d001              BEQ      |L4.44|
;;;386        {
;;;387            return NRF_ERROR_INTERNAL;
000028  2003              MOVS     r0,#3
                  |L4.42|
;;;388        }
;;;389    
;;;390        m_module_initialized = true;
;;;391    
;;;392        return NRF_SUCCESS;
;;;393    }
00002a  bd3e              POP      {r1-r5,pc}
                  |L4.44|
00002c  2001              MOVS     r0,#1                 ;390
00002e  4905              LDR      r1,|L4.68|
000030  7008              STRB     r0,[r1,#0]            ;390
000032  2000              MOVS     r0,#0                 ;392
000034  e7f9              B        |L4.42|
;;;394    
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
                          DCD      mutex_memory
                  |L4.60|
                          DCD      buffer_memory
                  |L4.64|
                          DCD      m_write_buffer
                  |L4.68|
                          DCD      m_module_initialized

                          AREA ||i.pdb_n_peers||, CODE, READONLY, ALIGN=1

                  pdb_n_peers PROC
;;;742    
;;;743    uint32_t pdb_n_peers(void)
000000  b510              PUSH     {r4,lr}
;;;744    {
;;;745        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;746        return pds_peer_count_get();
000002  f7fffffe          BL       pds_peer_count_get
;;;747    }
000006  bd10              POP      {r4,pc}
;;;748    
                          ENDP


                          AREA ||i.pdb_next_deleted_peer_id_get||, CODE, READONLY, ALIGN=1

                  pdb_next_deleted_peer_id_get PROC
;;;756    
;;;757    pm_peer_id_t pdb_next_deleted_peer_id_get(pm_peer_id_t prev_peer_id)
000000  b510              PUSH     {r4,lr}
;;;758    {
000002  4604              MOV      r4,r0
;;;759        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;760        return pds_next_deleted_peer_id_get(prev_peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       pds_next_deleted_peer_id_get
;;;761    }
00000a  bd10              POP      {r4,pc}
;;;762    
                          ENDP


                          AREA ||i.pdb_next_peer_id_get||, CODE, READONLY, ALIGN=1

                  pdb_next_peer_id_get PROC
;;;749    
;;;750    pm_peer_id_t pdb_next_peer_id_get(pm_peer_id_t prev_peer_id)
000000  b510              PUSH     {r4,lr}
;;;751    {
000002  4604              MOV      r4,r0
;;;752        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;753        return pds_next_peer_id_get(prev_peer_id);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       pds_next_peer_id_get
;;;754    }
00000a  bd10              POP      {r4,pc}
;;;755    
                          ENDP


                          AREA ||i.pdb_pds_evt_handler||, CODE, READONLY, ALIGN=2

                  pdb_pds_evt_handler PROC
;;;261     */
;;;262    void pdb_pds_evt_handler(pds_evt_t const * p_event)
000000  b5f0              PUSH     {r4-r7,lr}
;;;263    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;264        ret_code_t            err_code;
;;;265        pdb_buffer_record_t * p_write_buffer_record;
;;;266        bool                  retry_flash_full = false;
000006  2000              MOVS     r0,#0
000008  9004              STR      r0,[sp,#0x10]
;;;267        pdb_evt_t             event =
00000a  9000              STR      r0,[sp,#0]
00000c  9001              STR      r0,[sp,#4]
00000e  9002              STR      r0,[sp,#8]
000010  9003              STR      r0,[sp,#0xc]
000012  8861              LDRH     r1,[r4,#2]
000014  4668              MOV      r0,sp
000016  8041              STRH     r1,[r0,#2]
000018  7921              LDRB     r1,[r4,#4]
00001a  7101              STRB     r1,[r0,#4]
;;;268        {
;;;269            .peer_id = p_event->peer_id,
;;;270            .data_id = p_event->data_id,
;;;271        };
;;;272    
;;;273        p_write_buffer_record = write_buffer_record_find(p_event->peer_id, p_event->data_id);
00001c  7921              LDRB     r1,[r4,#4]
00001e  8860              LDRH     r0,[r4,#2]
000020  f7fffffe          BL       write_buffer_record_find
000024  4605              MOV      r5,r0
;;;274    
;;;275        switch (p_event->evt_id)
000026  7820              LDRB     r0,[r4,#0]
000028  0003              MOVS     r3,r0
00002a  f7fffffe          BL       __ARM_common_switch8
00002e  0a06              DCB      0x0a,0x06
000030  074c2829          DCB      0x07,0x4c,0x28,0x29
000034  535c636c          DCB      0x53,0x5c,0x63,0x6c
000038  7578              DCB      0x75,0x78
;;;276        {
;;;277            case PDS_EVT_STORED:
;;;278            case PDS_EVT_UPDATED:
00003a  bf00              NOP      
;;;279                if (   (p_write_buffer_record != NULL)
00003c  2d00              CMP      r5,#0
00003e  d015              BEQ      |L8.108|
;;;280                    //&& (p_write_buffer_record->store_token == p_event->store_token)
;;;281                    && (p_write_buffer_record->store_requested))
000040  7c68              LDRB     r0,[r5,#0x11]
000042  07c0              LSLS     r0,r0,#31
000044  0fc0              LSRS     r0,r0,#31
000046  2800              CMP      r0,#0
000048  d010              BEQ      |L8.108|
;;;282                {
;;;283                    write_buffer_record_release(p_write_buffer_record);
00004a  4628              MOV      r0,r5
00004c  f7fffffe          BL       write_buffer_record_release
;;;284                    event.evt_id = PDB_EVT_WRITE_BUF_STORED;
000050  2000              MOVS     r0,#0
000052  4669              MOV      r1,sp
000054  7008              STRB     r0,[r1,#0]
;;;285                    event.params.write_buf_stored_evt.update = (p_event->evt_id == PDS_EVT_UPDATED);
000056  7820              LDRB     r0,[r4,#0]
000058  2801              CMP      r0,#1
00005a  d100              BNE      |L8.94|
00005c  e000              B        |L8.96|
                  |L8.94|
00005e  2000              MOVS     r0,#0
                  |L8.96|
000060  4669              MOV      r1,sp
000062  7208              STRB     r0,[r1,#8]
;;;286                    pdb_evt_send(&event);
000064  4668              MOV      r0,sp
000066  f7fffffe          BL       pdb_evt_send
00006a  e007              B        |L8.124|
                  |L8.108|
;;;287                }
;;;288                else
;;;289                {
;;;290                    event.evt_id = PDB_EVT_RAW_STORED;
00006c  2001              MOVS     r0,#1
00006e  4669              MOV      r1,sp
000070  7008              STRB     r0,[r1,#0]
;;;291                    event.params.raw_stored_evt.store_token = p_event->store_token;
000072  68a0              LDR      r0,[r4,#8]
000074  9002              STR      r0,[sp,#8]
;;;292                    pdb_evt_send(&event);
000076  4668              MOV      r0,sp
000078  f7fffffe          BL       pdb_evt_send
                  |L8.124|
;;;293                }
;;;294                break;
00007c  e050              B        |L8.288|
;;;295            case PDS_EVT_ERROR_STORE:
;;;296            case PDS_EVT_ERROR_UPDATE:
00007e  bf00              NOP      
;;;297                if (   (p_write_buffer_record != NULL)
000080  2d00              CMP      r5,#0
000082  d017              BEQ      |L8.180|
;;;298                    && (p_write_buffer_record->store_token == p_event->store_token)
000084  68a8              LDR      r0,[r5,#8]
000086  68a1              LDR      r1,[r4,#8]
000088  4288              CMP      r0,r1
00008a  d113              BNE      |L8.180|
;;;299                    && (p_write_buffer_record->store_requested))
00008c  7c68              LDRB     r0,[r5,#0x11]
00008e  07c0              LSLS     r0,r0,#31
000090  0fc0              LSRS     r0,r0,#31
000092  2800              CMP      r0,#0
000094  d00e              BEQ      |L8.180|
;;;300                {
;;;301                    // Retry if internal buffer.
;;;302                    m_n_writes++;
000096  4847              LDR      r0,|L8.436|
000098  6800              LDR      r0,[r0,#0]  ; m_n_writes
00009a  1c40              ADDS     r0,r0,#1
00009c  4945              LDR      r1,|L8.436|
00009e  6008              STR      r0,[r1,#0]  ; m_n_writes
;;;303                    p_write_buffer_record->store_requested = false;
0000a0  7c68              LDRB     r0,[r5,#0x11]
0000a2  0840              LSRS     r0,r0,#1
0000a4  0040              LSLS     r0,r0,#1
0000a6  7468              STRB     r0,[r5,#0x11]
;;;304                    p_write_buffer_record->store_busy      = true;
0000a8  7c68              LDRB     r0,[r5,#0x11]
0000aa  2104              MOVS     r1,#4
0000ac  4388              BICS     r0,r0,r1
0000ae  1d00              ADDS     r0,r0,#4
0000b0  7468              STRB     r0,[r5,#0x11]
0000b2  e007              B        |L8.196|
                  |L8.180|
;;;305                }
;;;306                else
;;;307                {
;;;308                    event.evt_id                              = PDB_EVT_RAW_STORE_FAILED;
0000b4  2002              MOVS     r0,#2
0000b6  4669              MOV      r1,sp
0000b8  7008              STRB     r0,[r1,#0]
;;;309                    event.params.error_raw_store_evt.err_code = p_event->result;
0000ba  68e1              LDR      r1,[r4,#0xc]
0000bc  9103              STR      r1,[sp,#0xc]
;;;310                    pdb_evt_send(&event);
0000be  4668              MOV      r0,sp
0000c0  f7fffffe          BL       pdb_evt_send
                  |L8.196|
;;;311                }
;;;312                break;
0000c4  e02c              B        |L8.288|
;;;313            case PDS_EVT_CLEARED:
;;;314                event.evt_id = PDB_EVT_CLEARED;
0000c6  2003              MOVS     r0,#3
0000c8  4669              MOV      r1,sp
0000ca  7008              STRB     r0,[r1,#0]
;;;315                pdb_evt_send(&event);
0000cc  4668              MOV      r0,sp
0000ce  f7fffffe          BL       pdb_evt_send
;;;316                break;
0000d2  e025              B        |L8.288|
;;;317            case PDS_EVT_ERROR_CLEAR:
;;;318                event.evt_id = PDB_EVT_CLEAR_FAILED;
0000d4  2004              MOVS     r0,#4
0000d6  4669              MOV      r1,sp
0000d8  7008              STRB     r0,[r1,#0]
;;;319                event.params.clear_failed_evt.err_code = p_event->result;
0000da  68e0              LDR      r0,[r4,#0xc]
0000dc  9002              STR      r0,[sp,#8]
;;;320                pdb_evt_send(&event);
0000de  4668              MOV      r0,sp
0000e0  f7fffffe          BL       pdb_evt_send
;;;321                break;
0000e4  e01c              B        |L8.288|
;;;322            case PDS_EVT_PEER_ID_CLEAR:
;;;323                event.evt_id = PDB_EVT_PEER_FREED;
0000e6  2005              MOVS     r0,#5
0000e8  4669              MOV      r1,sp
0000ea  7008              STRB     r0,[r1,#0]
;;;324                pdb_evt_send(&event);
0000ec  4668              MOV      r0,sp
0000ee  f7fffffe          BL       pdb_evt_send
;;;325                break;
0000f2  e015              B        |L8.288|
;;;326            case PDS_EVT_ERROR_PEER_ID_CLEAR:
;;;327                event.evt_id = PDB_EVT_PEER_FREE_FAILED;
0000f4  2006              MOVS     r0,#6
0000f6  4669              MOV      r1,sp
0000f8  7008              STRB     r0,[r1,#0]
;;;328                event.params.peer_free_failed_evt.err_code = p_event->result;
0000fa  68e0              LDR      r0,[r4,#0xc]
0000fc  9002              STR      r0,[sp,#8]
;;;329                pdb_evt_send(&event);
0000fe  4668              MOV      r0,sp
000100  f7fffffe          BL       pdb_evt_send
;;;330                break;
000104  e00c              B        |L8.288|
;;;331            case PDS_EVT_COMPRESSED:
;;;332                retry_flash_full = true;
000106  2001              MOVS     r0,#1
000108  9004              STR      r0,[sp,#0x10]
;;;333                event.evt_id = PDB_EVT_COMPRESSED;
00010a  2007              MOVS     r0,#7
00010c  4669              MOV      r1,sp
00010e  7008              STRB     r0,[r1,#0]
;;;334                pdb_evt_send(&event);
000110  4668              MOV      r0,sp
000112  f7fffffe          BL       pdb_evt_send
;;;335                break;
000116  e003              B        |L8.288|
;;;336            case PDS_EVT_ERROR_UNEXPECTED:
;;;337                event.params.error_unexpected.err_code = p_event->result;
000118  68e0              LDR      r0,[r4,#0xc]
00011a  9002              STR      r0,[sp,#8]
;;;338                break;
00011c  e000              B        |L8.288|
;;;339            default:
;;;340                break;
00011e  bf00              NOP      
                  |L8.288|
000120  bf00              NOP                            ;294
;;;341        }
;;;342    
;;;343        if (m_n_writes > 0)
000122  4824              LDR      r0,|L8.436|
000124  6800              LDR      r0,[r0,#0]  ; m_n_writes
000126  2800              CMP      r0,#0
000128  d041              BEQ      |L8.430|
;;;344        {
;;;345            for (uint32_t i = 0; i < N_WRITE_BUFFER_RECORDS; i++)
00012a  2700              MOVS     r7,#0
00012c  e03c              B        |L8.424|
                  |L8.302|
;;;346            {
;;;347                if  ((m_write_buffer_records[i].store_busy)
00012e  2014              MOVS     r0,#0x14
000130  4378              MULS     r0,r7,r0
000132  4921              LDR      r1,|L8.440|
000134  1840              ADDS     r0,r0,r1
000136  7c40              LDRB     r0,[r0,#0x11]
000138  0740              LSLS     r0,r0,#29
00013a  0fc0              LSRS     r0,r0,#31
00013c  2800              CMP      r0,#0
00013e  d10a              BNE      |L8.342|
;;;348                  || (m_write_buffer_records[i].store_flash_full && retry_flash_full))
000140  2014              MOVS     r0,#0x14
000142  4378              MULS     r0,r7,r0
000144  1840              ADDS     r0,r0,r1
000146  7c40              LDRB     r0,[r0,#0x11]
000148  0780              LSLS     r0,r0,#30
00014a  0fc0              LSRS     r0,r0,#31
00014c  2800              CMP      r0,#0
00014e  d02a              BEQ      |L8.422|
000150  9804              LDR      r0,[sp,#0x10]
000152  2800              CMP      r0,#0
000154  d027              BEQ      |L8.422|
                  |L8.342|
;;;349                {
;;;350                    err_code = pdb_write_buf_store(m_write_buffer_records[i].peer_id,
000156  2214              MOVS     r2,#0x14
000158  437a              MULS     r2,r7,r2
00015a  4b17              LDR      r3,|L8.440|
00015c  18d2              ADDS     r2,r2,r3
00015e  7891              LDRB     r1,[r2,#2]
000160  2214              MOVS     r2,#0x14
000162  437a              MULS     r2,r7,r2
000164  5a98              LDRH     r0,[r3,r2]
000166  f7fffffe          BL       pdb_write_buf_store
00016a  4606              MOV      r6,r0
;;;351                                                   m_write_buffer_records[i].data_id);
;;;352                    if (err_code != NRF_SUCCESS)
00016c  2e00              CMP      r6,#0
00016e  d01a              BEQ      |L8.422|
;;;353                    {
;;;354                        event.peer_id = m_write_buffer_records[i].peer_id;
000170  2014              MOVS     r0,#0x14
000172  4378              MULS     r0,r7,r0
000174  4910              LDR      r1,|L8.440|
000176  5a09              LDRH     r1,[r1,r0]
000178  4668              MOV      r0,sp
00017a  8041              STRH     r1,[r0,#2]
;;;355                        event.data_id = m_write_buffer_records[i].data_id;
00017c  2014              MOVS     r0,#0x14
00017e  4378              MULS     r0,r7,r0
000180  490d              LDR      r1,|L8.440|
000182  1840              ADDS     r0,r0,r1
000184  7881              LDRB     r1,[r0,#2]
000186  4668              MOV      r0,sp
000188  7101              STRB     r1,[r0,#4]
;;;356                        if (err_code == NRF_ERROR_STORAGE_FULL)
00018a  2e86              CMP      r6,#0x86
00018c  d103              BNE      |L8.406|
;;;357                        {
;;;358                            event.evt_id = PDB_EVT_ERROR_NO_MEM;
00018e  2008              MOVS     r0,#8
000190  4669              MOV      r1,sp
000192  7008              STRB     r0,[r1,#0]
000194  e003              B        |L8.414|
                  |L8.406|
;;;359                        }
;;;360                        else
;;;361                        {
;;;362                            event.evt_id                           = PDB_EVT_ERROR_UNEXPECTED;
000196  2009              MOVS     r0,#9
000198  4669              MOV      r1,sp
00019a  7008              STRB     r0,[r1,#0]
;;;363                            event.params.error_unexpected.err_code = err_code;
00019c  9602              STR      r6,[sp,#8]
                  |L8.414|
;;;364                        }
;;;365    
;;;366                        pdb_evt_send(&event);
00019e  4668              MOV      r0,sp
0001a0  f7fffffe          BL       pdb_evt_send
;;;367                        break;
0001a4  e002              B        |L8.428|
                  |L8.422|
0001a6  1c7f              ADDS     r7,r7,#1              ;345
                  |L8.424|
0001a8  2f08              CMP      r7,#8                 ;345
0001aa  d3c0              BCC      |L8.302|
                  |L8.428|
0001ac  bf00              NOP      
                  |L8.430|
;;;368                    }
;;;369                }
;;;370            }
;;;371        }
;;;372    }
0001ae  b005              ADD      sp,sp,#0x14
0001b0  bdf0              POP      {r4-r7,pc}
;;;373    
                          ENDP

0001b2  0000              DCW      0x0000
                  |L8.436|
                          DCD      m_n_writes
                  |L8.440|
                          DCD      m_write_buffer_records

                          AREA ||i.pdb_peer_allocate||, CODE, READONLY, ALIGN=1

                  pdb_peer_allocate PROC
;;;395    
;;;396    pm_peer_id_t pdb_peer_allocate(void)
000000  b510              PUSH     {r4,lr}
;;;397    {
;;;398        #if 0
;;;399        if (!MODULE_INITIALIZED)
;;;400        {
;;;401            return PM_PEER_ID_INVALID;
;;;402        }
;;;403        #endif
;;;404    
;;;405        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;406        return pds_peer_id_allocate();
000002  f7fffffe          BL       pds_peer_id_allocate
;;;407    }
000006  bd10              POP      {r4,pc}
;;;408    
                          ENDP


                          AREA ||i.pdb_peer_data_load||, CODE, READONLY, ALIGN=1

                  pdb_peer_data_load PROC
;;;763    
;;;764    ret_code_t pdb_peer_data_load(pm_peer_id_t              peer_id,
000000  b5f8              PUSH     {r3-r7,lr}
;;;765                                  pm_peer_data_id_t         data_id,
;;;766                                  pm_peer_data_t    * const p_peer_data)
;;;767    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;768        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;769        NRF_PM_DEBUG_CHECK(p_peer_data != NULL);
;;;770    
;;;771        // Provide the buffer length in bytes.
;;;772        uint32_t const data_len_bytes = (p_peer_data->length_words * sizeof(uint32_t));
000008  8820              LDRH     r0,[r4,#0]
00000a  0080              LSLS     r0,r0,#2
00000c  9000              STR      r0,[sp,#0]
;;;773        return pds_peer_data_read(peer_id, data_id, p_peer_data, &data_len_bytes);
00000e  466b              MOV      r3,sp
000010  4622              MOV      r2,r4
000012  4631              MOV      r1,r6
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       pds_peer_data_read
;;;774    }
00001a  bdf8              POP      {r3-r7,pc}
;;;775    
                          ENDP


                          AREA ||i.pdb_peer_data_ptr_get||, CODE, READONLY, ALIGN=1

                  pdb_peer_data_ptr_get PROC
;;;455    
;;;456    ret_code_t pdb_peer_data_ptr_get(pm_peer_id_t                 peer_id,
000000  b570              PUSH     {r4-r6,lr}
;;;457                                     pm_peer_data_id_t            data_id,
;;;458                                     pm_peer_data_flash_t * const p_peer_data)
;;;459    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;460        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;461        NRF_PM_DEBUG_CHECK(p_peer_data != NULL);
;;;462    
;;;463        // Pass NULL to only retrieve a pointer.
;;;464        return pds_peer_data_read(peer_id, data_id, (pm_peer_data_t*)p_peer_data, NULL);
000008  2300              MOVS     r3,#0
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       pds_peer_data_read
;;;465    }
000014  bd70              POP      {r4-r6,pc}
;;;466    
                          ENDP


                          AREA ||i.pdb_peer_free||, CODE, READONLY, ALIGN=1

                  pdb_peer_free PROC
;;;409    
;;;410    ret_code_t pdb_peer_free(pm_peer_id_t peer_id)
000000  b5f8              PUSH     {r3-r7,lr}
;;;411    {
000002  4607              MOV      r7,r0
;;;412        ret_code_t err_code_in  = NRF_SUCCESS;
000004  2400              MOVS     r4,#0
;;;413        ret_code_t err_code_out = NRF_SUCCESS;
000006  2500              MOVS     r5,#0
;;;414    
;;;415        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;416    
;;;417        int index = 0;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;418        pdb_buffer_record_t * p_record = write_buffer_record_find_next(peer_id, &index);
00000c  4669              MOV      r1,sp
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       write_buffer_record_find_next
000014  4606              MOV      r6,r0
;;;419    
;;;420        while (p_record != NULL)
000016  e011              B        |L12.60|
                  |L12.24|
;;;421        {
;;;422            err_code_in = pdb_write_buf_release(peer_id, p_record->data_id);
000018  78b1              LDRB     r1,[r6,#2]
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       pdb_write_buf_release
000020  4604              MOV      r4,r0
;;;423    
;;;424            if (   (err_code_in != NRF_SUCCESS)
000022  2c00              CMP      r4,#0
000024  d002              BEQ      |L12.44|
;;;425                && (err_code_in != NRF_ERROR_NOT_FOUND))
000026  2c05              CMP      r4,#5
000028  d000              BEQ      |L12.44|
;;;426            {
;;;427                err_code_out = NRF_ERROR_INTERNAL;
00002a  2503              MOVS     r5,#3
                  |L12.44|
;;;428            }
;;;429    
;;;430            index++;
00002c  9800              LDR      r0,[sp,#0]
00002e  1c40              ADDS     r0,r0,#1
000030  9000              STR      r0,[sp,#0]
;;;431            p_record = write_buffer_record_find_next(peer_id, &index);
000032  4669              MOV      r1,sp
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       write_buffer_record_find_next
00003a  4606              MOV      r6,r0
                  |L12.60|
00003c  2e00              CMP      r6,#0                 ;420
00003e  d1eb              BNE      |L12.24|
;;;432        }
;;;433    
;;;434        if (err_code_out == NRF_SUCCESS)
000040  2d00              CMP      r5,#0
000042  d10a              BNE      |L12.90|
;;;435        {
;;;436            err_code_in = pds_peer_id_free(peer_id);
000044  4638              MOV      r0,r7
000046  f7fffffe          BL       pds_peer_id_free
00004a  4604              MOV      r4,r0
;;;437    
;;;438            if (err_code_in == NRF_SUCCESS)
00004c  2c00              CMP      r4,#0
00004e  d004              BEQ      |L12.90|
;;;439            {
;;;440                // No action needed.
;;;441            }
;;;442            else if (err_code_in == NRF_ERROR_INVALID_PARAM)
000050  2c07              CMP      r4,#7
000052  d101              BNE      |L12.88|
;;;443            {
;;;444                err_code_out = NRF_ERROR_INVALID_PARAM;
000054  2507              MOVS     r5,#7
000056  e000              B        |L12.90|
                  |L12.88|
;;;445            }
;;;446            else
;;;447            {
;;;448                err_code_out = NRF_ERROR_INTERNAL;
000058  2503              MOVS     r5,#3
                  |L12.90|
;;;449            }
;;;450        }
;;;451    
;;;452        return err_code_out;
00005a  4628              MOV      r0,r5
;;;453    }
00005c  bdf8              POP      {r3-r7,pc}
;;;454    
                          ENDP


                          AREA ||i.pdb_raw_store||, CODE, READONLY, ALIGN=1

                  pdb_raw_store PROC
;;;776    
;;;777    ret_code_t pdb_raw_store(pm_peer_id_t           peer_id,
000000  b570              PUSH     {r4-r6,lr}
;;;778                             pm_peer_data_const_t * p_peer_data,
;;;779                             pm_store_token_t     * p_store_token)
;;;780    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;781        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;782        return pds_peer_data_store(peer_id, p_peer_data, PDS_PREPARE_TOKEN_INVALID, p_store_token);
000008  4623              MOV      r3,r4
00000a  2200              MOVS     r2,#0
00000c  4631              MOV      r1,r6
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       pds_peer_data_store
;;;783    }
000014  bd70              POP      {r4-r6,pc}
;;;784    #endif // NRF_MODULE_ENABLED(PEER_MANAGER)
                          ENDP


                          AREA ||i.pdb_write_buf_get||, CODE, READONLY, ALIGN=2

                  pdb_write_buf_get PROC
;;;506    
;;;507    ret_code_t pdb_write_buf_get(pm_peer_id_t       peer_id,
000000  b5ff              PUSH     {r0-r7,lr}
;;;508                                 pm_peer_data_id_t  data_id,
;;;509                                 uint32_t           n_bufs,
;;;510                                 pm_peer_data_t   * p_peer_data)
;;;511    {
000002  b083              SUB      sp,sp,#0xc
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
000008  461e              MOV      r6,r3
;;;512        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;513    
;;;514        VERIFY_PARAM_NOT_NULL(p_peer_data);
00000a  bf00              NOP      
00000c  2e00              CMP      r6,#0
00000e  d102              BNE      |L14.22|
000010  200e              MOVS     r0,#0xe
                  |L14.18|
;;;515        VERIFY_DATA_ID_WRITE_BUF(data_id);
;;;516    
;;;517        if (   (n_bufs == 0)
;;;518            || (n_bufs > N_WRITE_BUFFERS)
;;;519            || !pds_peer_id_is_allocated(peer_id))
;;;520        {
;;;521            return NRF_ERROR_INVALID_PARAM;
;;;522        }
;;;523    
;;;524        pdb_buffer_record_t * write_buffer_record;
;;;525        uint8_t             * p_buffer_memory;
;;;526        bool                  new_record = false;
;;;527    
;;;528        write_buffer_record = write_buffer_record_find(peer_id, data_id);
;;;529    
;;;530        if ((write_buffer_record != NULL) && (write_buffer_record->n_bufs < n_bufs))
;;;531        {
;;;532            // @TODO: Copy?
;;;533            // Existing buffer is too small.
;;;534            for (uint8_t i = 0; i < write_buffer_record->n_bufs; i++)
;;;535            {
;;;536                pm_buffer_release(&m_write_buffer, write_buffer_record->buffer_block_id + i);
;;;537            }
;;;538            write_buffer_record_invalidate(write_buffer_record);
;;;539            write_buffer_record = NULL;
;;;540        }
;;;541        else if ((write_buffer_record != NULL) && write_buffer_record->n_bufs > n_bufs)
;;;542        {
;;;543            // Release excess blocks.
;;;544            for (uint8_t i = n_bufs; i < write_buffer_record->n_bufs; i++)
;;;545            {
;;;546                pm_buffer_release(&m_write_buffer, write_buffer_record->buffer_block_id + i);
;;;547            }
;;;548        }
;;;549    
;;;550        if (write_buffer_record == NULL)
;;;551        {
;;;552            write_buffer_record_get(&write_buffer_record, peer_id, data_id);
;;;553            if (write_buffer_record == NULL)
;;;554            {
;;;555                return NRF_ERROR_BUSY;
;;;556            }
;;;557        }
;;;558    
;;;559        if (write_buffer_record->buffer_block_id == PM_BUFFER_INVALID_ID)
;;;560        {
;;;561            write_buffer_record->buffer_block_id = pm_buffer_block_acquire(&m_write_buffer, n_bufs);
;;;562    
;;;563            if (write_buffer_record->buffer_block_id == PM_BUFFER_INVALID_ID)
;;;564            {
;;;565                write_buffer_record_invalidate(write_buffer_record);
;;;566                return NRF_ERROR_BUSY;
;;;567            }
;;;568    
;;;569            new_record = true;
;;;570        }
;;;571    
;;;572        write_buffer_record->n_bufs = n_bufs;
;;;573    
;;;574        p_buffer_memory = pm_buffer_ptr_get(&m_write_buffer, write_buffer_record->buffer_block_id);
;;;575    
;;;576        if (p_buffer_memory == NULL)
;;;577        {
;;;578            return NRF_ERROR_INTERNAL;
;;;579        }
;;;580    
;;;581        peer_data_point_to_buffer(p_peer_data, data_id, p_buffer_memory, n_bufs);
;;;582        if (new_record && (data_id == PM_PEER_DATA_ID_GATT_LOCAL))
;;;583        {
;;;584            p_peer_data->p_local_gatt_db->len = PM_LOCAL_DB_LEN(p_peer_data->length_words);
;;;585        }
;;;586    
;;;587        return NRF_SUCCESS;
;;;588    }
000012  b007              ADD      sp,sp,#0x1c
000014  bdf0              POP      {r4-r7,pc}
                  |L14.22|
000016  bf00              NOP                            ;514
000018  bf00              NOP                            ;515
00001a  2d07              CMP      r5,#7                 ;515
00001c  d003              BEQ      |L14.38|
00001e  2d08              CMP      r5,#8                 ;515
000020  d001              BEQ      |L14.38|
000022  2007              MOVS     r0,#7                 ;515
000024  e7f5              B        |L14.18|
                  |L14.38|
000026  bf00              NOP                            ;515
000028  2c00              CMP      r4,#0                 ;517
00002a  d006              BEQ      |L14.58|
00002c  2c08              CMP      r4,#8                 ;518
00002e  d804              BHI      |L14.58|
000030  9803              LDR      r0,[sp,#0xc]          ;519
000032  f7fffffe          BL       pds_peer_id_is_allocated
000036  2800              CMP      r0,#0                 ;519
000038  d101              BNE      |L14.62|
                  |L14.58|
00003a  2007              MOVS     r0,#7                 ;521
00003c  e7e9              B        |L14.18|
                  |L14.62|
00003e  2000              MOVS     r0,#0                 ;526
000040  9001              STR      r0,[sp,#4]            ;526
000042  4629              MOV      r1,r5                 ;528
000044  9803              LDR      r0,[sp,#0xc]          ;528
000046  f7fffffe          BL       write_buffer_record_find
00004a  9002              STR      r0,[sp,#8]            ;528
00004c  9802              LDR      r0,[sp,#8]            ;530
00004e  2800              CMP      r0,#0                 ;530
000050  d01d              BEQ      |L14.142|
000052  9802              LDR      r0,[sp,#8]            ;530
000054  68c0              LDR      r0,[r0,#0xc]          ;530
000056  42a0              CMP      r0,r4                 ;530
000058  d219              BCS      |L14.142|
00005a  2000              MOVS     r0,#0                 ;534
00005c  9000              STR      r0,[sp,#0]            ;534
00005e  e00b              B        |L14.120|
                  |L14.96|
000060  9802              LDR      r0,[sp,#8]            ;536
000062  7c02              LDRB     r2,[r0,#0x10]         ;536
000064  9800              LDR      r0,[sp,#0]            ;536
000066  1810              ADDS     r0,r2,r0              ;536
000068  b2c1              UXTB     r1,r0                 ;536
00006a  4836              LDR      r0,|L14.324|
00006c  f7fffffe          BL       pm_buffer_release
000070  9800              LDR      r0,[sp,#0]            ;534
000072  1c40              ADDS     r0,r0,#1              ;534
000074  b2c0              UXTB     r0,r0                 ;534
000076  9000              STR      r0,[sp,#0]            ;534
                  |L14.120|
000078  9802              LDR      r0,[sp,#8]            ;534
00007a  68c1              LDR      r1,[r0,#0xc]          ;534
00007c  9800              LDR      r0,[sp,#0]            ;534
00007e  4281              CMP      r1,r0                 ;534
000080  d8ee              BHI      |L14.96|
000082  9802              LDR      r0,[sp,#8]            ;538
000084  f7fffffe          BL       write_buffer_record_invalidate
000088  2000              MOVS     r0,#0                 ;539
00008a  9002              STR      r0,[sp,#8]            ;539
00008c  e01a              B        |L14.196|
                  |L14.142|
00008e  9802              LDR      r0,[sp,#8]            ;541
000090  2800              CMP      r0,#0                 ;541
000092  d017              BEQ      |L14.196|
000094  9802              LDR      r0,[sp,#8]            ;541
000096  68c0              LDR      r0,[r0,#0xc]          ;541
000098  42a0              CMP      r0,r4                 ;541
00009a  d913              BLS      |L14.196|
00009c  b2e0              UXTB     r0,r4                 ;544
00009e  9000              STR      r0,[sp,#0]            ;544
0000a0  e00b              B        |L14.186|
                  |L14.162|
0000a2  9802              LDR      r0,[sp,#8]            ;546
0000a4  7c02              LDRB     r2,[r0,#0x10]         ;546
0000a6  9800              LDR      r0,[sp,#0]            ;546
0000a8  1810              ADDS     r0,r2,r0              ;546
0000aa  b2c1              UXTB     r1,r0                 ;546
0000ac  4825              LDR      r0,|L14.324|
0000ae  f7fffffe          BL       pm_buffer_release
0000b2  9800              LDR      r0,[sp,#0]            ;544
0000b4  1c40              ADDS     r0,r0,#1              ;544
0000b6  b2c0              UXTB     r0,r0                 ;544
0000b8  9000              STR      r0,[sp,#0]            ;544
                  |L14.186|
0000ba  9802              LDR      r0,[sp,#8]            ;544
0000bc  68c1              LDR      r1,[r0,#0xc]          ;544
0000be  9800              LDR      r0,[sp,#0]            ;544
0000c0  4281              CMP      r1,r0                 ;544
0000c2  d8ee              BHI      |L14.162|
                  |L14.196|
0000c4  9802              LDR      r0,[sp,#8]            ;550
0000c6  2800              CMP      r0,#0                 ;550
0000c8  d109              BNE      |L14.222|
0000ca  462a              MOV      r2,r5                 ;552
0000cc  a802              ADD      r0,sp,#8              ;552
0000ce  9903              LDR      r1,[sp,#0xc]          ;552
0000d0  f7fffffe          BL       write_buffer_record_get
0000d4  9802              LDR      r0,[sp,#8]            ;553
0000d6  2800              CMP      r0,#0                 ;553
0000d8  d101              BNE      |L14.222|
0000da  2011              MOVS     r0,#0x11              ;555
0000dc  e799              B        |L14.18|
                  |L14.222|
0000de  9802              LDR      r0,[sp,#8]            ;559
0000e0  7c00              LDRB     r0,[r0,#0x10]         ;559
0000e2  28ff              CMP      r0,#0xff              ;559
0000e4  d110              BNE      |L14.264|
0000e6  4621              MOV      r1,r4                 ;561
0000e8  4816              LDR      r0,|L14.324|
0000ea  f7fffffe          BL       pm_buffer_block_acquire
0000ee  9902              LDR      r1,[sp,#8]            ;561
0000f0  7408              STRB     r0,[r1,#0x10]         ;561
0000f2  9802              LDR      r0,[sp,#8]            ;563
0000f4  7c00              LDRB     r0,[r0,#0x10]         ;563
0000f6  28ff              CMP      r0,#0xff              ;563
0000f8  d104              BNE      |L14.260|
0000fa  9802              LDR      r0,[sp,#8]            ;565
0000fc  f7fffffe          BL       write_buffer_record_invalidate
000100  2011              MOVS     r0,#0x11              ;566
000102  e786              B        |L14.18|
                  |L14.260|
000104  2001              MOVS     r0,#1                 ;569
000106  9001              STR      r0,[sp,#4]            ;569
                  |L14.264|
000108  9802              LDR      r0,[sp,#8]            ;572
00010a  60c4              STR      r4,[r0,#0xc]          ;572
00010c  9802              LDR      r0,[sp,#8]            ;574
00010e  7c01              LDRB     r1,[r0,#0x10]         ;574
000110  480c              LDR      r0,|L14.324|
000112  f7fffffe          BL       pm_buffer_ptr_get
000116  4607              MOV      r7,r0                 ;574
000118  2f00              CMP      r7,#0                 ;576
00011a  d101              BNE      |L14.288|
00011c  2003              MOVS     r0,#3                 ;578
00011e  e778              B        |L14.18|
                  |L14.288|
000120  b2a3              UXTH     r3,r4                 ;581
000122  463a              MOV      r2,r7                 ;581
000124  4629              MOV      r1,r5                 ;581
000126  4630              MOV      r0,r6                 ;581
000128  f7fffffe          BL       peer_data_point_to_buffer
00012c  9801              LDR      r0,[sp,#4]            ;582
00012e  2800              CMP      r0,#0                 ;582
000130  d006              BEQ      |L14.320|
000132  2d08              CMP      r5,#8                 ;582
000134  d104              BNE      |L14.320|
000136  8830              LDRH     r0,[r6,#0]            ;584
000138  0080              LSLS     r0,r0,#2              ;584
00013a  1f80              SUBS     r0,r0,#6              ;584
00013c  6871              LDR      r1,[r6,#4]            ;584
00013e  8088              STRH     r0,[r1,#4]            ;584
                  |L14.320|
000140  2000              MOVS     r0,#0                 ;587
000142  e766              B        |L14.18|
;;;589    
                          ENDP

                  |L14.324|
                          DCD      m_write_buffer

                          AREA ||i.pdb_write_buf_release||, CODE, READONLY, ALIGN=1

                  pdb_write_buf_release PROC
;;;590    
;;;591    ret_code_t pdb_write_buf_release(pm_peer_id_t peer_id, pm_peer_data_id_t data_id)
000000  b5f8              PUSH     {r3-r7,lr}
;;;592    {
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
;;;593        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;594    
;;;595        ret_code_t            err_code = NRF_SUCCESS;
000006  2500              MOVS     r5,#0
;;;596        pdb_buffer_record_t * p_write_buffer_record;
;;;597        p_write_buffer_record = write_buffer_record_find(peer_id, data_id);
000008  4639              MOV      r1,r7
00000a  4630              MOV      r0,r6
00000c  f7fffffe          BL       write_buffer_record_find
000010  4604              MOV      r4,r0
;;;598    
;;;599        if (p_write_buffer_record == NULL)
000012  2c00              CMP      r4,#0
000014  d101              BNE      |L15.26|
;;;600        {
;;;601            return NRF_ERROR_NOT_FOUND;
000016  2005              MOVS     r0,#5
                  |L15.24|
;;;602        }
;;;603    
;;;604        if (p_write_buffer_record->prepare_token != PDS_PREPARE_TOKEN_INVALID)
;;;605        {
;;;606            err_code = pds_space_reserve_cancel(p_write_buffer_record->prepare_token);
;;;607            if (err_code != NRF_SUCCESS)
;;;608            {
;;;609                err_code = NRF_ERROR_INTERNAL;
;;;610            }
;;;611        }
;;;612    
;;;613        write_buffer_record_release(p_write_buffer_record);
;;;614    
;;;615        return err_code;
;;;616    }
000018  bdf8              POP      {r3-r7,pc}
                  |L15.26|
00001a  6860              LDR      r0,[r4,#4]            ;604
00001c  2800              CMP      r0,#0                 ;604
00001e  d006              BEQ      |L15.46|
000020  6860              LDR      r0,[r4,#4]            ;606
000022  f7fffffe          BL       pds_space_reserve_cancel
000026  4605              MOV      r5,r0                 ;606
000028  2d00              CMP      r5,#0                 ;607
00002a  d000              BEQ      |L15.46|
00002c  2503              MOVS     r5,#3                 ;609
                  |L15.46|
00002e  4620              MOV      r0,r4                 ;613
000030  f7fffffe          BL       write_buffer_record_release
000034  4628              MOV      r0,r5                 ;615
000036  e7ef              B        |L15.24|
;;;617    
                          ENDP


                          AREA ||i.pdb_write_buf_store||, CODE, READONLY, ALIGN=2

                  pdb_write_buf_store PROC
;;;658    
;;;659    ret_code_t pdb_write_buf_store(pm_peer_id_t      peer_id,
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;660                                   pm_peer_data_id_t data_id)
;;;661    {
000002  b083              SUB      sp,sp,#0xc
000004  460e              MOV      r6,r1
;;;662        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;663    
;;;664        VERIFY_DATA_ID_WRITE_BUF(data_id);
000006  bf00              NOP      
000008  2e07              CMP      r6,#7
00000a  d004              BEQ      |L16.22|
00000c  2e08              CMP      r6,#8
00000e  d002              BEQ      |L16.22|
000010  2007              MOVS     r0,#7
                  |L16.18|
;;;665    
;;;666        ret_code_t            err_code = NRF_SUCCESS;
;;;667        pdb_buffer_record_t * p_write_buffer_record;
;;;668        uint8_t             * p_buffer_memory;
;;;669        pm_peer_data_const_t  peer_data = {.data_id = data_id};
;;;670    
;;;671    
;;;672        p_write_buffer_record = write_buffer_record_find(peer_id, data_id);
;;;673    
;;;674        if (p_write_buffer_record == NULL)
;;;675        {
;;;676            return NRF_ERROR_NOT_FOUND;
;;;677        }
;;;678    
;;;679        if (p_write_buffer_record->store_requested)
;;;680        {
;;;681            return NRF_SUCCESS;
;;;682        }
;;;683    
;;;684        p_buffer_memory = pm_buffer_ptr_get(&m_write_buffer, p_write_buffer_record->buffer_block_id);
;;;685    
;;;686        if (p_buffer_memory == NULL)
;;;687        {
;;;688            return NRF_ERROR_INTERNAL;
;;;689        }
;;;690    
;;;691        peer_data_const_point_to_buffer(&peer_data, data_id, p_buffer_memory, p_write_buffer_record->n_bufs);
;;;692    
;;;693        write_buf_length_words_set(&peer_data);
;;;694    
;;;695        err_code = pds_peer_data_store(peer_id,
;;;696                                       &peer_data,
;;;697                                       p_write_buffer_record->prepare_token,
;;;698                                       &p_write_buffer_record->store_token);
;;;699    
;;;700        if (p_write_buffer_record->store_busy && p_write_buffer_record->store_flash_full)
;;;701        {
;;;702            m_n_writes--;
;;;703        }
;;;704    
;;;705        if (err_code == NRF_SUCCESS)
;;;706        {
;;;707            p_write_buffer_record->store_requested  = true;
;;;708            p_write_buffer_record->store_busy       = false;
;;;709            p_write_buffer_record->store_flash_full = false;
;;;710        }
;;;711        else
;;;712        {
;;;713            if (err_code == NRF_ERROR_BUSY)
;;;714            {
;;;715                m_n_writes++;
;;;716                p_write_buffer_record->store_busy       = true;
;;;717                p_write_buffer_record->store_flash_full = false;
;;;718                err_code = NRF_SUCCESS;
;;;719            }
;;;720            else if (err_code == NRF_ERROR_STORAGE_FULL)
;;;721            {
;;;722                m_n_writes++;
;;;723                p_write_buffer_record->store_busy       = false;
;;;724                p_write_buffer_record->store_flash_full = true;
;;;725            }
;;;726            else if (err_code != NRF_ERROR_INVALID_PARAM)
;;;727            {
;;;728                err_code = NRF_ERROR_INTERNAL;
;;;729            }
;;;730        }
;;;731    
;;;732        return err_code;
;;;733    }
000012  b005              ADD      sp,sp,#0x14
000014  bdf0              POP      {r4-r7,pc}
                  |L16.22|
000016  bf00              NOP                            ;664
000018  2500              MOVS     r5,#0                 ;666
00001a  2000              MOVS     r0,#0                 ;669
00001c  9001              STR      r0,[sp,#4]            ;669
00001e  9002              STR      r0,[sp,#8]            ;669
000020  4668              MOV      r0,sp                 ;669
000022  7186              STRB     r6,[r0,#6]            ;669
000024  4631              MOV      r1,r6                 ;672
000026  9803              LDR      r0,[sp,#0xc]          ;672
000028  f7fffffe          BL       write_buffer_record_find
00002c  4604              MOV      r4,r0                 ;672
00002e  2c00              CMP      r4,#0                 ;674
000030  d101              BNE      |L16.54|
000032  2005              MOVS     r0,#5                 ;676
000034  e7ed              B        |L16.18|
                  |L16.54|
000036  7c60              LDRB     r0,[r4,#0x11]         ;679
000038  07c0              LSLS     r0,r0,#31             ;679
00003a  0fc0              LSRS     r0,r0,#31             ;679
00003c  2800              CMP      r0,#0                 ;679
00003e  d001              BEQ      |L16.68|
000040  2000              MOVS     r0,#0                 ;681
000042  e7e6              B        |L16.18|
                  |L16.68|
000044  7c21              LDRB     r1,[r4,#0x10]         ;684
000046  4830              LDR      r0,|L16.264|
000048  f7fffffe          BL       pm_buffer_ptr_get
00004c  4607              MOV      r7,r0                 ;684
00004e  2f00              CMP      r7,#0                 ;686
000050  d101              BNE      |L16.86|
000052  2003              MOVS     r0,#3                 ;688
000054  e7dd              B        |L16.18|
                  |L16.86|
000056  463a              MOV      r2,r7                 ;691
000058  4631              MOV      r1,r6                 ;691
00005a  a801              ADD      r0,sp,#4              ;691
00005c  68e3              LDR      r3,[r4,#0xc]          ;691
00005e  f7fffffe          BL       peer_data_const_point_to_buffer
000062  a801              ADD      r0,sp,#4              ;693
000064  f7fffffe          BL       write_buf_length_words_set
000068  4623              MOV      r3,r4                 ;695
00006a  3308              ADDS     r3,r3,#8              ;695
00006c  a901              ADD      r1,sp,#4              ;695
00006e  6862              LDR      r2,[r4,#4]            ;695
000070  9803              LDR      r0,[sp,#0xc]          ;695
000072  f7fffffe          BL       pds_peer_data_store
000076  4605              MOV      r5,r0                 ;695
000078  7c60              LDRB     r0,[r4,#0x11]         ;700
00007a  0740              LSLS     r0,r0,#29             ;700
00007c  0fc0              LSRS     r0,r0,#31             ;700
00007e  2800              CMP      r0,#0                 ;700
000080  d009              BEQ      |L16.150|
000082  7c60              LDRB     r0,[r4,#0x11]         ;700
000084  0780              LSLS     r0,r0,#30             ;700
000086  0fc0              LSRS     r0,r0,#31             ;700
000088  2800              CMP      r0,#0                 ;700
00008a  d004              BEQ      |L16.150|
00008c  481f              LDR      r0,|L16.268|
00008e  6800              LDR      r0,[r0,#0]            ;702  ; m_n_writes
000090  1e40              SUBS     r0,r0,#1              ;702
000092  491e              LDR      r1,|L16.268|
000094  6008              STR      r0,[r1,#0]            ;702  ; m_n_writes
                  |L16.150|
000096  2d00              CMP      r5,#0                 ;705
000098  d10d              BNE      |L16.182|
00009a  7c60              LDRB     r0,[r4,#0x11]         ;707
00009c  0840              LSRS     r0,r0,#1              ;707
00009e  0040              LSLS     r0,r0,#1              ;707
0000a0  1c40              ADDS     r0,r0,#1              ;707
0000a2  7460              STRB     r0,[r4,#0x11]         ;707
0000a4  7c60              LDRB     r0,[r4,#0x11]         ;708
0000a6  2104              MOVS     r1,#4                 ;708
0000a8  4388              BICS     r0,r0,r1              ;708
0000aa  7460              STRB     r0,[r4,#0x11]         ;708
0000ac  7c60              LDRB     r0,[r4,#0x11]         ;709
0000ae  2102              MOVS     r1,#2                 ;709
0000b0  4388              BICS     r0,r0,r1              ;709
0000b2  7460              STRB     r0,[r4,#0x11]         ;709
0000b4  e025              B        |L16.258|
                  |L16.182|
0000b6  2d11              CMP      r5,#0x11              ;713
0000b8  d10f              BNE      |L16.218|
0000ba  4814              LDR      r0,|L16.268|
0000bc  6800              LDR      r0,[r0,#0]            ;715  ; m_n_writes
0000be  1c40              ADDS     r0,r0,#1              ;715
0000c0  4912              LDR      r1,|L16.268|
0000c2  6008              STR      r0,[r1,#0]            ;715  ; m_n_writes
0000c4  7c60              LDRB     r0,[r4,#0x11]         ;716
0000c6  2104              MOVS     r1,#4                 ;716
0000c8  4388              BICS     r0,r0,r1              ;716
0000ca  1d00              ADDS     r0,r0,#4              ;716
0000cc  7460              STRB     r0,[r4,#0x11]         ;716
0000ce  7c60              LDRB     r0,[r4,#0x11]         ;717
0000d0  2102              MOVS     r1,#2                 ;717
0000d2  4388              BICS     r0,r0,r1              ;717
0000d4  7460              STRB     r0,[r4,#0x11]         ;717
0000d6  2500              MOVS     r5,#0                 ;718
0000d8  e013              B        |L16.258|
                  |L16.218|
0000da  2d86              CMP      r5,#0x86              ;720
0000dc  d10e              BNE      |L16.252|
0000de  480b              LDR      r0,|L16.268|
0000e0  6800              LDR      r0,[r0,#0]            ;722  ; m_n_writes
0000e2  1c40              ADDS     r0,r0,#1              ;722
0000e4  4909              LDR      r1,|L16.268|
0000e6  6008              STR      r0,[r1,#0]            ;722  ; m_n_writes
0000e8  7c60              LDRB     r0,[r4,#0x11]         ;723
0000ea  2104              MOVS     r1,#4                 ;723
0000ec  4388              BICS     r0,r0,r1              ;723
0000ee  7460              STRB     r0,[r4,#0x11]         ;723
0000f0  7c60              LDRB     r0,[r4,#0x11]         ;724
0000f2  2102              MOVS     r1,#2                 ;724
0000f4  4388              BICS     r0,r0,r1              ;724
0000f6  1c80              ADDS     r0,r0,#2              ;724
0000f8  7460              STRB     r0,[r4,#0x11]         ;724
0000fa  e002              B        |L16.258|
                  |L16.252|
0000fc  2d07              CMP      r5,#7                 ;726
0000fe  d000              BEQ      |L16.258|
000100  2503              MOVS     r5,#3                 ;728
                  |L16.258|
000102  4628              MOV      r0,r5                 ;732
000104  e785              B        |L16.18|
;;;734    
                          ENDP

000106  0000              DCW      0x0000
                  |L16.264|
                          DCD      m_write_buffer
                  |L16.268|
                          DCD      m_n_writes

                          AREA ||i.pdb_write_buf_store_prepare||, CODE, READONLY, ALIGN=2

                  pdb_write_buf_store_prepare PROC
;;;618    
;;;619    ret_code_t pdb_write_buf_store_prepare(pm_peer_id_t peer_id, pm_peer_data_id_t data_id)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;620    {
000002  b083              SUB      sp,sp,#0xc
000004  460d              MOV      r5,r1
;;;621        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;622    
;;;623        VERIFY_DATA_ID_WRITE_BUF(data_id);
000006  bf00              NOP      
000008  2d07              CMP      r5,#7
00000a  d004              BEQ      |L17.22|
00000c  2d08              CMP      r5,#8
00000e  d002              BEQ      |L17.22|
000010  2007              MOVS     r0,#7
                  |L17.18|
;;;624    
;;;625        ret_code_t            err_code = NRF_SUCCESS;
;;;626        pdb_buffer_record_t * p_write_buffer_record;
;;;627        p_write_buffer_record = write_buffer_record_find(peer_id, data_id);
;;;628    
;;;629        if (p_write_buffer_record == NULL)
;;;630        {
;;;631            return NRF_ERROR_NOT_FOUND;
;;;632        }
;;;633    
;;;634        if (p_write_buffer_record->prepare_token == PDS_PREPARE_TOKEN_INVALID)
;;;635        {
;;;636            uint8_t * p_buffer_memory = pm_buffer_ptr_get(&m_write_buffer, p_write_buffer_record->buffer_block_id);
;;;637            pm_peer_data_const_t peer_data = {.data_id = data_id};
;;;638    
;;;639            if (p_buffer_memory == NULL)
;;;640            {
;;;641                return NRF_ERROR_INTERNAL;
;;;642            }
;;;643    
;;;644            peer_data_const_point_to_buffer(&peer_data, data_id, p_buffer_memory, p_write_buffer_record->n_bufs);
;;;645    
;;;646            write_buf_length_words_set(&peer_data);
;;;647    
;;;648            err_code = pds_space_reserve(&peer_data, &p_write_buffer_record->prepare_token);
;;;649            if (err_code == NRF_ERROR_INVALID_LENGTH)
;;;650            {
;;;651                return NRF_ERROR_INTERNAL;
;;;652            }
;;;653        }
;;;654    
;;;655        return err_code;
;;;656    }
000012  b005              ADD      sp,sp,#0x14
000014  bdf0              POP      {r4-r7,pc}
                  |L17.22|
000016  bf00              NOP                            ;623
000018  2600              MOVS     r6,#0                 ;625
00001a  4629              MOV      r1,r5                 ;627
00001c  9803              LDR      r0,[sp,#0xc]          ;627
00001e  f7fffffe          BL       write_buffer_record_find
000022  4604              MOV      r4,r0                 ;627
000024  2c00              CMP      r4,#0                 ;629
000026  d101              BNE      |L17.44|
000028  2005              MOVS     r0,#5                 ;631
00002a  e7f2              B        |L17.18|
                  |L17.44|
00002c  6860              LDR      r0,[r4,#4]            ;634
00002e  2800              CMP      r0,#0                 ;634
000030  d120              BNE      |L17.116|
000032  7c21              LDRB     r1,[r4,#0x10]         ;636
000034  4810              LDR      r0,|L17.120|
000036  f7fffffe          BL       pm_buffer_ptr_get
00003a  4607              MOV      r7,r0                 ;636
00003c  2000              MOVS     r0,#0                 ;637
00003e  9001              STR      r0,[sp,#4]            ;637
000040  9002              STR      r0,[sp,#8]            ;637
000042  4668              MOV      r0,sp                 ;637
000044  7185              STRB     r5,[r0,#6]            ;637
000046  2f00              CMP      r7,#0                 ;639
000048  d101              BNE      |L17.78|
00004a  2003              MOVS     r0,#3                 ;641
00004c  e7e1              B        |L17.18|
                  |L17.78|
00004e  463a              MOV      r2,r7                 ;644
000050  4629              MOV      r1,r5                 ;644
000052  a801              ADD      r0,sp,#4              ;644
000054  68e3              LDR      r3,[r4,#0xc]          ;644
000056  f7fffffe          BL       peer_data_const_point_to_buffer
00005a  a801              ADD      r0,sp,#4              ;646
00005c  f7fffffe          BL       write_buf_length_words_set
000060  1d21              ADDS     r1,r4,#4              ;648
000062  a801              ADD      r0,sp,#4              ;648
000064  f7fffffe          BL       pds_space_reserve
000068  4606              MOV      r6,r0                 ;648
00006a  2e09              CMP      r6,#9                 ;649
00006c  d101              BNE      |L17.114|
00006e  2003              MOVS     r0,#3                 ;651
000070  e7cf              B        |L17.18|
                  |L17.114|
000072  bf00              NOP                            ;653
                  |L17.116|
000074  4630              MOV      r0,r6                 ;655
000076  e7cc              B        |L17.18|
;;;657    
                          ENDP

                  |L17.120|
                          DCD      m_write_buffer

                          AREA ||i.peer_data_const_point_to_buffer||, CODE, READONLY, ALIGN=1

                  peer_data_const_point_to_buffer PROC
;;;477    
;;;478    static void peer_data_const_point_to_buffer(pm_peer_data_const_t * p_peer_data, pm_peer_data_id_t data_id,  uint8_t * p_buffer_memory, uint32_t n_bufs)
000000  b5f8              PUSH     {r3-r7,lr}
;;;479    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
000008  461c              MOV      r4,r3
;;;480        peer_data_point_to_buffer((pm_peer_data_t*)p_peer_data, data_id, p_buffer_memory, n_bufs);
00000a  b2a3              UXTH     r3,r4
00000c  463a              MOV      r2,r7
00000e  4631              MOV      r1,r6
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       peer_data_point_to_buffer
;;;481    }
000016  bdf8              POP      {r3-r7,pc}
;;;482    
                          ENDP


                          AREA ||i.peer_data_point_to_buffer||, CODE, READONLY, ALIGN=1

                  peer_data_point_to_buffer PROC
;;;467    
;;;468    static void peer_data_point_to_buffer(pm_peer_data_t * p_peer_data, pm_peer_data_id_t data_id, uint8_t * p_buffer_memory, uint16_t n_bufs)
000000  b530              PUSH     {r4,r5,lr}
;;;469    {
;;;470        uint16_t n_bytes = n_bufs * PDB_WRITE_BUF_SIZE;
000002  2550              MOVS     r5,#0x50
000004  435d              MULS     r5,r3,r5
000006  b2ac              UXTH     r4,r5
;;;471        p_peer_data->data_id    = data_id;
000008  7081              STRB     r1,[r0,#2]
;;;472    
;;;473        p_peer_data->p_all_data   = (pm_peer_data_bonding_t *)p_buffer_memory;
00000a  6042              STR      r2,[r0,#4]
;;;474        p_peer_data->length_words = BYTES_TO_WORDS(n_bytes);
00000c  1ce5              ADDS     r5,r4,#3
00000e  10ad              ASRS     r5,r5,#2
000010  8005              STRH     r5,[r0,#0]
;;;475    }
000012  bd30              POP      {r4,r5,pc}
;;;476    
                          ENDP


                          AREA ||i.write_buf_length_words_set||, CODE, READONLY, ALIGN=1

                  write_buf_length_words_set PROC
;;;483    
;;;484    static void write_buf_length_words_set(pm_peer_data_const_t * p_peer_data)
000000  7881              LDRB     r1,[r0,#2]
;;;485    {
;;;486        switch (p_peer_data->data_id)
000002  2901              CMP      r1,#1
000004  d009              BEQ      |L20.26|
000006  2906              CMP      r1,#6
000008  d00a              BEQ      |L20.32|
00000a  2907              CMP      r1,#7
00000c  d002              BEQ      |L20.20|
00000e  2908              CMP      r1,#8
000010  d10f              BNE      |L20.50|
000012  e008              B        |L20.38|
                  |L20.20|
;;;487        {
;;;488            case PM_PEER_DATA_ID_BONDING:
;;;489                p_peer_data->length_words = PM_BONDING_DATA_N_WORDS();
000014  2114              MOVS     r1,#0x14
000016  8001              STRH     r1,[r0,#0]
;;;490                break;
000018  e00c              B        |L20.52|
                  |L20.26|
;;;491            case PM_PEER_DATA_ID_SERVICE_CHANGED_PENDING:
;;;492                p_peer_data->length_words = PM_SC_STATE_N_WORDS();
00001a  2101              MOVS     r1,#1
00001c  8001              STRH     r1,[r0,#0]
;;;493                break;
00001e  e009              B        |L20.52|
                  |L20.32|
;;;494            case PM_PEER_DATA_ID_PEER_RANK:
;;;495                p_peer_data->length_words = PM_USAGE_INDEX_N_WORDS();
000020  2101              MOVS     r1,#1
000022  8001              STRH     r1,[r0,#0]
;;;496                break;
000024  e006              B        |L20.52|
                  |L20.38|
;;;497            case PM_PEER_DATA_ID_GATT_LOCAL:
;;;498                p_peer_data->length_words = PM_LOCAL_DB_N_WORDS(p_peer_data->p_local_gatt_db->len);
000026  6841              LDR      r1,[r0,#4]
000028  8889              LDRH     r1,[r1,#4]
00002a  3109              ADDS     r1,r1,#9
00002c  0889              LSRS     r1,r1,#2
00002e  8001              STRH     r1,[r0,#0]
;;;499                break;
000030  e000              B        |L20.52|
                  |L20.50|
;;;500            default:
;;;501                // No action needed.
;;;502                break;
000032  bf00              NOP      
                  |L20.52|
000034  bf00              NOP                            ;490
;;;503        }
;;;504    }
000036  4770              BX       lr
;;;505    
                          ENDP


                          AREA ||i.write_buffer_record_find||, CODE, READONLY, ALIGN=1

                  write_buffer_record_find PROC
;;;162     */
;;;163    static pdb_buffer_record_t * write_buffer_record_find(pm_peer_id_t      peer_id,
000000  b5f8              PUSH     {r3-r7,lr}
;;;164                                                          pm_peer_data_id_t data_id)
;;;165    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;166        int index = 0;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;167        pdb_buffer_record_t * p_record = write_buffer_record_find_next(peer_id, &index);
00000a  4669              MOV      r1,sp
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       write_buffer_record_find_next
000012  4604              MOV      r4,r0
;;;168    
;;;169        while ((p_record != NULL) && (p_record->data_id != data_id))
000014  e007              B        |L21.38|
                  |L21.22|
;;;170        {
;;;171            index++;
000016  9800              LDR      r0,[sp,#0]
000018  1c40              ADDS     r0,r0,#1
00001a  9000              STR      r0,[sp,#0]
;;;172            p_record = write_buffer_record_find_next(peer_id, &index);
00001c  4669              MOV      r1,sp
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       write_buffer_record_find_next
000024  4604              MOV      r4,r0
                  |L21.38|
000026  2c00              CMP      r4,#0                 ;169
000028  d002              BEQ      |L21.48|
00002a  78a0              LDRB     r0,[r4,#2]            ;169
00002c  42a8              CMP      r0,r5                 ;169
00002e  d1f2              BNE      |L21.22|
                  |L21.48|
;;;173        }
;;;174    
;;;175        return p_record;
000030  4620              MOV      r0,r4
;;;176    }
000032  bdf8              POP      {r3-r7,pc}
;;;177    
                          ENDP


                          AREA ||i.write_buffer_record_find_next||, CODE, READONLY, ALIGN=2

                  write_buffer_record_find_next PROC
;;;142     */
;;;143    static pdb_buffer_record_t * write_buffer_record_find_next(pm_peer_id_t peer_id, int * p_index)
000000  b510              PUSH     {r4,lr}
;;;144    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;145        for (uint32_t i = *p_index; i < N_WRITE_BUFFER_RECORDS; i++)
000006  6819              LDR      r1,[r3,#0]
000008  e00a              B        |L22.32|
                  |L22.10|
;;;146        {
;;;147            if ((m_write_buffer_records[i].peer_id == peer_id))
00000a  2014              MOVS     r0,#0x14
00000c  4348              MULS     r0,r1,r0
00000e  4c06              LDR      r4,|L22.40|
000010  5a20              LDRH     r0,[r4,r0]
000012  4290              CMP      r0,r2
000014  d103              BNE      |L22.30|
;;;148            {
;;;149                return &m_write_buffer_records[i];
000016  2014              MOVS     r0,#0x14
000018  4348              MULS     r0,r1,r0
00001a  1900              ADDS     r0,r0,r4
                  |L22.28|
;;;150            }
;;;151        }
;;;152        return NULL;
;;;153    }
00001c  bd10              POP      {r4,pc}
                  |L22.30|
00001e  1c49              ADDS     r1,r1,#1              ;145
                  |L22.32|
000020  2908              CMP      r1,#8                 ;145
000022  d3f2              BCC      |L22.10|
000024  2000              MOVS     r0,#0                 ;152
000026  e7f9              B        |L22.28|
;;;154    
                          ENDP

                  |L22.40|
                          DCD      m_write_buffer_records

                          AREA ||i.write_buffer_record_find_unused||, CODE, READONLY, ALIGN=2

                  write_buffer_record_find_unused PROC
;;;182     */
;;;183    static pdb_buffer_record_t * write_buffer_record_find_unused(void)
000000  b510              PUSH     {r4,lr}
;;;184    {
;;;185        return write_buffer_record_find(PM_PEER_ID_INVALID, PM_PEER_DATA_ID_INVALID);
000002  21ff              MOVS     r1,#0xff
000004  4801              LDR      r0,|L23.12|
000006  f7fffffe          BL       write_buffer_record_find
;;;186    }
00000a  bd10              POP      {r4,pc}
;;;187    
                          ENDP

                  |L23.12|
                          DCD      0x0000ffff

                          AREA ||i.write_buffer_record_get||, CODE, READONLY, ALIGN=1

                  write_buffer_record_get PROC
;;;213     */
;;;214    static void write_buffer_record_get(pdb_buffer_record_t ** pp_write_buffer_record, pm_peer_id_t peer_id, pm_peer_data_id_t data_id)
000000  b570              PUSH     {r4-r6,lr}
;;;215    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;216        if (pp_write_buffer_record == NULL)
000008  2c00              CMP      r4,#0
00000a  d100              BNE      |L24.14|
                  |L24.12|
;;;217        {
;;;218            return;
;;;219        }
;;;220        *pp_write_buffer_record = write_buffer_record_find_unused();
;;;221        if (*pp_write_buffer_record == NULL)
;;;222        {
;;;223            // This also means the buffer is full.
;;;224            return;
;;;225        }
;;;226        (*pp_write_buffer_record)->peer_id = peer_id;
;;;227        (*pp_write_buffer_record)->data_id = data_id;
;;;228    }
00000c  bd70              POP      {r4-r6,pc}
                  |L24.14|
00000e  f7fffffe          BL       write_buffer_record_find_unused
000012  6020              STR      r0,[r4,#0]            ;220
000014  6820              LDR      r0,[r4,#0]            ;221
000016  2800              CMP      r0,#0                 ;221
000018  d100              BNE      |L24.28|
00001a  e7f7              B        |L24.12|
                  |L24.28|
00001c  6820              LDR      r0,[r4,#0]            ;226
00001e  8005              STRH     r5,[r0,#0]            ;226
000020  6820              LDR      r0,[r4,#0]            ;227
000022  7086              STRB     r6,[r0,#2]            ;227
000024  bf00              NOP      
000026  e7f1              B        |L24.12|
;;;229    
                          ENDP


                          AREA ||i.write_buffer_record_invalidate||, CODE, READONLY, ALIGN=1

                  write_buffer_record_invalidate PROC
;;;121     */
;;;122    static void write_buffer_record_invalidate(pdb_buffer_record_t * p_record)
000000  2100              MOVS     r1,#0
;;;123    {
;;;124        p_record->peer_id          = PM_PEER_ID_INVALID;
000002  43c9              MVNS     r1,r1
000004  8001              STRH     r1,[r0,#0]
;;;125        p_record->data_id          = PM_PEER_DATA_ID_INVALID;
000006  21ff              MOVS     r1,#0xff
000008  7081              STRB     r1,[r0,#2]
;;;126        p_record->buffer_block_id  = PM_BUFFER_INVALID_ID;
00000a  7401              STRB     r1,[r0,#0x10]
;;;127        p_record->store_busy       = false;
00000c  7c41              LDRB     r1,[r0,#0x11]
00000e  2204              MOVS     r2,#4
000010  4391              BICS     r1,r1,r2
000012  7441              STRB     r1,[r0,#0x11]
;;;128        p_record->store_flash_full = false;
000014  7c41              LDRB     r1,[r0,#0x11]
000016  2202              MOVS     r2,#2
000018  4391              BICS     r1,r1,r2
00001a  7441              STRB     r1,[r0,#0x11]
;;;129        p_record->store_requested  = false;
00001c  7c41              LDRB     r1,[r0,#0x11]
00001e  0849              LSRS     r1,r1,#1
000020  0049              LSLS     r1,r1,#1
000022  7441              STRB     r1,[r0,#0x11]
;;;130        p_record->n_bufs           = 0;
000024  2100              MOVS     r1,#0
000026  60c1              STR      r1,[r0,#0xc]
;;;131        p_record->prepare_token    = PDS_PREPARE_TOKEN_INVALID;
000028  6041              STR      r1,[r0,#4]
;;;132        p_record->store_token      = PM_STORE_TOKEN_INVALID;
00002a  6081              STR      r1,[r0,#8]
;;;133    }
00002c  4770              BX       lr
;;;134    
                          ENDP


                          AREA ||i.write_buffer_record_release||, CODE, READONLY, ALIGN=2

                  write_buffer_record_release PROC
;;;196     */
;;;197    static void write_buffer_record_release(pdb_buffer_record_t * p_write_buffer_record)
000000  b570              PUSH     {r4-r6,lr}
;;;198    {
000002  4604              MOV      r4,r0
;;;199        for (uint32_t i = 0; i < p_write_buffer_record->n_bufs; i++)
000004  2500              MOVS     r5,#0
000006  e006              B        |L26.22|
                  |L26.8|
;;;200        {
;;;201            pm_buffer_release(&m_write_buffer, p_write_buffer_record->buffer_block_id + i);
000008  7c20              LDRB     r0,[r4,#0x10]
00000a  1940              ADDS     r0,r0,r5
00000c  b2c1              UXTB     r1,r0
00000e  4805              LDR      r0,|L26.36|
000010  f7fffffe          BL       pm_buffer_release
000014  1c6d              ADDS     r5,r5,#1              ;199
                  |L26.22|
000016  68e0              LDR      r0,[r4,#0xc]          ;199
000018  42a8              CMP      r0,r5                 ;199
00001a  d8f5              BHI      |L26.8|
;;;202        }
;;;203    
;;;204        write_buffer_record_invalidate(p_write_buffer_record);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       write_buffer_record_invalidate
;;;205    }
000022  bd70              POP      {r4-r6,pc}
;;;206    
                          ENDP

                  |L26.36|
                          DCD      m_write_buffer

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_write_buffer
                          %        16
                  m_write_buffer_records
                          %        160
                  buffer_memory
                          %        640

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  m_evt_handlers
                          DCD      pm_pdb_evt_handler
                          DCD      im_pdb_evt_handler
                          DCD      sm_pdb_evt_handler
                          DCD      smd_pdb_evt_handler
                          DCD      gscm_pdb_evt_handler

                          AREA ||.data||, DATA, ALIGN=2

                  m_module_initialized
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  m_n_writes
                          DCD      0x00000000
                  mutex_memory
000008  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L156.24|
                  |L156.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L156.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L156.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\peer_manager\\peer_database.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_peer_database_c_80556694____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.2.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_peer_database_c_80556694____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_peer_database_c_80556694____REVSH|
#line 144
|__asm___15_peer_database_c_80556694____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
