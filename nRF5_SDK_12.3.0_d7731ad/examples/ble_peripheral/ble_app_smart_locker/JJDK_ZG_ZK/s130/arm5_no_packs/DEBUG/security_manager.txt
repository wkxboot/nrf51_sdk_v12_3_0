; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\security_manager.o --asm_dir=.\DEBUG\ --list_dir=.\DEBUG\ --depend=.\debug\security_manager.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\power -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\usbd -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\gpiote -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\queue -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\sensorsim -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\usbd -I..\..\..\..\..\..\components\libraries\usbd\class\audio -I..\..\..\..\..\..\components\libraries\usbd\class\cdc -I..\..\..\..\..\..\components\libraries\usbd\class\cdc\acm -I..\..\..\..\..\..\components\libraries\usbd\class\hid -I..\..\..\..\..\..\components\libraries\usbd\class\hid\generic -I..\..\..\..\..\..\components\libraries\usbd\class\hid\kbd -I..\..\..\..\..\..\components\libraries\usbd\class\hid\mouse -I..\..\..\..\..\..\components\libraries\usbd\class\msc -I..\..\..\..\..\..\components\libraries\usbd\config -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s130\headers -I..\..\..\..\..\..\components\softdevice\s130\headers\nrf51 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_sls -ID:\development\nordic_ble\src_code\nrf51_sdk_v12_3_0\nRF5_SDK_12.3.0_d7731ad\examples\ble_peripheral\ble_app_smart_locker\JJDK_ZG_ZK\s130\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.11.1\Device\Include -D__MICROLIB -D_RTE_ -DNRF51 -DBLE_STACK_SUPPORT_REQD -DNRF51822 -DBOARD_JJDK_ZG_ZK -DNRF_SD_BLE_API_VERSION=2 -DS130 -DNRF51 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 --omf_browse=.\debug\security_manager.crf ..\..\..\..\..\..\components\ble\peer_manager\security_manager.c]
                          THUMB

                          AREA ||i.events_send_from_err_code||, CODE, READONLY, ALIGN=1

                  events_send_from_err_code PROC
;;;142    
;;;143    static void events_send_from_err_code(uint16_t conn_handle, ret_code_t err_code)
000000  b53e              PUSH     {r1-r5,lr}
;;;144    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;145         if ((err_code != NRF_SUCCESS) && (err_code != NRF_ERROR_BUSY))
000006  2c00              CMP      r4,#0
000008  d01b              BEQ      |L1.66|
00000a  2c11              CMP      r4,#0x11
00000c  d019              BEQ      |L1.66|
;;;146         {
;;;147            sm_evt_t evt =
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  9001              STR      r0,[sp,#4]
000014  9002              STR      r0,[sp,#8]
000016  4668              MOV      r0,sp
000018  8045              STRH     r5,[r0,#2]
00001a  9401              STR      r4,[sp,#4]
;;;148            {
;;;149                .conn_handle = conn_handle,
;;;150                .params = {.error_unexpected = {
;;;151                    .error = err_code
;;;152                }}
;;;153            };
;;;154            if (err_code == NRF_ERROR_TIMEOUT)
00001c  2c0d              CMP      r4,#0xd
00001e  d103              BNE      |L1.40|
;;;155            {
;;;156                evt.evt_id = SM_EVT_ERROR_SMP_TIMEOUT;
000020  200b              MOVS     r0,#0xb
000022  4669              MOV      r1,sp
000024  7008              STRB     r0,[r1,#0]
000026  e008              B        |L1.58|
                  |L1.40|
;;;157            }
;;;158            else if (err_code == NRF_ERROR_STORAGE_FULL)
000028  2c86              CMP      r4,#0x86
00002a  d103              BNE      |L1.52|
;;;159            {
;;;160                evt.evt_id = SM_EVT_ERROR_NO_MEM;
00002c  200a              MOVS     r0,#0xa
00002e  4669              MOV      r1,sp
000030  7008              STRB     r0,[r1,#0]
000032  e002              B        |L1.58|
                  |L1.52|
;;;161            }
;;;162            else
;;;163            {
;;;164                evt.evt_id = SM_EVT_ERROR_UNEXPECTED;
000034  2009              MOVS     r0,#9
000036  4669              MOV      r1,sp
000038  7008              STRB     r0,[r1,#0]
                  |L1.58|
;;;165            }
;;;166            evt_send(&evt);
00003a  4668              MOV      r0,sp
00003c  f7fffffe          BL       evt_send
;;;167         }
000040  bf00              NOP      
                  |L1.66|
;;;168    }
000042  bd3e              POP      {r1-r5,pc}
;;;169    
                          ENDP


                          AREA ||i.evt_send||, CODE, READONLY, ALIGN=2

                  evt_send PROC
;;;80     
;;;81     static void evt_send(sm_evt_t * p_event)
000000  b570              PUSH     {r4-r6,lr}
;;;82     {
000002  4605              MOV      r5,r0
;;;83         for (uint32_t i = 0; i < SM_EVENT_HANDLERS_CNT; i++)
000004  2400              MOVS     r4,#0
000006  e005              B        |L2.20|
                  |L2.8|
;;;84         {
;;;85             m_evt_handlers[i](p_event);
000008  00a0              LSLS     r0,r4,#2
00000a  4a04              LDR      r2,|L2.28|
00000c  5811              LDR      r1,[r2,r0]
00000e  4628              MOV      r0,r5
000010  4788              BLX      r1
000012  1c64              ADDS     r4,r4,#1              ;83
                  |L2.20|
000014  2c00              CMP      r4,#0                 ;83
000016  d0f7              BEQ      |L2.8|
;;;86         }
;;;87     }
000018  bd70              POP      {r4-r6,pc}
;;;88     
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      m_evt_handlers

                          AREA ||i.flag_id_init||, CODE, READONLY, ALIGN=1

                  flag_id_init PROC
;;;393     */
;;;394    static void flag_id_init(ble_conn_state_user_flag_id_t * p_flag_id)
000000  b510              PUSH     {r4,lr}
;;;395    {
000002  4604              MOV      r4,r0
;;;396        if (*p_flag_id == BLE_CONN_STATE_USER_FLAG_INVALID)
000004  7820              LDRB     r0,[r4,#0]
000006  2818              CMP      r0,#0x18
000008  d102              BNE      |L3.16|
;;;397        {
;;;398            *p_flag_id = ble_conn_state_user_flag_acquire();
00000a  f7fffffe          BL       ble_conn_state_user_flag_acquire
00000e  7020              STRB     r0,[r4,#0]
                  |L3.16|
;;;399        }
;;;400    }
000010  bd10              POP      {r4,pc}
;;;401    
                          ENDP


                          AREA ||i.flags_set_from_err_code||, CODE, READONLY, ALIGN=2

                  flags_set_from_err_code PROC
;;;89     
;;;90     static void flags_set_from_err_code(uint16_t conn_handle, ret_code_t err_code, bool params_reply)
000000  b5f8              PUSH     {r3-r7,lr}
;;;91     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;92         bool flag_value_flash_full = false;
000008  2700              MOVS     r7,#0
;;;93         bool flag_value_busy       = false;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;94     
;;;95         if (    (err_code == NRF_ERROR_STORAGE_FULL)
00000e  2c86              CMP      r4,#0x86
000010  d003              BEQ      |L4.26|
;;;96              || (err_code == NRF_ERROR_BUSY)
000012  2c11              CMP      r4,#0x11
000014  d001              BEQ      |L4.26|
;;;97              || (err_code == NRF_SUCCESS))
000016  2c00              CMP      r4,#0
000018  d137              BNE      |L4.138|
                  |L4.26|
;;;98         {
;;;99             if ((err_code == NRF_ERROR_STORAGE_FULL))
00001a  2c86              CMP      r4,#0x86
00001c  d103              BNE      |L4.38|
;;;100            {
;;;101                flag_value_busy       = false;
00001e  2000              MOVS     r0,#0
000020  9000              STR      r0,[sp,#0]
;;;102                flag_value_flash_full = true;
000022  2701              MOVS     r7,#1
000024  e00a              B        |L4.60|
                  |L4.38|
;;;103            }
;;;104            else if (err_code == NRF_ERROR_BUSY)
000026  2c11              CMP      r4,#0x11
000028  d103              BNE      |L4.50|
;;;105            {
;;;106                flag_value_busy       = true;
00002a  2001              MOVS     r0,#1
00002c  9000              STR      r0,[sp,#0]
;;;107                flag_value_flash_full = false;
00002e  2700              MOVS     r7,#0
000030  e004              B        |L4.60|
                  |L4.50|
;;;108            }
;;;109            else if (err_code == NRF_SUCCESS)
000032  2c00              CMP      r4,#0
000034  d102              BNE      |L4.60|
;;;110            {
;;;111                flag_value_busy       = false;
000036  2000              MOVS     r0,#0
000038  9000              STR      r0,[sp,#0]
;;;112                flag_value_flash_full = false;
00003a  2700              MOVS     r7,#0
                  |L4.60|
;;;113            }
;;;114    
;;;115            if (params_reply)
00003c  2d00              CMP      r5,#0
00003e  d018              BEQ      |L4.114|
;;;116            {
;;;117                ble_conn_state_user_flag_set(conn_handle,
000040  463a              MOV      r2,r7
000042  4812              LDR      r0,|L4.140|
000044  7801              LDRB     r1,[r0,#0]  ; m_flag_params_reply_pending_flash_full
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       ble_conn_state_user_flag_set
;;;118                                             m_flag_params_reply_pending_flash_full,
;;;119                                             flag_value_flash_full);
;;;120                ble_conn_state_user_flag_set(conn_handle,
00004c  4810              LDR      r0,|L4.144|
00004e  7801              LDRB     r1,[r0,#0]  ; m_flag_params_reply_pending_busy
000050  4630              MOV      r0,r6
000052  9a00              LDR      r2,[sp,#0]
000054  f7fffffe          BL       ble_conn_state_user_flag_set
;;;121                                             m_flag_params_reply_pending_busy,
;;;122                                             flag_value_busy);
;;;123                ble_conn_state_user_flag_set(conn_handle,
000058  2200              MOVS     r2,#0
00005a  480e              LDR      r0,|L4.148|
00005c  7801              LDRB     r1,[r0,#0]  ; m_flag_link_secure_pending_flash_full
00005e  4630              MOV      r0,r6
000060  f7fffffe          BL       ble_conn_state_user_flag_set
;;;124                                             m_flag_link_secure_pending_flash_full,
;;;125                                             false);
;;;126                ble_conn_state_user_flag_set(conn_handle,
000064  2200              MOVS     r2,#0
000066  480c              LDR      r0,|L4.152|
000068  7801              LDRB     r1,[r0,#0]  ; m_flag_link_secure_pending_busy
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       ble_conn_state_user_flag_set
000070  e00b              B        |L4.138|
                  |L4.114|
;;;127                                             m_flag_link_secure_pending_busy,
;;;128                                             false);
;;;129            }
;;;130            else
;;;131            {
;;;132                ble_conn_state_user_flag_set(conn_handle,
000072  463a              MOV      r2,r7
000074  4807              LDR      r0,|L4.148|
000076  7801              LDRB     r1,[r0,#0]  ; m_flag_link_secure_pending_flash_full
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       ble_conn_state_user_flag_set
;;;133                                             m_flag_link_secure_pending_flash_full,
;;;134                                             flag_value_flash_full);
;;;135                ble_conn_state_user_flag_set(conn_handle,
00007e  4806              LDR      r0,|L4.152|
000080  7801              LDRB     r1,[r0,#0]  ; m_flag_link_secure_pending_busy
000082  4630              MOV      r0,r6
000084  9a00              LDR      r2,[sp,#0]
000086  f7fffffe          BL       ble_conn_state_user_flag_set
                  |L4.138|
;;;136                                             m_flag_link_secure_pending_busy,
;;;137                                             flag_value_busy);
;;;138            }
;;;139        }
;;;140    }
00008a  bdf8              POP      {r3-r7,pc}
;;;141    
                          ENDP

                  |L4.140|
                          DCD      m_flag_params_reply_pending_flash_full
                  |L4.144|
                          DCD      m_flag_params_reply_pending_busy
                  |L4.148|
                          DCD      m_flag_link_secure_pending_flash_full
                  |L4.152|
                          DCD      m_flag_link_secure_pending_busy

                          AREA ||i.link_secure||, CODE, READONLY, ALIGN=2

                  link_secure PROC
;;;170    
;;;171    static ret_code_t link_secure(uint16_t conn_handle, bool null_params, bool force_repairing, bool send_events)
000000  b5ff              PUSH     {r0-r7,lr}
;;;172    {
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  461e              MOV      r6,r3
;;;173        ret_code_t err_code;
;;;174    
;;;175        if (!null_params && !m_sec_params_valid)
00000a  2d00              CMP      r5,#0
00000c  d106              BNE      |L5.28|
00000e  482b              LDR      r0,|L5.188|
000010  7800              LDRB     r0,[r0,#0]  ; m_sec_params_valid
000012  2800              CMP      r0,#0
000014  d102              BNE      |L5.28|
;;;176        {
;;;177            return NRF_ERROR_NOT_FOUND;
000016  2005              MOVS     r0,#5
                  |L5.24|
;;;178        }
;;;179    
;;;180        if (null_params)
;;;181        {
;;;182            err_code = smd_link_secure(conn_handle, NULL, force_repairing);
;;;183        }
;;;184        else
;;;185        {
;;;186            err_code = smd_link_secure(conn_handle, &m_sec_params, force_repairing);
;;;187        }
;;;188    
;;;189        flags_set_from_err_code(conn_handle, err_code, false);
;;;190    
;;;191        if (send_events)
;;;192        {
;;;193            events_send_from_err_code(conn_handle, err_code);
;;;194        }
;;;195    
;;;196        switch (err_code)
;;;197        {
;;;198            case NRF_ERROR_BUSY:
;;;199                ble_conn_state_user_flag_set(conn_handle, m_flag_link_secure_null_params, null_params);
;;;200                ble_conn_state_user_flag_set(conn_handle, m_flag_link_secure_force_repairing, force_repairing);
;;;201                err_code = NRF_SUCCESS;
;;;202                break;
;;;203            case NRF_ERROR_STORAGE_FULL:
;;;204                ble_conn_state_user_flag_set(conn_handle, m_flag_link_secure_null_params, null_params);
;;;205                ble_conn_state_user_flag_set(conn_handle, m_flag_link_secure_force_repairing, force_repairing);
;;;206                break;
;;;207            case NRF_SUCCESS:
;;;208            case NRF_ERROR_TIMEOUT:
;;;209            case BLE_ERROR_INVALID_CONN_HANDLE:
;;;210            case NRF_ERROR_INVALID_STATE:
;;;211                /* No action */
;;;212                break;
;;;213            default:
;;;214                err_code = NRF_ERROR_INTERNAL;
;;;215                break;
;;;216        }
;;;217    
;;;218        return err_code;
;;;219    }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
                  |L5.28|
00001c  2d00              CMP      r5,#0                 ;180
00001e  d006              BEQ      |L5.46|
000020  2100              MOVS     r1,#0                 ;182
000022  4638              MOV      r0,r7                 ;182
000024  9a03              LDR      r2,[sp,#0xc]          ;182
000026  f7fffffe          BL       smd_link_secure
00002a  4604              MOV      r4,r0                 ;182
00002c  e005              B        |L5.58|
                  |L5.46|
00002e  4924              LDR      r1,|L5.192|
000030  4638              MOV      r0,r7                 ;186
000032  9a03              LDR      r2,[sp,#0xc]          ;186
000034  f7fffffe          BL       smd_link_secure
000038  4604              MOV      r4,r0                 ;186
                  |L5.58|
00003a  2200              MOVS     r2,#0                 ;189
00003c  4621              MOV      r1,r4                 ;189
00003e  4638              MOV      r0,r7                 ;189
000040  f7fffffe          BL       flags_set_from_err_code
000044  2e00              CMP      r6,#0                 ;191
000046  d003              BEQ      |L5.80|
000048  4621              MOV      r1,r4                 ;193
00004a  4638              MOV      r0,r7                 ;193
00004c  f7fffffe          BL       events_send_from_err_code
                  |L5.80|
000050  2c11              CMP      r4,#0x11              ;196
000052  d00e              BEQ      |L5.114|
000054  dc06              BGT      |L5.100|
000056  2c00              CMP      r4,#0                 ;196
000058  d026              BEQ      |L5.168|
00005a  2c08              CMP      r4,#8                 ;196
00005c  d027              BEQ      |L5.174|
00005e  2c0d              CMP      r4,#0xd               ;196
000060  d126              BNE      |L5.176|
000062  e022              B        |L5.170|
                  |L5.100|
000064  2c86              CMP      r4,#0x86              ;196
000066  d012              BEQ      |L5.142|
000068  4816              LDR      r0,|L5.196|
00006a  1820              ADDS     r0,r4,r0              ;196
00006c  2800              CMP      r0,#0                 ;196
00006e  d11f              BNE      |L5.176|
000070  e01c              B        |L5.172|
                  |L5.114|
000072  462a              MOV      r2,r5                 ;199
000074  4814              LDR      r0,|L5.200|
000076  7801              LDRB     r1,[r0,#0]            ;199  ; m_flag_link_secure_null_params
000078  4638              MOV      r0,r7                 ;199
00007a  f7fffffe          BL       ble_conn_state_user_flag_set
00007e  4813              LDR      r0,|L5.204|
000080  7801              LDRB     r1,[r0,#0]            ;200  ; m_flag_link_secure_force_repairing
000082  4638              MOV      r0,r7                 ;200
000084  9a03              LDR      r2,[sp,#0xc]          ;200
000086  f7fffffe          BL       ble_conn_state_user_flag_set
00008a  2400              MOVS     r4,#0                 ;201
00008c  e012              B        |L5.180|
                  |L5.142|
00008e  462a              MOV      r2,r5                 ;204
000090  480d              LDR      r0,|L5.200|
000092  7801              LDRB     r1,[r0,#0]            ;204  ; m_flag_link_secure_null_params
000094  4638              MOV      r0,r7                 ;204
000096  f7fffffe          BL       ble_conn_state_user_flag_set
00009a  480c              LDR      r0,|L5.204|
00009c  7801              LDRB     r1,[r0,#0]            ;205  ; m_flag_link_secure_force_repairing
00009e  4638              MOV      r0,r7                 ;205
0000a0  9a03              LDR      r2,[sp,#0xc]          ;205
0000a2  f7fffffe          BL       ble_conn_state_user_flag_set
0000a6  e005              B        |L5.180|
                  |L5.168|
0000a8  bf00              NOP                            ;208
                  |L5.170|
0000aa  bf00              NOP                            ;209
                  |L5.172|
0000ac  bf00              NOP                            ;210
                  |L5.174|
0000ae  e001              B        |L5.180|
                  |L5.176|
0000b0  2403              MOVS     r4,#3                 ;214
0000b2  bf00              NOP                            ;215
                  |L5.180|
0000b4  bf00              NOP                            ;202
0000b6  4620              MOV      r0,r4                 ;218
0000b8  e7ae              B        |L5.24|
;;;220    
                          ENDP

0000ba  0000              DCW      0x0000
                  |L5.188|
                          DCD      m_sec_params_valid
                  |L5.192|
                          DCD      m_sec_params
                  |L5.196|
                          DCD      0xffffcffe
                  |L5.200|
                          DCD      m_flag_link_secure_null_params
                  |L5.204|
                          DCD      m_flag_link_secure_force_repairing

                          AREA ||i.link_secure_pending_process||, CODE, READONLY, ALIGN=2

                  link_secure_pending_process PROC
;;;317    
;;;318    static void link_secure_pending_process(ble_conn_state_user_flag_id_t flag_id)
000000  b5f0              PUSH     {r4-r7,lr}
;;;319    {
000002  b089              SUB      sp,sp,#0x24
000004  4605              MOV      r5,r0
;;;320        sdk_mapped_flags_t flag_collection = ble_conn_state_user_flag_collection(flag_id);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ble_conn_state_user_flag_collection
00000c  9008              STR      r0,[sp,#0x20]
;;;321        if (sdk_mapped_flags_any_set(flag_collection))
00000e  9808              LDR      r0,[sp,#0x20]
000010  f7fffffe          BL       sdk_mapped_flags_any_set
000014  2800              CMP      r0,#0
000016  d02c              BEQ      |L6.114|
;;;322        {
;;;323            sdk_mapped_flags_key_list_t conn_handle_list = ble_conn_state_conn_handles();
000018  a803              ADD      r0,sp,#0xc
00001a  f7fffffe          BL       ble_conn_state_conn_handles
;;;324    
;;;325            for (uint32_t i = 0; i < conn_handle_list.len; i++)
00001e  2400              MOVS     r4,#0
000020  e023              B        |L6.106|
                  |L6.34|
;;;326            {
;;;327                bool pending = ble_conn_state_user_flag_get(conn_handle_list.flag_keys[i], flag_id);
000022  0062              LSLS     r2,r4,#1
000024  a904              ADD      r1,sp,#0x10
000026  5a88              LDRH     r0,[r1,r2]
000028  4629              MOV      r1,r5
00002a  f7fffffe          BL       ble_conn_state_user_flag_get
00002e  4606              MOV      r6,r0
;;;328                if (pending)
000030  2e00              CMP      r6,#0
000032  d019              BEQ      |L6.104|
;;;329                {
;;;330                    bool force_repairing = ble_conn_state_user_flag_get(conn_handle_list.flag_keys[i], m_flag_link_secure_force_repairing);
000034  0062              LSLS     r2,r4,#1
000036  a904              ADD      r1,sp,#0x10
000038  5a88              LDRH     r0,[r1,r2]
00003a  490f              LDR      r1,|L6.120|
00003c  7809              LDRB     r1,[r1,#0]  ; m_flag_link_secure_force_repairing
00003e  f7fffffe          BL       ble_conn_state_user_flag_get
000042  9002              STR      r0,[sp,#8]
;;;331                    bool null_params     = ble_conn_state_user_flag_get(conn_handle_list.flag_keys[i], m_flag_link_secure_null_params);
000044  0062              LSLS     r2,r4,#1
000046  a904              ADD      r1,sp,#0x10
000048  5a88              LDRH     r0,[r1,r2]
00004a  490c              LDR      r1,|L6.124|
00004c  7809              LDRB     r1,[r1,#0]  ; m_flag_link_secure_null_params
00004e  f7fffffe          BL       ble_conn_state_user_flag_get
000052  9001              STR      r0,[sp,#4]
;;;332    
;;;333                    ret_code_t err_code = link_secure(conn_handle_list.flag_keys[i], null_params, force_repairing, true); // If this fails, it will be automatically retried.
000054  0062              LSLS     r2,r4,#1
000056  a904              ADD      r1,sp,#0x10
000058  5a88              LDRH     r0,[r1,r2]
00005a  2301              MOVS     r3,#1
00005c  9a02              LDR      r2,[sp,#8]
00005e  9901              LDR      r1,[sp,#4]
000060  f7fffffe          BL       link_secure
000064  4607              MOV      r7,r0
;;;334                    UNUSED_VARIABLE(err_code);
;;;335                }
000066  bf00              NOP      
                  |L6.104|
000068  1c64              ADDS     r4,r4,#1              ;325
                  |L6.106|
00006a  9803              LDR      r0,[sp,#0xc]          ;325
00006c  42a0              CMP      r0,r4                 ;325
00006e  d8d8              BHI      |L6.34|
;;;336            }
;;;337        }
000070  bf00              NOP      
                  |L6.114|
;;;338    }
000072  b009              ADD      sp,sp,#0x24
000074  bdf0              POP      {r4-r7,pc}
;;;339    
                          ENDP

000076  0000              DCW      0x0000
                  |L6.120|
                          DCD      m_flag_link_secure_force_repairing
                  |L6.124|
                          DCD      m_flag_link_secure_null_params

                          AREA ||i.params_reply_pending_process||, CODE, READONLY, ALIGN=1

                  params_reply_pending_process PROC
;;;340    
;;;341    static void params_reply_pending_process(ble_conn_state_user_flag_id_t flag_id)
000000  b5f0              PUSH     {r4-r7,lr}
;;;342    {
000002  b085              SUB      sp,sp,#0x14
000004  4605              MOV      r5,r0
;;;343        sdk_mapped_flags_t flag_collection = ble_conn_state_user_flag_collection(flag_id);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ble_conn_state_user_flag_collection
00000c  4607              MOV      r7,r0
;;;344        if (sdk_mapped_flags_any_set(flag_collection))
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       sdk_mapped_flags_any_set
000014  2800              CMP      r0,#0
000016  d017              BEQ      |L7.72|
;;;345        {
;;;346            sdk_mapped_flags_key_list_t conn_handle_list = ble_conn_state_conn_handles();
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       ble_conn_state_conn_handles
;;;347    
;;;348            for (uint32_t i = 0; i < conn_handle_list.len; i++)
00001e  2400              MOVS     r4,#0
000020  e00e              B        |L7.64|
                  |L7.34|
;;;349            {
;;;350                bool pending = ble_conn_state_user_flag_get(conn_handle_list.flag_keys[i], flag_id);
000022  0062              LSLS     r2,r4,#1
000024  a901              ADD      r1,sp,#4
000026  5a88              LDRH     r0,[r1,r2]
000028  4629              MOV      r1,r5
00002a  f7fffffe          BL       ble_conn_state_user_flag_get
00002e  4606              MOV      r6,r0
;;;351                if (pending)
000030  2e00              CMP      r6,#0
000032  d004              BEQ      |L7.62|
;;;352                {
;;;353                    smd_params_reply_perform(conn_handle_list.flag_keys[i]);
000034  0062              LSLS     r2,r4,#1
000036  a901              ADD      r1,sp,#4
000038  5a88              LDRH     r0,[r1,r2]
00003a  f7fffffe          BL       smd_params_reply_perform
                  |L7.62|
00003e  1c64              ADDS     r4,r4,#1              ;348
                  |L7.64|
000040  9800              LDR      r0,[sp,#0]            ;348
000042  42a0              CMP      r0,r4                 ;348
000044  d8ed              BHI      |L7.34|
;;;354                }
;;;355            }
;;;356        }
000046  bf00              NOP      
                  |L7.72|
;;;357    }
000048  b005              ADD      sp,sp,#0x14
00004a  bdf0              POP      {r4-r7,pc}
;;;358    
                          ENDP


                          AREA ||i.sdk_mapped_flags_any_set||, CODE, READONLY, ALIGN=1

                  sdk_mapped_flags_any_set PROC
;;;176     */
;;;177    static __INLINE bool sdk_mapped_flags_any_set(sdk_mapped_flags_t flags)
000000  4601              MOV      r1,r0
;;;178    {
;;;179        return (flags != 0);
000002  2900              CMP      r1,#0
000004  d001              BEQ      |L8.10|
000006  2001              MOVS     r0,#1
                  |L8.8|
;;;180    }
000008  4770              BX       lr
                  |L8.10|
00000a  2000              MOVS     r0,#0                 ;179
00000c  e7fc              B        |L8.8|
;;;181    
                          ENDP


                          AREA ||i.sec_params_verify||, CODE, READONLY, ALIGN=1

                  sec_params_verify PROC
;;;434    
;;;435    static bool sec_params_verify(ble_gap_sec_params_t * p_sec_params)
000000  4601              MOV      r1,r0
;;;436    {
;;;437        // NULL check.
;;;438        if (p_sec_params == NULL)
000002  2900              CMP      r1,#0
000004  d100              BNE      |L9.8|
                  |L9.6|
;;;439        {
;;;440            return false;
;;;441        }
;;;442    
;;;443        // OOB not allowed unless MITM.
;;;444        if (!p_sec_params->mitm && p_sec_params->oob)
;;;445        {
;;;446            return false;
;;;447        }
;;;448    
;;;449        // IO Capabilities must be one of the valid values from @ref BLE_GAP_IO_CAPS.
;;;450        if (p_sec_params->io_caps > BLE_GAP_IO_CAPS_KEYBOARD_DISPLAY)
;;;451        {
;;;452            return false;
;;;453        }
;;;454    
;;;455        // Must have either IO capabilities or OOB if MITM.
;;;456        if (p_sec_params->mitm && (p_sec_params->io_caps == BLE_GAP_IO_CAPS_NONE) && !p_sec_params->oob)
;;;457        {
;;;458            return false;
;;;459        }
;;;460    
;;;461        // Minimum key size cannot be larger than maximum key size.
;;;462        if (p_sec_params->min_key_size > p_sec_params->max_key_size)
;;;463        {
;;;464            return false;
;;;465        }
;;;466    
;;;467        // Key size cannot be below 7 bytes.
;;;468        if (p_sec_params->min_key_size < 7)
;;;469        {
;;;470            return false;
;;;471        }
;;;472    
;;;473        // Key size cannot be above 16 bytes.
;;;474        if (p_sec_params->max_key_size > 16)
;;;475        {
;;;476            return false;
;;;477        }
;;;478    
;;;479        // Signing is not supported.
;;;480        if (p_sec_params->kdist_own.sign || p_sec_params->kdist_peer.sign)
;;;481        {
;;;482            return false;
;;;483        }
;;;484    
;;;485        // link bit must be 0.
;;;486        if (p_sec_params->kdist_own.link || p_sec_params->kdist_peer.link)
;;;487        {
;;;488            return false;
;;;489        }
;;;490    
;;;491        // If bonding is not enabled, no keys can be distributed.
;;;492        if (!p_sec_params->bond && (   p_sec_params->kdist_own.enc
;;;493                                    || p_sec_params->kdist_own.id
;;;494                                    || p_sec_params->kdist_peer.enc
;;;495                                    || p_sec_params->kdist_peer.id))
;;;496        {
;;;497            return false;
;;;498        }
;;;499    
;;;500        // If bonding is enabled, one or more keys must be distributed.
;;;501        if (    p_sec_params->bond
;;;502            && !p_sec_params->kdist_own.enc
;;;503            && !p_sec_params->kdist_own.id
;;;504            && !p_sec_params->kdist_peer.enc
;;;505            && !p_sec_params->kdist_peer.id)
;;;506        {
;;;507            return false;
;;;508        }
;;;509    
;;;510        return true;
;;;511    }
000006  4770              BX       lr
                  |L9.8|
000008  7808              LDRB     r0,[r1,#0]            ;444
00000a  0780              LSLS     r0,r0,#30             ;444
00000c  0fc0              LSRS     r0,r0,#31             ;444
00000e  2800              CMP      r0,#0                 ;444
000010  d105              BNE      |L9.30|
000012  7808              LDRB     r0,[r1,#0]            ;444
000014  09c0              LSRS     r0,r0,#7              ;444
000016  2800              CMP      r0,#0                 ;444
000018  d001              BEQ      |L9.30|
00001a  2000              MOVS     r0,#0                 ;446
00001c  e7f3              B        |L9.6|
                  |L9.30|
00001e  7808              LDRB     r0,[r1,#0]            ;450
000020  0640              LSLS     r0,r0,#25             ;450
000022  0f40              LSRS     r0,r0,#29             ;450
000024  2804              CMP      r0,#4                 ;450
000026  dd01              BLE      |L9.44|
000028  2000              MOVS     r0,#0                 ;452
00002a  e7ec              B        |L9.6|
                  |L9.44|
00002c  7808              LDRB     r0,[r1,#0]            ;456
00002e  0780              LSLS     r0,r0,#30             ;456
000030  0fc0              LSRS     r0,r0,#31             ;456
000032  2800              CMP      r0,#0                 ;456
000034  d009              BEQ      |L9.74|
000036  7808              LDRB     r0,[r1,#0]            ;456
000038  0640              LSLS     r0,r0,#25             ;456
00003a  0f40              LSRS     r0,r0,#29             ;456
00003c  2803              CMP      r0,#3                 ;456
00003e  d104              BNE      |L9.74|
000040  7808              LDRB     r0,[r1,#0]            ;456
000042  09c0              LSRS     r0,r0,#7              ;456
000044  2800              CMP      r0,#0                 ;456
000046  d100              BNE      |L9.74|
000048  e7dd              B        |L9.6|
                  |L9.74|
00004a  7848              LDRB     r0,[r1,#1]            ;462
00004c  788a              LDRB     r2,[r1,#2]            ;462
00004e  4290              CMP      r0,r2                 ;462
000050  dd01              BLE      |L9.86|
000052  2000              MOVS     r0,#0                 ;464
000054  e7d7              B        |L9.6|
                  |L9.86|
000056  7848              LDRB     r0,[r1,#1]            ;468
000058  2807              CMP      r0,#7                 ;468
00005a  da01              BGE      |L9.96|
00005c  2000              MOVS     r0,#0                 ;470
00005e  e7d2              B        |L9.6|
                  |L9.96|
000060  7888              LDRB     r0,[r1,#2]            ;474
000062  2810              CMP      r0,#0x10              ;474
000064  dd01              BLE      |L9.106|
000066  2000              MOVS     r0,#0                 ;476
000068  e7cd              B        |L9.6|
                  |L9.106|
00006a  78c8              LDRB     r0,[r1,#3]            ;480
00006c  0740              LSLS     r0,r0,#29             ;480
00006e  0fc0              LSRS     r0,r0,#31             ;480
000070  2800              CMP      r0,#0                 ;480
000072  d104              BNE      |L9.126|
000074  7908              LDRB     r0,[r1,#4]            ;480
000076  0740              LSLS     r0,r0,#29             ;480
000078  0fc0              LSRS     r0,r0,#31             ;480
00007a  2800              CMP      r0,#0                 ;480
00007c  d001              BEQ      |L9.130|
                  |L9.126|
00007e  2000              MOVS     r0,#0                 ;482
000080  e7c1              B        |L9.6|
                  |L9.130|
000082  78c8              LDRB     r0,[r1,#3]            ;486
000084  0700              LSLS     r0,r0,#28             ;486
000086  0fc0              LSRS     r0,r0,#31             ;486
000088  2800              CMP      r0,#0                 ;486
00008a  d104              BNE      |L9.150|
00008c  7908              LDRB     r0,[r1,#4]            ;486
00008e  0700              LSLS     r0,r0,#28             ;486
000090  0fc0              LSRS     r0,r0,#31             ;486
000092  2800              CMP      r0,#0                 ;486
000094  d001              BEQ      |L9.154|
                  |L9.150|
000096  2000              MOVS     r0,#0                 ;488
000098  e7b5              B        |L9.6|
                  |L9.154|
00009a  7808              LDRB     r0,[r1,#0]            ;492
00009c  07c0              LSLS     r0,r0,#31             ;492
00009e  0fc0              LSRS     r0,r0,#31             ;492
0000a0  2800              CMP      r0,#0                 ;492
0000a2  d115              BNE      |L9.208|
0000a4  78c8              LDRB     r0,[r1,#3]            ;492
0000a6  07c0              LSLS     r0,r0,#31             ;492
0000a8  0fc0              LSRS     r0,r0,#31             ;492
0000aa  2800              CMP      r0,#0                 ;492
0000ac  d10e              BNE      |L9.204|
0000ae  78c8              LDRB     r0,[r1,#3]            ;493
0000b0  0780              LSLS     r0,r0,#30             ;493
0000b2  0fc0              LSRS     r0,r0,#31             ;493
0000b4  2800              CMP      r0,#0                 ;493
0000b6  d109              BNE      |L9.204|
0000b8  7908              LDRB     r0,[r1,#4]            ;494
0000ba  07c0              LSLS     r0,r0,#31             ;494
0000bc  0fc0              LSRS     r0,r0,#31             ;494
0000be  2800              CMP      r0,#0                 ;494
0000c0  d104              BNE      |L9.204|
0000c2  7908              LDRB     r0,[r1,#4]            ;495
0000c4  0780              LSLS     r0,r0,#30             ;495
0000c6  0fc0              LSRS     r0,r0,#31             ;495
0000c8  2800              CMP      r0,#0                 ;495
0000ca  d001              BEQ      |L9.208|
                  |L9.204|
0000cc  2000              MOVS     r0,#0                 ;497
0000ce  e79a              B        |L9.6|
                  |L9.208|
0000d0  7808              LDRB     r0,[r1,#0]            ;501
0000d2  07c0              LSLS     r0,r0,#31             ;501
0000d4  0fc0              LSRS     r0,r0,#31             ;501
0000d6  2800              CMP      r0,#0                 ;501
0000d8  d014              BEQ      |L9.260|
0000da  78c8              LDRB     r0,[r1,#3]            ;502
0000dc  07c0              LSLS     r0,r0,#31             ;502
0000de  0fc0              LSRS     r0,r0,#31             ;502
0000e0  2800              CMP      r0,#0                 ;502
0000e2  d10f              BNE      |L9.260|
0000e4  78c8              LDRB     r0,[r1,#3]            ;503
0000e6  0780              LSLS     r0,r0,#30             ;503
0000e8  0fc0              LSRS     r0,r0,#31             ;503
0000ea  2800              CMP      r0,#0                 ;503
0000ec  d10a              BNE      |L9.260|
0000ee  7908              LDRB     r0,[r1,#4]            ;504
0000f0  07c0              LSLS     r0,r0,#31             ;504
0000f2  0fc0              LSRS     r0,r0,#31             ;504
0000f4  2800              CMP      r0,#0                 ;504
0000f6  d105              BNE      |L9.260|
0000f8  7908              LDRB     r0,[r1,#4]            ;505
0000fa  0780              LSLS     r0,r0,#30             ;505
0000fc  0fc0              LSRS     r0,r0,#31             ;505
0000fe  2800              CMP      r0,#0                 ;505
000100  d100              BNE      |L9.260|
000102  e780              B        |L9.6|
                  |L9.260|
000104  2001              MOVS     r0,#1                 ;510
000106  e77e              B        |L9.6|
;;;512    
                          ENDP


                          AREA ||i.send_config_req||, CODE, READONLY, ALIGN=1

                  send_config_req PROC
;;;221    
;;;222    static void send_config_req(uint16_t conn_handle)
000000  b53e              PUSH     {r1-r5,lr}
;;;223    {
000002  4604              MOV      r4,r0
;;;224        sm_evt_t sm_evt;
;;;225        memset(&sm_evt, 0, sizeof(sm_evt));
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
000008  9001              STR      r0,[sp,#4]
00000a  9002              STR      r0,[sp,#8]
;;;226    
;;;227        sm_evt.evt_id      = SM_EVT_CONN_SEC_CONFIG_REQ;
00000c  210c              MOVS     r1,#0xc
00000e  4668              MOV      r0,sp
000010  7001              STRB     r1,[r0,#0]
;;;228        sm_evt.conn_handle = conn_handle;
000012  8044              STRH     r4,[r0,#2]
;;;229    
;;;230        evt_send(&sm_evt);
000014  f7fffffe          BL       evt_send
;;;231    }
000018  bd3e              POP      {r1-r5,pc}
;;;232    
                          ENDP


                          AREA ||i.sm_ble_evt_handler||, CODE, READONLY, ALIGN=2

                  sm_ble_evt_handler PROC
;;;425    
;;;426    void sm_ble_evt_handler(ble_evt_t * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;427    {
000002  4604              MOV      r4,r0
;;;428        NRF_PM_DEBUG_CHECK(p_ble_evt != NULL);
;;;429    
;;;430        smd_ble_evt_handler(p_ble_evt);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       smd_ble_evt_handler
;;;431        link_secure_pending_process(m_flag_link_secure_pending_busy);
00000a  4802              LDR      r0,|L11.20|
00000c  7800              LDRB     r0,[r0,#0]  ; m_flag_link_secure_pending_busy
00000e  f7fffffe          BL       link_secure_pending_process
;;;432    }
000012  bd10              POP      {r4,pc}
;;;433    
                          ENDP

                  |L11.20|
                          DCD      m_flag_link_secure_pending_busy

                          AREA ||i.sm_conn_sec_config_reply||, CODE, READONLY, ALIGN=2

                  sm_conn_sec_config_reply PROC
;;;535    
;;;536    void sm_conn_sec_config_reply(uint16_t conn_handle, pm_conn_sec_config_t * p_conn_sec_config)
000000  b570              PUSH     {r4-r6,lr}
;;;537    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;538        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;539        NRF_PM_DEBUG_CHECK(p_conn_sec_config != NULL);
;;;540    
;;;541        ble_conn_state_user_flag_set(conn_handle, m_flag_reject_pairing, !p_conn_sec_config->allow_repairing);
000006  7820              LDRB     r0,[r4,#0]
000008  2800              CMP      r0,#0
00000a  d101              BNE      |L12.16|
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L12.18|
                  |L12.16|
000010  2000              MOVS     r0,#0
                  |L12.18|
000012  4602              MOV      r2,r0
000014  4802              LDR      r0,|L12.32|
000016  7801              LDRB     r1,[r0,#0]  ; m_flag_reject_pairing
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       ble_conn_state_user_flag_set
;;;542    }
00001e  bd70              POP      {r4-r6,pc}
;;;543    
                          ENDP

                  |L12.32|
                          DCD      m_flag_reject_pairing

                          AREA ||i.sm_init||, CODE, READONLY, ALIGN=2

                  sm_init PROC
;;;402    
;;;403    ret_code_t sm_init(void)
000000  b510              PUSH     {r4,lr}
;;;404    {
;;;405        NRF_PM_DEBUG_CHECK(!m_module_initialized);
;;;406    
;;;407        flag_id_init(&m_flag_link_secure_pending_busy);
000002  4810              LDR      r0,|L13.68|
000004  f7fffffe          BL       flag_id_init
;;;408        flag_id_init(&m_flag_link_secure_pending_flash_full);
000008  480f              LDR      r0,|L13.72|
00000a  f7fffffe          BL       flag_id_init
;;;409        flag_id_init(&m_flag_link_secure_force_repairing);
00000e  480f              LDR      r0,|L13.76|
000010  f7fffffe          BL       flag_id_init
;;;410        flag_id_init(&m_flag_link_secure_null_params);
000014  480e              LDR      r0,|L13.80|
000016  f7fffffe          BL       flag_id_init
;;;411        flag_id_init(&m_flag_params_reply_pending_busy);
00001a  480e              LDR      r0,|L13.84|
00001c  f7fffffe          BL       flag_id_init
;;;412        flag_id_init(&m_flag_params_reply_pending_flash_full);
000020  480d              LDR      r0,|L13.88|
000022  f7fffffe          BL       flag_id_init
;;;413        flag_id_init(&m_flag_reject_pairing);
000026  480d              LDR      r0,|L13.92|
000028  f7fffffe          BL       flag_id_init
;;;414    
;;;415        if (m_flag_reject_pairing == BLE_CONN_STATE_USER_FLAG_INVALID)
00002c  480b              LDR      r0,|L13.92|
00002e  7800              LDRB     r0,[r0,#0]  ; m_flag_reject_pairing
000030  2818              CMP      r0,#0x18
000032  d101              BNE      |L13.56|
;;;416        {
;;;417            return NRF_ERROR_INTERNAL;
000034  2003              MOVS     r0,#3
                  |L13.54|
;;;418        }
;;;419    
;;;420        m_module_initialized = true;
;;;421    
;;;422        return NRF_SUCCESS;
;;;423    }
000036  bd10              POP      {r4,pc}
                  |L13.56|
000038  2001              MOVS     r0,#1                 ;420
00003a  4909              LDR      r1,|L13.96|
00003c  7008              STRB     r0,[r1,#0]            ;420
00003e  2000              MOVS     r0,#0                 ;422
000040  e7f9              B        |L13.54|
;;;424    
                          ENDP

000042  0000              DCW      0x0000
                  |L13.68|
                          DCD      m_flag_link_secure_pending_busy
                  |L13.72|
                          DCD      m_flag_link_secure_pending_flash_full
                  |L13.76|
                          DCD      m_flag_link_secure_force_repairing
                  |L13.80|
                          DCD      m_flag_link_secure_null_params
                  |L13.84|
                          DCD      m_flag_params_reply_pending_busy
                  |L13.88|
                          DCD      m_flag_params_reply_pending_flash_full
                  |L13.92|
                          DCD      m_flag_reject_pairing
                  |L13.96|
                          DCD      m_module_initialized

                          AREA ||i.sm_lesc_public_key_set||, CODE, READONLY, ALIGN=2

                  sm_lesc_public_key_set PROC
;;;544    
;;;545    ret_code_t sm_lesc_public_key_set(ble_gap_lesc_p256_pk_t * p_public_key)
000000  4601              MOV      r1,r0
;;;546    {
;;;547        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;548    
;;;549        m_p_public_key = p_public_key;
000002  4802              LDR      r0,|L14.12|
000004  6001              STR      r1,[r0,#0]  ; m_p_public_key
;;;550    
;;;551        return NRF_SUCCESS;
000006  2000              MOVS     r0,#0
;;;552    }
000008  4770              BX       lr
;;;553    
                          ENDP

00000a  0000              DCW      0x0000
                  |L14.12|
                          DCD      m_p_public_key

                          AREA ||i.sm_link_secure||, CODE, READONLY, ALIGN=1

                  sm_link_secure PROC
;;;561    
;;;562    ret_code_t sm_link_secure(uint16_t conn_handle, bool force_repairing)
000000  b570              PUSH     {r4-r6,lr}
;;;563    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;564        ret_code_t ret;
;;;565    
;;;566        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;567    
;;;568        ret = link_secure(conn_handle, false, force_repairing, false);
000006  2300              MOVS     r3,#0
000008  4622              MOV      r2,r4
00000a  4619              MOV      r1,r3
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       link_secure
000012  4606              MOV      r6,r0
;;;569        return ret;
000014  4630              MOV      r0,r6
;;;570    }
000016  bd70              POP      {r4-r6,pc}
;;;571    #endif // NRF_MODULE_ENABLED(PEER_MANAGER)
                          ENDP


                          AREA ||i.sm_pdb_evt_handler||, CODE, READONLY, ALIGN=2

                  sm_pdb_evt_handler PROC
;;;364     */
;;;365    void sm_pdb_evt_handler(pdb_evt_t const * p_event)
000000  b510              PUSH     {r4,lr}
;;;366    {
000002  4604              MOV      r4,r0
;;;367        switch (p_event->evt_id)
000004  7820              LDRB     r0,[r4,#0]
000006  0003              MOVS     r3,r0
000008  f7fffffe          BL       __ARM_common_switch8
00000c  0a0f1011          DCB      0x0a,0x0f,0x10,0x11
000010  12131415          DCB      0x12,0x13,0x14,0x15
000014  061e1f20          DCB      0x06,0x1e,0x1f,0x20
;;;368        {
;;;369            case PDB_EVT_COMPRESSED:
;;;370                params_reply_pending_process(m_flag_params_reply_pending_flash_full);
000018  480d              LDR      r0,|L16.80|
00001a  7800              LDRB     r0,[r0,#0]  ; m_flag_params_reply_pending_flash_full
00001c  f7fffffe          BL       params_reply_pending_process
;;;371                link_secure_pending_process(m_flag_link_secure_pending_flash_full);
000020  480c              LDR      r0,|L16.84|
000022  7800              LDRB     r0,[r0,#0]  ; m_flag_link_secure_pending_flash_full
000024  f7fffffe          BL       link_secure_pending_process
;;;372                /* fallthrough */
;;;373            case PDB_EVT_WRITE_BUF_STORED:
000028  bf00              NOP      
;;;374            case PDB_EVT_RAW_STORED:
00002a  bf00              NOP      
;;;375            case PDB_EVT_RAW_STORE_FAILED:
00002c  bf00              NOP      
;;;376            case PDB_EVT_CLEARED:
00002e  bf00              NOP      
;;;377            case PDB_EVT_CLEAR_FAILED:
000030  bf00              NOP      
;;;378            case PDB_EVT_PEER_FREED:
000032  bf00              NOP      
;;;379            case PDB_EVT_PEER_FREE_FAILED:
000034  bf00              NOP      
;;;380                params_reply_pending_process(m_flag_params_reply_pending_busy);
000036  4808              LDR      r0,|L16.88|
000038  7800              LDRB     r0,[r0,#0]  ; m_flag_params_reply_pending_busy
00003a  f7fffffe          BL       params_reply_pending_process
;;;381                link_secure_pending_process(m_flag_link_secure_pending_busy);
00003e  4807              LDR      r0,|L16.92|
000040  7800              LDRB     r0,[r0,#0]  ; m_flag_link_secure_pending_busy
000042  f7fffffe          BL       link_secure_pending_process
;;;382                break;
000046  e001              B        |L16.76|
;;;383            case PDB_EVT_ERROR_NO_MEM:
;;;384            case PDB_EVT_ERROR_UNEXPECTED:
000048  bf00              NOP      
;;;385                break;
00004a  bf00              NOP      
                  |L16.76|
00004c  bf00              NOP                            ;382
;;;386        }
;;;387    }
00004e  bd10              POP      {r4,pc}
;;;388    
                          ENDP

                  |L16.80|
                          DCD      m_flag_params_reply_pending_flash_full
                  |L16.84|
                          DCD      m_flag_link_secure_pending_flash_full
                  |L16.88|
                          DCD      m_flag_params_reply_pending_busy
                  |L16.92|
                          DCD      m_flag_link_secure_pending_busy

                          AREA ||i.sm_sec_params_reply||, CODE, READONLY, ALIGN=1

                  sm_sec_params_reply PROC
;;;554    
;;;555    ret_code_t sm_sec_params_reply(uint16_t conn_handle, ble_gap_sec_params_t * p_sec_params)
000000  4602              MOV      r2,r0
;;;556    {
;;;557        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;558        return NRF_SUCCESS;
000002  2000              MOVS     r0,#0
;;;559    }
000004  4770              BX       lr
;;;560    
                          ENDP


                          AREA ||i.sm_sec_params_set||, CODE, READONLY, ALIGN=2

                  sm_sec_params_set PROC
;;;513    
;;;514    ret_code_t sm_sec_params_set(ble_gap_sec_params_t * p_sec_params)
000000  b510              PUSH     {r4,lr}
;;;515    {
000002  4604              MOV      r4,r0
;;;516        NRF_PM_DEBUG_CHECK(m_module_initialized);
;;;517    
;;;518        if (p_sec_params == NULL)
000004  2c00              CMP      r4,#0
000006  d102              BNE      |L18.14|
;;;519        {
;;;520            m_sec_params_valid = false;
000008  4909              LDR      r1,|L18.48|
00000a  7008              STRB     r0,[r1,#0]
                  |L18.12|
;;;521            return NRF_SUCCESS;
;;;522        }
;;;523        else if (sec_params_verify(p_sec_params))
;;;524        {
;;;525            m_sec_params       = *p_sec_params;
;;;526            m_sec_params_valid = true;
;;;527            return NRF_SUCCESS;
;;;528        }
;;;529        else
;;;530        {
;;;531            return NRF_ERROR_INVALID_PARAM;
;;;532        }
;;;533    }
00000c  bd10              POP      {r4,pc}
                  |L18.14|
00000e  4620              MOV      r0,r4                 ;523
000010  f7fffffe          BL       sec_params_verify
000014  2800              CMP      r0,#0                 ;523
000016  d009              BEQ      |L18.44|
000018  2205              MOVS     r2,#5                 ;525
00001a  4621              MOV      r1,r4                 ;525
00001c  4805              LDR      r0,|L18.52|
00001e  f7fffffe          BL       __aeabi_memcpy
000022  2001              MOVS     r0,#1                 ;526
000024  4902              LDR      r1,|L18.48|
000026  7008              STRB     r0,[r1,#0]            ;526
000028  2000              MOVS     r0,#0                 ;527
00002a  e7ef              B        |L18.12|
                  |L18.44|
00002c  2007              MOVS     r0,#7                 ;531
00002e  e7ed              B        |L18.12|
;;;534    
                          ENDP

                  |L18.48|
                          DCD      m_sec_params_valid
                  |L18.52|
                          DCD      m_sec_params

                          AREA ||i.sm_smd_evt_handler||, CODE, READONLY, ALIGN=2

                  sm_smd_evt_handler PROC
;;;269     */
;;;270    void sm_smd_evt_handler(smd_evt_t const * p_event)
000000  b5fe              PUSH     {r1-r7,lr}
;;;271    {
000002  4604              MOV      r4,r0
;;;272        switch (p_event->evt_id)
000004  7820              LDRB     r0,[r4,#0]
000006  0003              MOVS     r3,r0
000008  f7fffffe          BL       __ARM_common_switch8
00000c  0a060a3b          DCB      0x0a,0x06,0x0a,0x3b
000010  34353637          DCB      0x34,0x35,0x36,0x37
000014  38393a48          DCB      0x38,0x39,0x3a,0x48
;;;273        {
;;;274            case SMD_EVT_PARAMS_REQ:
;;;275                smd_params_reply_perform(p_event->conn_handle);
000018  8860              LDRH     r0,[r4,#2]
00001a  f7fffffe          BL       smd_params_reply_perform
;;;276                break;
00001e  e03d              B        |L19.156|
;;;277            case SMD_EVT_SLAVE_SECURITY_REQ:
;;;278            {
;;;279                bool null_params = false;
000020  2600              MOVS     r6,#0
;;;280                if (!m_sec_params_valid)
000022  481f              LDR      r0,|L19.160|
000024  7800              LDRB     r0,[r0,#0]  ; m_sec_params_valid
000026  2800              CMP      r0,#0
000028  d101              BNE      |L19.46|
;;;281                {
;;;282                    null_params = true;
00002a  2601              MOVS     r6,#1
00002c  e01a              B        |L19.100|
                  |L19.46|
;;;283                }
;;;284                else if ((bool)m_sec_params.bond < (bool)p_event->params.slave_security_req.bond)
00002e  481d              LDR      r0,|L19.164|
000030  7800              LDRB     r0,[r0,#0]  ; m_sec_params
000032  07c0              LSLS     r0,r0,#31
000034  0fc0              LSRS     r0,r0,#31
000036  7921              LDRB     r1,[r4,#4]
000038  2900              CMP      r1,#0
00003a  d001              BEQ      |L19.64|
00003c  2101              MOVS     r1,#1
00003e  e000              B        |L19.66|
                  |L19.64|
000040  2100              MOVS     r1,#0
                  |L19.66|
000042  4288              CMP      r0,r1
000044  da01              BGE      |L19.74|
;;;285                {
;;;286                    null_params = true;
000046  2601              MOVS     r6,#1
000048  e00c              B        |L19.100|
                  |L19.74|
;;;287                }
;;;288                else if ((bool)m_sec_params.mitm < (bool)p_event->params.slave_security_req.mitm)
00004a  4816              LDR      r0,|L19.164|
00004c  7800              LDRB     r0,[r0,#0]  ; m_sec_params
00004e  0780              LSLS     r0,r0,#30
000050  0fc1              LSRS     r1,r0,#31
000052  7960              LDRB     r0,[r4,#5]
000054  2800              CMP      r0,#0
000056  d001              BEQ      |L19.92|
000058  2001              MOVS     r0,#1
00005a  e000              B        |L19.94|
                  |L19.92|
00005c  2000              MOVS     r0,#0
                  |L19.94|
00005e  4281              CMP      r1,r0
000060  da00              BGE      |L19.100|
;;;289                {
;;;290                    null_params = true;
000062  2601              MOVS     r6,#1
                  |L19.100|
;;;291                }
;;;292                ret_code_t err_code = link_secure(p_event->conn_handle, null_params, false, true);
000064  8860              LDRH     r0,[r4,#2]
000066  2301              MOVS     r3,#1
000068  2200              MOVS     r2,#0
00006a  4631              MOV      r1,r6
00006c  f7fffffe          BL       link_secure
000070  4605              MOV      r5,r0
;;;293                UNUSED_VARIABLE(err_code); // It is acceptable to ignore the return code because it is
;;;294                                           // acceptable to ignore a security request.
;;;295            }
;;;296            /* fallthrough */
;;;297            case SMD_EVT_PAIRING_SUCCESS:
000072  bf00              NOP      
;;;298            case SMD_EVT_PAIRING_FAIL:
000074  bf00              NOP      
;;;299            case SMD_EVT_LINK_ENCRYPTION_UPDATE:
000076  bf00              NOP      
;;;300            case SMD_EVT_LINK_ENCRYPTION_FAILED:
000078  bf00              NOP      
;;;301            case SMD_EVT_BONDING_INFO_STORED:
00007a  bf00              NOP      
;;;302            case SMD_EVT_ERROR_BONDING_INFO:
00007c  bf00              NOP      
;;;303            case SMD_EVT_ERROR_UNEXPECTED:
00007e  bf00              NOP      
;;;304            case SMD_EVT_SEC_PROCEDURE_START:
000080  bf00              NOP      
;;;305            {
;;;306                sm_evt_t evt;
;;;307                evt.evt_id = (sm_evt_id_t)p_event->evt_id;
000082  7821              LDRB     r1,[r4,#0]
000084  4668              MOV      r0,sp
000086  7001              STRB     r1,[r0,#0]
;;;308                evt.conn_handle = p_event->conn_handle;
000088  8861              LDRH     r1,[r4,#2]
00008a  8041              STRH     r1,[r0,#2]
;;;309                evt.params = p_event->params;
00008c  68a1              LDR      r1,[r4,#8]
00008e  6860              LDR      r0,[r4,#4]
000090  9102              STR      r1,[sp,#8]
000092  9001              STR      r0,[sp,#4]
;;;310    
;;;311                evt_send(&evt);
000094  4668              MOV      r0,sp
000096  f7fffffe          BL       evt_send
;;;312            }
;;;313                break;
00009a  bf00              NOP      
                  |L19.156|
00009c  bf00              NOP                            ;276
;;;314        }
;;;315    }
00009e  bdfe              POP      {r1-r7,pc}
;;;316    
                          ENDP

                  |L19.160|
                          DCD      m_sec_params_valid
                  |L19.164|
                          DCD      m_sec_params

                          AREA ||i.smd_params_reply_perform||, CODE, READONLY, ALIGN=2

                  smd_params_reply_perform PROC
;;;233    
;;;234    static void smd_params_reply_perform(uint16_t conn_handle)
000000  b570              PUSH     {r4-r6,lr}
;;;235    {
000002  4604              MOV      r4,r0
;;;236        ret_code_t err_code;
;;;237    
;;;238        if (  (ble_conn_state_role(conn_handle) == BLE_GAP_ROLE_PERIPH)
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       ble_conn_state_role
00000a  2801              CMP      r0,#1
00000c  d10f              BNE      |L20.46|
;;;239            && im_peer_id_get_by_conn_handle(conn_handle) != PM_PEER_ID_INVALID)
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       im_peer_id_get_by_conn_handle
000014  491a              LDR      r1,|L20.128|
000016  4288              CMP      r0,r1
000018  d009              BEQ      |L20.46|
;;;240        {
;;;241            // Bond already exists. Reject the pairing request if the user doesn't intervene.
;;;242            ble_conn_state_user_flag_set(conn_handle, m_flag_reject_pairing, true);
00001a  2201              MOVS     r2,#1
00001c  4819              LDR      r0,|L20.132|
00001e  7801              LDRB     r1,[r0,#0]  ; m_flag_reject_pairing
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       ble_conn_state_user_flag_set
;;;243            send_config_req(conn_handle);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       send_config_req
00002c  e005              B        |L20.58|
                  |L20.46|
;;;244        }
;;;245        else
;;;246        {
;;;247            ble_conn_state_user_flag_set(conn_handle, m_flag_reject_pairing, false);
00002e  2200              MOVS     r2,#0
000030  4814              LDR      r0,|L20.132|
000032  7801              LDRB     r1,[r0,#0]  ; m_flag_reject_pairing
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       ble_conn_state_user_flag_set
                  |L20.58|
;;;248        }
;;;249    
;;;250        if (   m_sec_params_valid
00003a  4813              LDR      r0,|L20.136|
00003c  7800              LDRB     r0,[r0,#0]  ; m_sec_params_valid
00003e  2800              CMP      r0,#0
000040  d00e              BEQ      |L20.96|
;;;251            && !ble_conn_state_user_flag_get(conn_handle, m_flag_reject_pairing))
000042  4810              LDR      r0,|L20.132|
000044  7801              LDRB     r1,[r0,#0]  ; m_flag_reject_pairing
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       ble_conn_state_user_flag_get
00004c  2800              CMP      r0,#0
00004e  d107              BNE      |L20.96|
;;;252        {
;;;253            err_code = smd_params_reply(conn_handle, &m_sec_params, m_p_public_key);
000050  480e              LDR      r0,|L20.140|
000052  490f              LDR      r1,|L20.144|
000054  6802              LDR      r2,[r0,#0]  ; m_p_public_key
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       smd_params_reply
00005c  4605              MOV      r5,r0
00005e  e005              B        |L20.108|
                  |L20.96|
;;;254        }
;;;255        else
;;;256        {
;;;257            err_code = smd_params_reply(conn_handle, NULL, NULL);
000060  2200              MOVS     r2,#0
000062  4611              MOV      r1,r2
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       smd_params_reply
00006a  4605              MOV      r5,r0
                  |L20.108|
;;;258        }
;;;259    
;;;260        flags_set_from_err_code(conn_handle, err_code, true);
00006c  2201              MOVS     r2,#1
00006e  4629              MOV      r1,r5
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       flags_set_from_err_code
;;;261        events_send_from_err_code(conn_handle, err_code);
000076  4629              MOV      r1,r5
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       events_send_from_err_code
;;;262    }
00007e  bd70              POP      {r4-r6,pc}
;;;263    
                          ENDP

                  |L20.128|
                          DCD      0x0000ffff
                  |L20.132|
                          DCD      m_flag_reject_pairing
                  |L20.136|
                          DCD      m_sec_params_valid
                  |L20.140|
                          DCD      m_p_public_key
                  |L20.144|
                          DCD      m_sec_params

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  m_evt_handlers
                          DCD      pm_sm_evt_handler

                          AREA ||.data||, DATA, ALIGN=2

                  m_module_initialized
000000  00                DCB      0x00
                  m_sec_params
000001  000000            DCB      0x00,0x00,0x00
000004  0000              DCB      0x00,0x00
                  m_sec_params_valid
000006  0000              DCB      0x00,0x00
                  m_p_public_key
                          DCD      0x00000000
                  m_flag_link_secure_pending_busy
00000c  18                DCB      0x18
                  m_flag_link_secure_pending_flash_full
00000d  18                DCB      0x18
                  m_flag_link_secure_force_repairing
00000e  18                DCB      0x18
                  m_flag_link_secure_null_params
00000f  18                DCB      0x18
                  m_flag_params_reply_pending_busy
000010  18                DCB      0x18
                  m_flag_params_reply_pending_flash_full
000011  18                DCB      0x18
                  m_flag_reject_pairing
000012  18                DCB      0x18

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L119.24|
                  |L119.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L119.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L119.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\peer_manager\\security_manager.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_security_manager_c_3ad89192____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.2.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_security_manager_c_3ad89192____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_security_manager_c_3ad89192____REVSH|
#line 144
|__asm___18_security_manager_c_3ad89192____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
