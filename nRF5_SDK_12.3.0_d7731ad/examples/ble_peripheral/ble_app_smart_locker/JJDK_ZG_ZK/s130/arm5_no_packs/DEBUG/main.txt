; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\main.o --asm_dir=.\DEBUG\ --list_dir=.\DEBUG\ --depend=.\debug\main.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\power -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\usbd -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\gpiote -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\queue -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\sensorsim -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\usbd -I..\..\..\..\..\..\components\libraries\usbd\class\audio -I..\..\..\..\..\..\components\libraries\usbd\class\cdc -I..\..\..\..\..\..\components\libraries\usbd\class\cdc\acm -I..\..\..\..\..\..\components\libraries\usbd\class\hid -I..\..\..\..\..\..\components\libraries\usbd\class\hid\generic -I..\..\..\..\..\..\components\libraries\usbd\class\hid\kbd -I..\..\..\..\..\..\components\libraries\usbd\class\hid\mouse -I..\..\..\..\..\..\components\libraries\usbd\class\msc -I..\..\..\..\..\..\components\libraries\usbd\config -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s130\headers -I..\..\..\..\..\..\components\softdevice\s130\headers\nrf51 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_sls -ID:\development\nordic_ble\src_code\nrf51_sdk_v12_3_0\nRF5_SDK_12.3.0_d7731ad\examples\ble_peripheral\ble_app_smart_locker\JJDK_ZG_ZK\s130\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.11.1\Device\Include -D__MICROLIB -D_RTE_ -DNRF51 -DBLE_STACK_SUPPORT_REQD -DNRF51822 -DBOARD_JJDK_ZG_ZK -DNRF_SD_BLE_API_VERSION=2 -DS130 -DNRF51 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 --omf_browse=.\debug\main.crf ..\..\..\main.c]
                          THUMB

                          AREA ||i.advertising_init||, CODE, READONLY, ALIGN=2

                  advertising_init PROC
;;;770     */
;;;771    static void advertising_init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;772    {
000002  b099              SUB      sp,sp,#0x64
;;;773        uint32_t               err_code;
;;;774        ble_advdata_t          advdata;
;;;775        ble_adv_modes_config_t options;
;;;776    
;;;777        // Build advertising data struct to pass into @ref ble_advertising_init.
;;;778        memset(&advdata, 0, sizeof(advdata));
000004  213c              MOVS     r1,#0x3c
000006  a80a              ADD      r0,sp,#0x28
000008  f7fffffe          BL       __aeabi_memclr4
;;;779    
;;;780        advdata.name_type               = BLE_ADVDATA_FULL_NAME;
00000c  2102              MOVS     r1,#2
00000e  a808              ADD      r0,sp,#0x20
000010  7201              STRB     r1,[r0,#8]
;;;781        advdata.include_appearance      = true;
000012  2101              MOVS     r1,#1
000014  7281              STRB     r1,[r0,#0xa]
;;;782        advdata.flags                   = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
000016  2106              MOVS     r1,#6
000018  72c1              STRB     r1,[r0,#0xb]
;;;783        advdata.uuids_complete.uuid_cnt = sizeof(m_adv_uuids) / sizeof(m_adv_uuids[0]);
00001a  2101              MOVS     r1,#1
00001c  4668              MOV      r0,sp
00001e  8701              STRH     r1,[r0,#0x38]
;;;784        advdata.uuids_complete.p_uuids  = m_adv_uuids;
000020  4911              LDR      r1,|L1.104|
000022  910f              STR      r1,[sp,#0x3c]
;;;785    
;;;786        memset(&options, 0, sizeof(options));
000024  2120              MOVS     r1,#0x20
000026  a802              ADD      r0,sp,#8
000028  f7fffffe          BL       __aeabi_memclr4
;;;787        options.ble_adv_fast_enabled  = true;
00002c  2101              MOVS     r1,#1
00002e  4668              MOV      r0,sp
000030  72c1              STRB     r1,[r0,#0xb]
;;;788        options.ble_adv_fast_interval = APP_ADV_INTERVAL;
000032  20ff              MOVS     r0,#0xff
000034  302d              ADDS     r0,r0,#0x2d
000036  9006              STR      r0,[sp,#0x18]
;;;789        options.ble_adv_fast_timeout  = APP_ADV_TIMEOUT_IN_SECONDS;
000038  20b4              MOVS     r0,#0xb4
00003a  9007              STR      r0,[sp,#0x1c]
;;;790    
;;;791        err_code = ble_advertising_init(&advdata, NULL, &options, on_adv_evt, NULL);
00003c  2000              MOVS     r0,#0
00003e  4b0b              LDR      r3,|L1.108|
000040  aa02              ADD      r2,sp,#8
000042  4601              MOV      r1,r0
000044  9000              STR      r0,[sp,#0]
000046  a80a              ADD      r0,sp,#0x28
000048  f7fffffe          BL       ble_advertising_init
00004c  4604              MOV      r4,r0
;;;792        APP_ERROR_CHECK(err_code);
00004e  bf00              NOP      
000050  4625              MOV      r5,r4
000052  2d00              CMP      r5,#0
000054  d004              BEQ      |L1.96|
000056  bf00              NOP      
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       app_error_handler_bare
00005e  bf00              NOP      
                  |L1.96|
000060  bf00              NOP      
;;;793    }
000062  b019              ADD      sp,sp,#0x64
000064  bd30              POP      {r4,r5,pc}
;;;794    
                          ENDP

000066  0000              DCW      0x0000
                  |L1.104|
                          DCD      m_adv_uuids
                  |L1.108|
                          DCD      on_adv_evt

                          AREA ||i.advertising_start||, CODE, READONLY, ALIGN=1

                  advertising_start PROC
;;;830     */
;;;831    static void advertising_start(void)
000000  b570              PUSH     {r4-r6,lr}
;;;832    {
;;;833        uint32_t err_code = ble_advertising_start(BLE_ADV_MODE_FAST);
000002  2003              MOVS     r0,#3
000004  f7fffffe          BL       ble_advertising_start
000008  4604              MOV      r4,r0
;;;834    
;;;835        APP_ERROR_CHECK(err_code);
00000a  bf00              NOP      
00000c  4625              MOV      r5,r4
00000e  2d00              CMP      r5,#0
000010  d004              BEQ      |L2.28|
000012  bf00              NOP      
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       app_error_handler_bare
00001a  bf00              NOP      
                  |L2.28|
00001c  bf00              NOP      
;;;836    }
00001e  bd70              POP      {r4-r6,pc}
;;;837    
                          ENDP


                          AREA ||i.application_timers_start||, CODE, READONLY, ALIGN=1

                  application_timers_start PROC
;;;452     */
;;;453    static void application_timers_start(void)
000000  4770              BX       lr
;;;454    {
;;;455        /* YOUR_JOB: Start your timers. below is an example of how to start a timer.
;;;456           uint32_t err_code;
;;;457           err_code = app_timer_start(m_app_timer_id, TIMER_INTERVAL, NULL);
;;;458           APP_ERROR_CHECK(err_code); */
;;;459    	
;;;460    
;;;461    }
;;;462    
                          ENDP


                          AREA ||i.assert_nrf_callback||, CODE, READONLY, ALIGN=2

                  assert_nrf_callback PROC
;;;155     */
;;;156    void assert_nrf_callback(uint16_t line_num, const uint8_t * p_file_name)
000000  b570              PUSH     {r4-r6,lr}
;;;157    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;158        app_error_handler(DEAD_BEEF, line_num, p_file_name);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  4802              LDR      r0,|L4.20|
00000c  f7fffffe          BL       app_error_handler
;;;159    }
000010  bd70              POP      {r4-r6,pc}
;;;160    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0xdeadbeef

                          AREA ||i.ble_evt_dispatch||, CODE, READONLY, ALIGN=2

                  ble_evt_dispatch PROC
;;;606     */
;;;607    static void ble_evt_dispatch(ble_evt_t * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;608    {
000002  4604              MOV      r4,r0
;;;609        /** The Connection state module has to be fed BLE events in order to function correctly
;;;610         * Remember to call ble_conn_state_on_ble_evt before calling any ble_conns_state_* functions. */
;;;611        ble_conn_state_on_ble_evt(p_ble_evt);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       ble_conn_state_on_ble_evt
;;;612        pm_on_ble_evt(p_ble_evt);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       pm_on_ble_evt
;;;613        ble_conn_params_on_ble_evt(p_ble_evt);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       ble_conn_params_on_ble_evt
;;;614        //bsp_btn_ble_on_ble_evt(p_ble_evt);
;;;615        ble_advertising_on_ble_evt(p_ble_evt);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       ble_advertising_on_ble_evt
;;;616    	  on_ble_evt(p_ble_evt);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       on_ble_evt
;;;617    	  ble_sls_on_ble_evt(&m_sls,p_ble_evt);
000022  4621              MOV      r1,r4
000024  4801              LDR      r0,|L5.44|
000026  f7fffffe          BL       ble_sls_on_ble_evt
;;;618    	
;;;619        /*YOUR_JOB add calls to _on_ble_evt functions from each service your application is using
;;;620           ble_xxs_on_ble_evt(&m_xxs, p_ble_evt);
;;;621           ble_yys_on_ble_evt(&m_yys, p_ble_evt);
;;;622         */
;;;623    }
00002a  bd10              POP      {r4,pc}
;;;624    
                          ENDP

                  |L5.44|
                          DCD      m_sls

                          AREA ||i.ble_stack_init||, CODE, READONLY, ALIGN=2

                  ble_stack_init PROC
;;;649     */
;;;650    static void ble_stack_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;651    {
000002  b086              SUB      sp,sp,#0x18
;;;652        uint32_t err_code;
;;;653    
;;;654        nrf_clock_lf_cfg_t clock_lf_cfg = NRF_CLOCK_LFCLKSRC;
000004  4828              LDR      r0,|L6.168|
000006  6800              LDR      r0,[r0,#0]  ; <Data4>
000008  9005              STR      r0,[sp,#0x14]
;;;655    
;;;656        // Initialize the SoftDevice handler module.
;;;657        SOFTDEVICE_HANDLER_INIT(&clock_lf_cfg, NULL);
00000a  bf00              NOP      
00000c  2300              MOVS     r3,#0
00000e  2248              MOVS     r2,#0x48
000010  4926              LDR      r1,|L6.172|
000012  a805              ADD      r0,sp,#0x14
000014  f7fffffe          BL       softdevice_handler_init
000018  4605              MOV      r5,r0
00001a  bf00              NOP      
00001c  462e              MOV      r6,r5
00001e  2e00              CMP      r6,#0
000020  d004              BEQ      |L6.44|
000022  bf00              NOP      
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       app_error_handler_bare
00002a  bf00              NOP      
                  |L6.44|
00002c  bf00              NOP      
00002e  bf00              NOP      
;;;658    
;;;659        ble_enable_params_t ble_enable_params;
;;;660        err_code = softdevice_enable_get_default_config(CENTRAL_LINK_COUNT,
000030  466a              MOV      r2,sp
000032  2101              MOVS     r1,#1
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       softdevice_enable_get_default_config
00003a  4604              MOV      r4,r0
;;;661                                                        PERIPHERAL_LINK_COUNT,
;;;662                                                        &ble_enable_params);
;;;663        APP_ERROR_CHECK(err_code);
00003c  bf00              NOP      
00003e  4625              MOV      r5,r4
000040  2d00              CMP      r5,#0
000042  d004              BEQ      |L6.78|
000044  bf00              NOP      
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       app_error_handler_bare
00004c  bf00              NOP      
                  |L6.78|
00004e  bf00              NOP      
;;;664    
;;;665        // Check the ram settings against the used number of links
;;;666        CHECK_RAM_START_ADDR(CENTRAL_LINK_COUNT, PERIPHERAL_LINK_COUNT);
;;;667    
;;;668        // Enable BLE stack.
;;;669    #if (NRF_SD_BLE_API_VERSION == 3)
;;;670        ble_enable_params.gatt_enable_params.att_mtu = NRF_BLE_MAX_MTU_SIZE;
;;;671    #endif
;;;672        err_code = softdevice_enable(&ble_enable_params);
000050  4668              MOV      r0,sp
000052  f7fffffe          BL       softdevice_enable
000056  4604              MOV      r4,r0
;;;673        APP_ERROR_CHECK(err_code);
000058  bf00              NOP      
00005a  4625              MOV      r5,r4
00005c  2d00              CMP      r5,#0
00005e  d004              BEQ      |L6.106|
000060  bf00              NOP      
000062  4628              MOV      r0,r5
000064  f7fffffe          BL       app_error_handler_bare
000068  bf00              NOP      
                  |L6.106|
00006a  bf00              NOP      
;;;674    
;;;675        // Register with the SoftDevice handler module for BLE events.
;;;676        err_code = softdevice_ble_evt_handler_set(ble_evt_dispatch);
00006c  4810              LDR      r0,|L6.176|
00006e  f7fffffe          BL       softdevice_ble_evt_handler_set
000072  4604              MOV      r4,r0
;;;677        APP_ERROR_CHECK(err_code);
000074  bf00              NOP      
000076  4625              MOV      r5,r4
000078  2d00              CMP      r5,#0
00007a  d004              BEQ      |L6.134|
00007c  bf00              NOP      
00007e  4628              MOV      r0,r5
000080  f7fffffe          BL       app_error_handler_bare
000084  bf00              NOP      
                  |L6.134|
000086  bf00              NOP      
;;;678    
;;;679        // Register with the SoftDevice handler module for BLE events.
;;;680        err_code = softdevice_sys_evt_handler_set(sys_evt_dispatch);
000088  480a              LDR      r0,|L6.180|
00008a  f7fffffe          BL       softdevice_sys_evt_handler_set
00008e  4604              MOV      r4,r0
;;;681        APP_ERROR_CHECK(err_code);
000090  bf00              NOP      
000092  4625              MOV      r5,r4
000094  2d00              CMP      r5,#0
000096  d004              BEQ      |L6.162|
000098  bf00              NOP      
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       app_error_handler_bare
0000a0  bf00              NOP      
                  |L6.162|
0000a2  bf00              NOP      
;;;682    }
0000a4  b006              ADD      sp,sp,#0x18
0000a6  bd70              POP      {r4-r6,pc}
;;;683    
                          ENDP

                  |L6.168|
                          DCD      ||.constdata||
                  |L6.172|
                          DCD      BLE_EVT_BUFFER
                  |L6.176|
                          DCD      ble_evt_dispatch
                  |L6.180|
                          DCD      sys_evt_dispatch

                          AREA ||i.bsp_event_handler||, CODE, READONLY, ALIGN=2

                  bsp_event_handler PROC
;;;731     */
;;;732    static void bsp_event_handler(bsp_event_t event)
000000  b570              PUSH     {r4-r6,lr}
;;;733    {
000002  4605              MOV      r5,r0
;;;734        uint32_t err_code;
;;;735    
;;;736        switch (event)
000004  2d04              CMP      r5,#4
000006  d006              BEQ      |L7.22|
000008  2d07              CMP      r5,#7
00000a  d016              BEQ      |L7.58|
00000c  2d0a              CMP      r5,#0xa
00000e  d129              BNE      |L7.100|
;;;737        {
;;;738            case BSP_EVENT_SLEEP:
;;;739                sleep_mode_enter();
000010  f7fffffe          BL       sleep_mode_enter
;;;740                break; // BSP_EVENT_SLEEP
000014  e02a              B        |L7.108|
                  |L7.22|
;;;741    
;;;742            case BSP_EVENT_DISCONNECT:
;;;743                err_code = sd_ble_gap_disconnect(m_conn_handle,
000016  2113              MOVS     r1,#0x13
000018  4815              LDR      r0,|L7.112|
00001a  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
00001c  df76              SVC      #0x76
00001e  4604              MOV      r4,r0
;;;744                                                 BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
;;;745                if (err_code != NRF_ERROR_INVALID_STATE)
000020  2c08              CMP      r4,#8
000022  d009              BEQ      |L7.56|
;;;746                {
;;;747                    APP_ERROR_CHECK(err_code);
000024  bf00              NOP      
000026  4626              MOV      r6,r4
000028  2e00              CMP      r6,#0
00002a  d004              BEQ      |L7.54|
00002c  bf00              NOP      
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       app_error_handler_bare
000034  bf00              NOP      
                  |L7.54|
000036  bf00              NOP      
                  |L7.56|
;;;748                }
;;;749                break; // BSP_EVENT_DISCONNECT
000038  e018              B        |L7.108|
                  |L7.58|
;;;750    
;;;751            case BSP_EVENT_WHITELIST_OFF:
;;;752                if (m_conn_handle == BLE_CONN_HANDLE_INVALID)
00003a  480d              LDR      r0,|L7.112|
00003c  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
00003e  490d              LDR      r1,|L7.116|
000040  4288              CMP      r0,r1
000042  d10e              BNE      |L7.98|
;;;753                {
;;;754                    err_code = ble_advertising_restart_without_whitelist();
000044  f7fffffe          BL       ble_advertising_restart_without_whitelist
000048  4604              MOV      r4,r0
;;;755                    if (err_code != NRF_ERROR_INVALID_STATE)
00004a  2c08              CMP      r4,#8
00004c  d009              BEQ      |L7.98|
;;;756                    {
;;;757                        APP_ERROR_CHECK(err_code);
00004e  bf00              NOP      
000050  4626              MOV      r6,r4
000052  2e00              CMP      r6,#0
000054  d004              BEQ      |L7.96|
000056  bf00              NOP      
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       app_error_handler_bare
00005e  bf00              NOP      
                  |L7.96|
000060  bf00              NOP      
                  |L7.98|
;;;758                    }
;;;759                }
;;;760                break; // BSP_EVENT_KEY_0
000062  e003              B        |L7.108|
                  |L7.100|
;;;761    
;;;762            default:
;;;763    					bsp_btn_switch_event_handler(event);
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       bsp_btn_switch_event_handler
;;;764                break;
00006a  bf00              NOP      
                  |L7.108|
00006c  bf00              NOP                            ;740
;;;765        }
;;;766    }
00006e  bd70              POP      {r4-r6,pc}
;;;767    
                          ENDP

                  |L7.112|
                          DCD      m_conn_handle
                  |L7.116|
                          DCD      0x0000ffff

                          AREA ||i.buttons_switchs_leds_init||, CODE, READONLY, ALIGN=2

                  buttons_switchs_leds_init PROC
;;;799     */
;;;800    static void buttons_switchs_leds_init(bool * p_erase_bonds)
000000  b570              PUSH     {r4-r6,lr}
;;;801    {
000002  4606              MOV      r6,r0
;;;802       // bsp_event_t startup_event;
;;;803    
;;;804        uint32_t err_code = bsp_init(BSP_INIT_LED | BSP_INIT_BUTTONS,
000004  4a0f              LDR      r2,|L8.68|
000006  4910              LDR      r1,|L8.72|
000008  2003              MOVS     r0,#3
00000a  f7fffffe          BL       bsp_init
00000e  4604              MOV      r4,r0
;;;805                                     APP_TIMER_TICKS(100, APP_TIMER_PRESCALER),
;;;806                                     bsp_event_handler);
;;;807    
;;;808        APP_ERROR_CHECK(err_code);
000010  bf00              NOP      
000012  4625              MOV      r5,r4
000014  2d00              CMP      r5,#0
000016  d004              BEQ      |L8.34|
000018  bf00              NOP      
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       app_error_handler_bare
000020  bf00              NOP      
                  |L8.34|
000022  bf00              NOP      
;;;809    
;;;810    	  err_code=bsp_btn_switch_init(APP_TIMER_PRESCALER);
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       bsp_btn_switch_init
00002a  4604              MOV      r4,r0
;;;811    	  APP_ERROR_CHECK(err_code);
00002c  bf00              NOP      
00002e  4625              MOV      r5,r4
000030  2d00              CMP      r5,#0
000032  d004              BEQ      |L8.62|
000034  bf00              NOP      
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       app_error_handler_bare
00003c  bf00              NOP      
                  |L8.62|
00003e  bf00              NOP      
;;;812       // err_code = bsp_btn_ble_init(NULL, &startup_event);
;;;813       // APP_ERROR_CHECK(err_code);
;;;814    
;;;815       // *p_erase_bonds = (startup_event == BSP_EVENT_CLEAR_BONDING_DATA);
;;;816    }
000040  bd70              POP      {r4-r6,pc}
;;;817    
                          ENDP

000042  0000              DCW      0x0000
                  |L8.68|
                          DCD      bsp_event_handler
                  |L8.72|
                          DCD      0x00000ccd

                          AREA ||i.conn_params_error_handler||, CODE, READONLY, ALIGN=1

                  conn_params_error_handler PROC
;;;421     */
;;;422    static void conn_params_error_handler(uint32_t nrf_error)
000000  b510              PUSH     {r4,lr}
;;;423    {
000002  4604              MOV      r4,r0
;;;424        APP_ERROR_HANDLER(nrf_error);
000004  bf00              NOP      
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       app_error_handler_bare
00000c  bf00              NOP      
;;;425    }
00000e  bd10              POP      {r4,pc}
;;;426    
                          ENDP


                          AREA ||i.conn_params_init||, CODE, READONLY, ALIGN=2

                  conn_params_init PROC
;;;429     */
;;;430    static void conn_params_init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;431    {
000002  b087              SUB      sp,sp,#0x1c
;;;432        uint32_t               err_code;
;;;433        ble_conn_params_init_t cp_init;
;;;434    
;;;435        memset(&cp_init, 0, sizeof(cp_init));
000004  211c              MOVS     r1,#0x1c
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       __aeabi_memclr4
;;;436    
;;;437        cp_init.p_conn_params                  = NULL;
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;438        cp_init.first_conn_params_update_delay = FIRST_CONN_PARAMS_UPDATE_DELAY;
000010  2005              MOVS     r0,#5
000012  03c0              LSLS     r0,r0,#15
000014  9001              STR      r0,[sp,#4]
;;;439        cp_init.next_conn_params_update_delay  = NEXT_CONN_PARAMS_UPDATE_DELAY;
000016  200f              MOVS     r0,#0xf
000018  0400              LSLS     r0,r0,#16
00001a  9002              STR      r0,[sp,#8]
;;;440        cp_init.max_conn_params_update_count   = MAX_CONN_PARAMS_UPDATE_COUNT;
00001c  2103              MOVS     r1,#3
00001e  4668              MOV      r0,sp
000020  7301              STRB     r1,[r0,#0xc]
;;;441        cp_init.start_on_notify_cccd_handle    = BLE_GATT_HANDLE_INVALID;
000022  2100              MOVS     r1,#0
000024  81c1              STRH     r1,[r0,#0xe]
;;;442        cp_init.disconnect_on_fail             = false;
000026  7401              STRB     r1,[r0,#0x10]
;;;443        cp_init.evt_handler                    = on_conn_params_evt;
000028  4809              LDR      r0,|L10.80|
00002a  9005              STR      r0,[sp,#0x14]
;;;444        cp_init.error_handler                  = conn_params_error_handler;
00002c  4809              LDR      r0,|L10.84|
00002e  9006              STR      r0,[sp,#0x18]
;;;445    
;;;446        err_code = ble_conn_params_init(&cp_init);
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       ble_conn_params_init
000036  4604              MOV      r4,r0
;;;447        APP_ERROR_CHECK(err_code);
000038  bf00              NOP      
00003a  4625              MOV      r5,r4
00003c  2d00              CMP      r5,#0
00003e  d004              BEQ      |L10.74|
000040  bf00              NOP      
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       app_error_handler_bare
000048  bf00              NOP      
                  |L10.74|
00004a  bf00              NOP      
;;;448    }
00004c  b007              ADD      sp,sp,#0x1c
00004e  bd30              POP      {r4,r5,pc}
;;;449    
                          ENDP

                  |L10.80|
                          DCD      on_conn_params_evt
                  |L10.84|
                          DCD      conn_params_error_handler

                          AREA ||i.gap_params_init||, CODE, READONLY, ALIGN=2

                  gap_params_init PROC
;;;289     */
;;;290    static void gap_params_init(void)
000000  b53e              PUSH     {r1-r5,lr}
;;;291    {
;;;292        uint32_t                err_code;
;;;293        ble_gap_conn_params_t   gap_conn_params;
;;;294        ble_gap_conn_sec_mode_t sec_mode;
;;;295    
;;;296        BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);
000002  bf00              NOP      
000004  4668              MOV      r0,sp
000006  7800              LDRB     r0,[r0,#0]
000008  0901              LSRS     r1,r0,#4
00000a  0109              LSLS     r1,r1,#4
00000c  1c49              ADDS     r1,r1,#1
00000e  9100              STR      r1,[sp,#0]
000010  4668              MOV      r0,sp
000012  7800              LDRB     r0,[r0,#0]
000014  21f0              MOVS     r1,#0xf0
000016  4388              BICS     r0,r0,r1
000018  3010              ADDS     r0,r0,#0x10
00001a  9000              STR      r0,[sp,#0]
00001c  bf00              NOP      
;;;297    
;;;298        err_code = sd_ble_gap_device_name_set(&sec_mode,
00001e  220c              MOVS     r2,#0xc
000020  a114              ADR      r1,|L11.116|
000022  4668              MOV      r0,sp
000024  df7c              SVC      #0x7c
000026  4604              MOV      r4,r0
;;;299                                              (const uint8_t *)DEVICE_NAME,
;;;300                                              strlen(DEVICE_NAME));
;;;301        APP_ERROR_CHECK(err_code);
000028  bf00              NOP      
00002a  4625              MOV      r5,r4
00002c  2d00              CMP      r5,#0
00002e  d004              BEQ      |L11.58|
000030  bf00              NOP      
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       app_error_handler_bare
000038  bf00              NOP      
                  |L11.58|
00003a  bf00              NOP      
;;;302    
;;;303        /* YOUR_JOB: Use an appearance value matching the application's use case.
;;;304           err_code = sd_ble_gap_appearance_set(BLE_APPEARANCE_);
;;;305           APP_ERROR_CHECK(err_code); */
;;;306    
;;;307        memset(&gap_conn_params, 0, sizeof(gap_conn_params));
00003c  2000              MOVS     r0,#0
00003e  9001              STR      r0,[sp,#4]
000040  9002              STR      r0,[sp,#8]
;;;308    
;;;309        gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;
000042  2150              MOVS     r1,#0x50
000044  4668              MOV      r0,sp
000046  8081              STRH     r1,[r0,#4]
;;;310        gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;
000048  21a0              MOVS     r1,#0xa0
00004a  80c1              STRH     r1,[r0,#6]
;;;311        gap_conn_params.slave_latency     = SLAVE_LATENCY;
00004c  2100              MOVS     r1,#0
00004e  8101              STRH     r1,[r0,#8]
;;;312        gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;
000050  21ff              MOVS     r1,#0xff
000052  3191              ADDS     r1,r1,#0x91
000054  8141              STRH     r1,[r0,#0xa]
;;;313    
;;;314        err_code = sd_ble_gap_ppcp_set(&gap_conn_params);
000056  a801              ADD      r0,sp,#4
000058  df7a              SVC      #0x7a
00005a  4604              MOV      r4,r0
;;;315        APP_ERROR_CHECK(err_code);
00005c  bf00              NOP      
00005e  4625              MOV      r5,r4
000060  2d00              CMP      r5,#0
000062  d004              BEQ      |L11.110|
000064  bf00              NOP      
000066  4628              MOV      r0,r5
000068  f7fffffe          BL       app_error_handler_bare
00006c  bf00              NOP      
                  |L11.110|
00006e  bf00              NOP      
;;;316    }
000070  bd3e              POP      {r1-r5,pc}
;;;317    
                          ENDP

000072  0000              DCW      0x0000
                  |L11.116|
000074  534d4152          DCB      "SMART_LOCKER",0
000078  545f4c4f
00007c  434b4552
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;840     */
;;;841    int main(void)
000000  b508              PUSH     {r3,lr}
;;;842    {
;;;843        uint32_t err_code;
;;;844        bool     erase_bonds;
;;;845    
;;;846        // Initialize.
;;;847        err_code = NRF_LOG_INIT(NULL);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       nrf_log_init
000008  4604              MOV      r4,r0
;;;848        APP_ERROR_CHECK(err_code);
00000a  bf00              NOP      
00000c  4625              MOV      r5,r4
00000e  2d00              CMP      r5,#0
000010  d004              BEQ      |L12.28|
000012  bf00              NOP      
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       app_error_handler_bare
00001a  bf00              NOP      
                  |L12.28|
00001c  bf00              NOP      
;;;849    
;;;850        timers_init();
00001e  f7fffffe          BL       timers_init
;;;851        buttons_switchs_leds_init(&erase_bonds);
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       buttons_switchs_leds_init
;;;852        ble_stack_init();
000028  f7fffffe          BL       ble_stack_init
;;;853        peer_manager_init(erase_bonds);
00002c  4668              MOV      r0,sp
00002e  7800              LDRB     r0,[r0,#0]
000030  f7fffffe          BL       peer_manager_init
;;;854        if (erase_bonds == true)
000034  4668              MOV      r0,sp
000036  7800              LDRB     r0,[r0,#0]
000038  2801              CMP      r0,#1
00003a  d103              BNE      |L12.68|
;;;855        {
;;;856            NRF_LOG_INFO("Bonds erased!\r\n");
00003c  a113              ADR      r1,|L12.140|
00003e  2003              MOVS     r0,#3
000040  f7fffffe          BL       nrf_log_frontend_std_0
                  |L12.68|
;;;857        }
;;;858        gap_params_init();
000044  f7fffffe          BL       gap_params_init
;;;859        advertising_init();
000048  f7fffffe          BL       advertising_init
;;;860        services_init();
00004c  f7fffffe          BL       services_init
;;;861        conn_params_init();
000050  f7fffffe          BL       conn_params_init
;;;862    
;;;863        // Start execution.
;;;864        NRF_LOG_INFO("smart locker started!\r\n");
000054  a116              ADR      r1,|L12.176|
000056  2003              MOVS     r0,#3
000058  f7fffffe          BL       nrf_log_frontend_std_0
;;;865        application_timers_start();
00005c  f7fffffe          BL       application_timers_start
;;;866        err_code = ble_advertising_start(BLE_ADV_MODE_FAST);
000060  2003              MOVS     r0,#3
000062  f7fffffe          BL       ble_advertising_start
000066  4604              MOV      r4,r0
;;;867        APP_ERROR_CHECK(err_code);
000068  bf00              NOP      
00006a  4625              MOV      r5,r4
00006c  2d00              CMP      r5,#0
00006e  d004              BEQ      |L12.122|
000070  bf00              NOP      
000072  4628              MOV      r0,r5
000074  f7fffffe          BL       app_error_handler_bare
000078  bf00              NOP      
                  |L12.122|
00007a  bf00              NOP      
;;;868    
;;;869        // Enter main loop.
;;;870        for (;;)
00007c  bf00              NOP      
                  |L12.126|
;;;871        {
;;;872            if (NRF_LOG_PROCESS() == false)
00007e  f7fffffe          BL       nrf_log_frontend_dequeue
000082  2800              CMP      r0,#0
000084  d1fb              BNE      |L12.126|
;;;873            {
;;;874                power_manage();
000086  f7fffffe          BL       power_manage
00008a  e7f8              B        |L12.126|
;;;875            }
;;;876        }
;;;877    }
;;;878    
                          ENDP

                  |L12.140|
00008c  1b5b313b          DCB      27,"[1;32mMAIN.c:INFO:Bonds erased!\r\n",0
000090  33326d4d
000094  41494e2e
000098  633a494e
00009c  464f3a42
0000a0  6f6e6473
0000a4  20657261
0000a8  73656421
0000ac  0d0a00  
0000af  00                DCB      0
                  |L12.176|
0000b0  1b5b313b          DCB      27,"[1;32mMAIN.c:INFO:smart locker started!\r\n",0
0000b4  33326d4d
0000b8  41494e2e
0000bc  633a494e
0000c0  464f3a73
0000c4  6d617274
0000c8  206c6f63
0000cc  6b657220
0000d0  73746172
0000d4  74656421
0000d8  0d0a00  
0000db  00                DCB      0

                          AREA ||i.on_adv_evt||, CODE, READONLY, ALIGN=2

                  on_adv_evt PROC
;;;489     */
;;;490    static void on_adv_evt(ble_adv_evt_t ble_adv_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;491    {
000002  4605              MOV      r5,r0
;;;492        uint32_t err_code;
;;;493    
;;;494        switch (ble_adv_evt)
000004  2d00              CMP      r5,#0
000006  d013              BEQ      |L13.48|
000008  2d03              CMP      r5,#3
00000a  d112              BNE      |L13.50|
;;;495        {
;;;496            case BLE_ADV_EVT_FAST:
;;;497                NRF_LOG_INFO("Fast advertising\r\n");
00000c  a10a              ADR      r1,|L13.56|
00000e  f7fffffe          BL       nrf_log_frontend_std_0
;;;498                err_code = bsp_indication_set(BSP_INDICATE_ADVERTISING);
000012  2002              MOVS     r0,#2
000014  f7fffffe          BL       bsp_indication_set
000018  4604              MOV      r4,r0
;;;499                APP_ERROR_CHECK(err_code);
00001a  bf00              NOP      
00001c  4626              MOV      r6,r4
00001e  2e00              CMP      r6,#0
000020  d004              BEQ      |L13.44|
000022  bf00              NOP      
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       app_error_handler_bare
00002a  bf00              NOP      
                  |L13.44|
00002c  bf00              NOP      
;;;500                break;
00002e  e001              B        |L13.52|
                  |L13.48|
;;;501    
;;;502            case BLE_ADV_EVT_IDLE:
;;;503                //sleep_mode_enter();
;;;504                break;
000030  e000              B        |L13.52|
                  |L13.50|
;;;505    
;;;506            default:
;;;507                break;
000032  bf00              NOP      
                  |L13.52|
000034  bf00              NOP                            ;500
;;;508        }
;;;509    }
000036  bd70              POP      {r4-r6,pc}
;;;510    
                          ENDP

                  |L13.56|
000038  1b5b313b          DCB      27,"[1;32mMAIN.c:INFO:Fast advertising\r\n",0
00003c  33326d4d
000040  41494e2e
000044  633a494e
000048  464f3a46
00004c  61737420
000050  61647665
000054  72746973
000058  696e670d
00005c  0a00    
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.on_ble_evt||, CODE, READONLY, ALIGN=2

                  on_ble_evt PROC
;;;515     */
;;;516    static void on_ble_evt(ble_evt_t * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;517    {
000002  b088              SUB      sp,sp,#0x20
000004  4605              MOV      r5,r0
;;;518        uint32_t err_code = NRF_SUCCESS;
000006  2400              MOVS     r4,#0
;;;519    
;;;520        switch (p_ble_evt->header.evt_id)
000008  8828              LDRH     r0,[r5,#0]
00000a  283a              CMP      r0,#0x3a
00000c  d035              BEQ      |L14.122|
00000e  dc06              BGT      |L14.30|
000010  2802              CMP      r0,#2
000012  d058              BEQ      |L14.198|
000014  2810              CMP      r0,#0x10
000016  d01a              BEQ      |L14.78|
000018  2811              CMP      r0,#0x11
                  |L14.26|
00001a  d17d              BNE      |L14.280|
00001c  e004              B        |L14.40|
                  |L14.30|
00001e  2851              CMP      r0,#0x51
000020  d060              BEQ      |L14.228|
000022  2855              CMP      r0,#0x55
000024  d1f9              BNE      |L14.26|
000026  e03b              B        |L14.160|
                  |L14.40|
;;;521        {
;;;522            case BLE_GAP_EVT_DISCONNECTED:
;;;523                NRF_LOG_INFO("Disconnected.\r\n");
000028  a14a              ADR      r1,|L14.340|
00002a  2003              MOVS     r0,#3
00002c  f7fffffe          BL       nrf_log_frontend_std_0
;;;524                err_code = bsp_indication_set(BSP_INDICATE_IDLE);
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       bsp_indication_set
000036  4604              MOV      r4,r0
;;;525                APP_ERROR_CHECK(err_code);
000038  bf00              NOP      
00003a  4626              MOV      r6,r4
00003c  2e00              CMP      r6,#0
00003e  d004              BEQ      |L14.74|
000040  bf00              NOP      
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       app_error_handler_bare
000048  bf00              NOP      
                  |L14.74|
00004a  bf00              NOP      
;;;526                break; // BLE_GAP_EVT_DISCONNECTED
00004c  e07e              B        |L14.332|
                  |L14.78|
;;;527    
;;;528            case BLE_GAP_EVT_CONNECTED:
;;;529                NRF_LOG_INFO("Connected.\r\n");
00004e  a14a              ADR      r1,|L14.376|
000050  2003              MOVS     r0,#3
000052  f7fffffe          BL       nrf_log_frontend_std_0
;;;530                err_code = bsp_indication_set(BSP_INDICATE_CONNECTED);
000056  2007              MOVS     r0,#7
000058  f7fffffe          BL       bsp_indication_set
00005c  4604              MOV      r4,r0
;;;531                APP_ERROR_CHECK(err_code);
00005e  bf00              NOP      
000060  4626              MOV      r6,r4
000062  2e00              CMP      r6,#0
000064  d004              BEQ      |L14.112|
000066  bf00              NOP      
000068  4630              MOV      r0,r6
00006a  f7fffffe          BL       app_error_handler_bare
00006e  bf00              NOP      
                  |L14.112|
000070  bf00              NOP      
;;;532                m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
000072  88a8              LDRH     r0,[r5,#4]
000074  4948              LDR      r1,|L14.408|
000076  8008              STRH     r0,[r1,#0]
;;;533                break; // BLE_GAP_EVT_CONNECTED
000078  e068              B        |L14.332|
                  |L14.122|
;;;534    
;;;535            case BLE_GATTC_EVT_TIMEOUT:
;;;536                // Disconnect on GATT Client timeout event.
;;;537                NRF_LOG_DEBUG("GATT Client Timeout.\r\n");
00007a  a148              ADR      r1,|L14.412|
00007c  2004              MOVS     r0,#4
00007e  f7fffffe          BL       nrf_log_frontend_std_0
;;;538                err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gattc_evt.conn_handle,
000082  88a8              LDRH     r0,[r5,#4]
000084  2113              MOVS     r1,#0x13
000086  df76              SVC      #0x76
000088  4604              MOV      r4,r0
;;;539                                                 BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
;;;540                APP_ERROR_CHECK(err_code);
00008a  bf00              NOP      
00008c  4626              MOV      r6,r4
00008e  2e00              CMP      r6,#0
000090  d004              BEQ      |L14.156|
000092  bf00              NOP      
000094  4630              MOV      r0,r6
000096  f7fffffe          BL       app_error_handler_bare
00009a  bf00              NOP      
                  |L14.156|
00009c  bf00              NOP      
;;;541                break; // BLE_GATTC_EVT_TIMEOUT
00009e  e055              B        |L14.332|
                  |L14.160|
;;;542    
;;;543            case BLE_GATTS_EVT_TIMEOUT:
;;;544                // Disconnect on GATT Server timeout event.
;;;545                NRF_LOG_DEBUG("GATT Server Timeout.\r\n");
0000a0  a149              ADR      r1,|L14.456|
0000a2  2004              MOVS     r0,#4
0000a4  f7fffffe          BL       nrf_log_frontend_std_0
;;;546                err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gatts_evt.conn_handle,
0000a8  88a8              LDRH     r0,[r5,#4]
0000aa  2113              MOVS     r1,#0x13
0000ac  df76              SVC      #0x76
0000ae  4604              MOV      r4,r0
;;;547                                                 BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
;;;548                APP_ERROR_CHECK(err_code);
0000b0  bf00              NOP      
0000b2  4626              MOV      r6,r4
0000b4  2e00              CMP      r6,#0
0000b6  d004              BEQ      |L14.194|
0000b8  bf00              NOP      
0000ba  4630              MOV      r0,r6
0000bc  f7fffffe          BL       app_error_handler_bare
0000c0  bf00              NOP      
                  |L14.194|
0000c2  bf00              NOP      
;;;549                break; // BLE_GATTS_EVT_TIMEOUT
0000c4  e042              B        |L14.332|
                  |L14.198|
;;;550    
;;;551            case BLE_EVT_USER_MEM_REQUEST:
;;;552                err_code = sd_ble_user_mem_reply(p_ble_evt->evt.gattc_evt.conn_handle, NULL);
0000c6  88a8              LDRH     r0,[r5,#4]
0000c8  2100              MOVS     r1,#0
0000ca  df67              SVC      #0x67
0000cc  4604              MOV      r4,r0
;;;553                APP_ERROR_CHECK(err_code);
0000ce  bf00              NOP      
0000d0  4626              MOV      r6,r4
0000d2  2e00              CMP      r6,#0
0000d4  d004              BEQ      |L14.224|
0000d6  bf00              NOP      
0000d8  4630              MOV      r0,r6
0000da  f7fffffe          BL       app_error_handler_bare
0000de  bf00              NOP      
                  |L14.224|
0000e0  bf00              NOP      
;;;554                break; // BLE_EVT_USER_MEM_REQUEST
0000e2  e033              B        |L14.332|
                  |L14.228|
;;;555    
;;;556            case BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST:
;;;557            {
;;;558                ble_gatts_evt_rw_authorize_request_t  req;
;;;559                ble_gatts_rw_authorize_reply_params_t auth_reply;
;;;560    
;;;561                req = p_ble_evt->evt.gatts_evt.params.authorize_request;
0000e4  2210              MOVS     r2,#0x10
0000e6  1da9              ADDS     r1,r5,#6
0000e8  a804              ADD      r0,sp,#0x10
0000ea  f7fffffe          BL       __aeabi_memcpy
;;;562    
;;;563                if (req.type != BLE_GATTS_AUTHORIZE_TYPE_INVALID)
0000ee  4668              MOV      r0,sp
0000f0  7c00              LDRB     r0,[r0,#0x10]
0000f2  2800              CMP      r0,#0
0000f4  d028              BEQ      |L14.328|
;;;564                {
;;;565                    if ((req.request.write.op == BLE_GATTS_OP_PREP_WRITE_REQ)     ||
0000f6  a804              ADD      r0,sp,#0x10
0000f8  7a00              LDRB     r0,[r0,#8]
0000fa  2804              CMP      r0,#4
0000fc  d007              BEQ      |L14.270|
;;;566                        (req.request.write.op == BLE_GATTS_OP_EXEC_WRITE_REQ_NOW) ||
0000fe  a804              ADD      r0,sp,#0x10
000100  7a00              LDRB     r0,[r0,#8]
000102  2806              CMP      r0,#6
000104  d003              BEQ      |L14.270|
;;;567                        (req.request.write.op == BLE_GATTS_OP_EXEC_WRITE_REQ_CANCEL))
000106  a804              ADD      r0,sp,#0x10
000108  7a00              LDRB     r0,[r0,#8]
00010a  2805              CMP      r0,#5
00010c  d11c              BNE      |L14.328|
                  |L14.270|
;;;568                    {
;;;569                        if (req.type == BLE_GATTS_AUTHORIZE_TYPE_WRITE)
00010e  4668              MOV      r0,sp
000110  7c00              LDRB     r0,[r0,#0x10]
000112  2802              CMP      r0,#2
000114  d104              BNE      |L14.288|
;;;570                        {
;;;571                            auth_reply.type = BLE_GATTS_AUTHORIZE_TYPE_WRITE;
000116  e000              B        |L14.282|
                  |L14.280|
000118  e017              B        |L14.330|
                  |L14.282|
00011a  4669              MOV      r1,sp
00011c  7008              STRB     r0,[r1,#0]
00011e  e002              B        |L14.294|
                  |L14.288|
;;;572                        }
;;;573                        else
;;;574                        {
;;;575                            auth_reply.type = BLE_GATTS_AUTHORIZE_TYPE_READ;
000120  2001              MOVS     r0,#1
000122  4669              MOV      r1,sp
000124  7008              STRB     r0,[r1,#0]
                  |L14.294|
;;;576                        }
;;;577                        auth_reply.params.write.gatt_status = APP_FEATURE_NOT_SUPPORTED;
000126  20ff              MOVS     r0,#0xff
000128  3083              ADDS     r0,r0,#0x83
00012a  4669              MOV      r1,sp
00012c  8088              STRH     r0,[r1,#4]
;;;578                        err_code = sd_ble_gatts_rw_authorize_reply(p_ble_evt->evt.gatts_evt.conn_handle,
00012e  88a8              LDRH     r0,[r5,#4]
000130  dfa8              SVC      #0xa8
000132  4604              MOV      r4,r0
;;;579                                                                   &auth_reply);
;;;580                        APP_ERROR_CHECK(err_code);
000134  bf00              NOP      
000136  4626              MOV      r6,r4
000138  2e00              CMP      r6,#0
00013a  d004              BEQ      |L14.326|
00013c  bf00              NOP      
00013e  4630              MOV      r0,r6
000140  f7fffffe          BL       app_error_handler_bare
000144  bf00              NOP      
                  |L14.326|
000146  bf00              NOP      
                  |L14.328|
;;;581                    }
;;;582                }
;;;583            } break; // BLE_GATTS_EVT_RW_AUTHORIZE_REQUEST
000148  e000              B        |L14.332|
                  |L14.330|
;;;584    
;;;585    #if (NRF_SD_BLE_API_VERSION == 3)
;;;586            case BLE_GATTS_EVT_EXCHANGE_MTU_REQUEST:
;;;587                err_code = sd_ble_gatts_exchange_mtu_reply(p_ble_evt->evt.gatts_evt.conn_handle,
;;;588                                                           NRF_BLE_MAX_MTU_SIZE);
;;;589                APP_ERROR_CHECK(err_code);
;;;590                break; // BLE_GATTS_EVT_EXCHANGE_MTU_REQUEST
;;;591    #endif
;;;592    
;;;593            default:
;;;594                // No implementation needed.
;;;595                break;
00014a  bf00              NOP      
                  |L14.332|
00014c  bf00              NOP                            ;526
;;;596        }
;;;597    }
00014e  b008              ADD      sp,sp,#0x20
000150  bd70              POP      {r4-r6,pc}
;;;598    
                          ENDP

000152  0000              DCW      0x0000
                  |L14.340|
000154  1b5b313b          DCB      27,"[1;32mMAIN.c:INFO:Disconnected.\r\n",0
000158  33326d4d
00015c  41494e2e
000160  633a494e
000164  464f3a44
000168  6973636f
00016c  6e6e6563
000170  7465642e
000174  0d0a00  
000177  00                DCB      0
                  |L14.376|
000178  1b5b313b          DCB      27,"[1;32mMAIN.c:INFO:Connected.\r\n",0
00017c  33326d4d
000180  41494e2e
000184  633a494e
000188  464f3a43
00018c  6f6e6e65
000190  63746564
000194  2e0d0a00
                  |L14.408|
                          DCD      m_conn_handle
                  |L14.412|
00019c  1b5b313b          DCB      27,"[1;32mMAIN.c:DEBUG:GATT Client Timeout.\r\n",0
0001a0  33326d4d
0001a4  41494e2e
0001a8  633a4445
0001ac  4255473a
0001b0  47415454
0001b4  20436c69
0001b8  656e7420
0001bc  54696d65
0001c0  6f75742e
0001c4  0d0a00  
0001c7  00                DCB      0
                  |L14.456|
0001c8  1b5b313b          DCB      27,"[1;32mMAIN.c:DEBUG:GATT Server Timeout.\r\n",0
0001cc  33326d4d
0001d0  41494e2e
0001d4  633a4445
0001d8  4255473a
0001dc  47415454
0001e0  20536572
0001e4  76657220
0001e8  54696d65
0001ec  6f75742e
0001f0  0d0a00  
0001f3  00                DCB      0

                          AREA ||i.on_conn_params_evt||, CODE, READONLY, ALIGN=2

                  on_conn_params_evt PROC
;;;405     */
;;;406    static void on_conn_params_evt(ble_conn_params_evt_t * p_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;407    {
000002  4605              MOV      r5,r0
;;;408        uint32_t err_code;
;;;409    
;;;410        if (p_evt->evt_type == BLE_CONN_PARAMS_EVT_FAILED)
000004  7828              LDRB     r0,[r5,#0]
000006  2800              CMP      r0,#0
000008  d10e              BNE      |L15.40|
;;;411        {
;;;412            err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
00000a  213b              MOVS     r1,#0x3b
00000c  4807              LDR      r0,|L15.44|
00000e  8800              LDRH     r0,[r0,#0]  ; m_conn_handle
000010  df76              SVC      #0x76
000012  4604              MOV      r4,r0
;;;413            APP_ERROR_CHECK(err_code);
000014  bf00              NOP      
000016  4626              MOV      r6,r4
000018  2e00              CMP      r6,#0
00001a  d004              BEQ      |L15.38|
00001c  bf00              NOP      
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       app_error_handler_bare
000024  bf00              NOP      
                  |L15.38|
000026  bf00              NOP      
                  |L15.40|
;;;414        }
;;;415    }
000028  bd70              POP      {r4-r6,pc}
;;;416    
                          ENDP

00002a  0000              DCW      0x0000
                  |L15.44|
                          DCD      m_conn_handle

                          AREA ||i.peer_manager_init||, CODE, READONLY, ALIGN=2

                  peer_manager_init PROC
;;;689     */
;;;690    static void peer_manager_init(bool erase_bonds)
000000  b57c              PUSH     {r2-r6,lr}
;;;691    {
000002  4605              MOV      r5,r0
;;;692        ble_gap_sec_params_t sec_param;
;;;693        ret_code_t           err_code;
;;;694    
;;;695        err_code = pm_init();
000004  f7fffffe          BL       pm_init
000008  4604              MOV      r4,r0
;;;696        APP_ERROR_CHECK(err_code);
00000a  bf00              NOP      
00000c  4626              MOV      r6,r4
00000e  2e00              CMP      r6,#0
000010  d004              BEQ      |L16.28|
000012  bf00              NOP      
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       app_error_handler_bare
00001a  bf00              NOP      
                  |L16.28|
00001c  bf00              NOP      
;;;697    
;;;698        if (erase_bonds)
00001e  2d00              CMP      r5,#0
000020  d00c              BEQ      |L16.60|
;;;699        {
;;;700            err_code = pm_peers_delete();
000022  f7fffffe          BL       pm_peers_delete
000026  4604              MOV      r4,r0
;;;701            APP_ERROR_CHECK(err_code);
000028  bf00              NOP      
00002a  4626              MOV      r6,r4
00002c  2e00              CMP      r6,#0
00002e  d004              BEQ      |L16.58|
000030  bf00              NOP      
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       app_error_handler_bare
000038  bf00              NOP      
                  |L16.58|
00003a  bf00              NOP      
                  |L16.60|
;;;702        }
;;;703    
;;;704        memset(&sec_param, 0, sizeof(ble_gap_sec_params_t));
00003c  2000              MOVS     r0,#0
00003e  9000              STR      r0,[sp,#0]
000040  9001              STR      r0,[sp,#4]
;;;705    
;;;706        // Security parameters to be used for all security procedures.
;;;707        sec_param.bond           = SEC_PARAM_BOND;
000042  4668              MOV      r0,sp
000044  7800              LDRB     r0,[r0,#0]
000046  0841              LSRS     r1,r0,#1
000048  0049              LSLS     r1,r1,#1
00004a  1c49              ADDS     r1,r1,#1
00004c  4668              MOV      r0,sp
00004e  7001              STRB     r1,[r0,#0]
;;;708        sec_param.mitm           = SEC_PARAM_MITM;
000050  7800              LDRB     r0,[r0,#0]
000052  2102              MOVS     r1,#2
000054  4388              BICS     r0,r0,r1
000056  4601              MOV      r1,r0
000058  4668              MOV      r0,sp
00005a  7001              STRB     r1,[r0,#0]
;;;709        sec_param.lesc           = SEC_PARAM_LESC;
00005c  7800              LDRB     r0,[r0,#0]
00005e  2104              MOVS     r1,#4
000060  4388              BICS     r0,r0,r1
000062  4601              MOV      r1,r0
000064  4668              MOV      r0,sp
000066  7001              STRB     r1,[r0,#0]
;;;710        sec_param.keypress       = SEC_PARAM_KEYPRESS;
000068  7800              LDRB     r0,[r0,#0]
00006a  2108              MOVS     r1,#8
00006c  4388              BICS     r0,r0,r1
00006e  4601              MOV      r1,r0
000070  4668              MOV      r0,sp
000072  7001              STRB     r1,[r0,#0]
;;;711        sec_param.io_caps        = SEC_PARAM_IO_CAPABILITIES;
000074  7800              LDRB     r0,[r0,#0]
000076  2170              MOVS     r1,#0x70
000078  4388              BICS     r0,r0,r1
00007a  4601              MOV      r1,r0
00007c  3130              ADDS     r1,r1,#0x30
00007e  4668              MOV      r0,sp
000080  7001              STRB     r1,[r0,#0]
;;;712        sec_param.oob            = SEC_PARAM_OOB;
000082  7800              LDRB     r0,[r0,#0]
000084  2180              MOVS     r1,#0x80
000086  4388              BICS     r0,r0,r1
000088  4601              MOV      r1,r0
00008a  4668              MOV      r0,sp
00008c  7001              STRB     r1,[r0,#0]
;;;713        sec_param.min_key_size   = SEC_PARAM_MIN_KEY_SIZE;
00008e  2107              MOVS     r1,#7
000090  7041              STRB     r1,[r0,#1]
;;;714        sec_param.max_key_size   = SEC_PARAM_MAX_KEY_SIZE;
000092  2110              MOVS     r1,#0x10
000094  7081              STRB     r1,[r0,#2]
;;;715        sec_param.kdist_own.enc  = 1;
000096  78c0              LDRB     r0,[r0,#3]
000098  0841              LSRS     r1,r0,#1
00009a  0049              LSLS     r1,r1,#1
00009c  1c49              ADDS     r1,r1,#1
00009e  4668              MOV      r0,sp
0000a0  70c1              STRB     r1,[r0,#3]
;;;716        sec_param.kdist_own.id   = 1;
0000a2  78c0              LDRB     r0,[r0,#3]
0000a4  2102              MOVS     r1,#2
0000a6  4388              BICS     r0,r0,r1
0000a8  1c81              ADDS     r1,r0,#2
0000aa  4668              MOV      r0,sp
0000ac  70c1              STRB     r1,[r0,#3]
;;;717        sec_param.kdist_peer.enc = 1;
0000ae  7900              LDRB     r0,[r0,#4]
0000b0  0841              LSRS     r1,r0,#1
0000b2  0049              LSLS     r1,r1,#1
0000b4  1c49              ADDS     r1,r1,#1
0000b6  4668              MOV      r0,sp
0000b8  7101              STRB     r1,[r0,#4]
;;;718        sec_param.kdist_peer.id  = 1;
0000ba  7900              LDRB     r0,[r0,#4]
0000bc  2102              MOVS     r1,#2
0000be  4388              BICS     r0,r0,r1
0000c0  1c80              ADDS     r0,r0,#2
0000c2  4669              MOV      r1,sp
0000c4  7108              STRB     r0,[r1,#4]
;;;719    
;;;720        err_code = pm_sec_params_set(&sec_param);
0000c6  4668              MOV      r0,sp
0000c8  f7fffffe          BL       pm_sec_params_set
0000cc  4604              MOV      r4,r0
;;;721        APP_ERROR_CHECK(err_code);
0000ce  bf00              NOP      
0000d0  4626              MOV      r6,r4
0000d2  2e00              CMP      r6,#0
0000d4  d004              BEQ      |L16.224|
0000d6  bf00              NOP      
0000d8  4630              MOV      r0,r6
0000da  f7fffffe          BL       app_error_handler_bare
0000de  bf00              NOP      
                  |L16.224|
0000e0  bf00              NOP      
;;;722    
;;;723        err_code = pm_register(pm_evt_handler);
0000e2  4807              LDR      r0,|L16.256|
0000e4  f7fffffe          BL       pm_register
0000e8  4604              MOV      r4,r0
;;;724        APP_ERROR_CHECK(err_code);
0000ea  bf00              NOP      
0000ec  4626              MOV      r6,r4
0000ee  2e00              CMP      r6,#0
0000f0  d004              BEQ      |L16.252|
0000f2  bf00              NOP      
0000f4  4630              MOV      r0,r6
0000f6  f7fffffe          BL       app_error_handler_bare
0000fa  bf00              NOP      
                  |L16.252|
0000fc  bf00              NOP      
;;;725    }
0000fe  bd7c              POP      {r2-r6,pc}
;;;726    
                          ENDP

                  |L16.256|
                          DCD      pm_evt_handler

                          AREA ||i.pm_evt_handler||, CODE, READONLY, ALIGN=2

                  pm_evt_handler PROC
;;;165     */
;;;166    static void pm_evt_handler(pm_evt_t const * p_evt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;167    {
000002  4604              MOV      r4,r0
;;;168        ret_code_t err_code;
;;;169    
;;;170        switch (p_evt->evt_id)
000004  7820              LDRB     r0,[r4,#0]
000006  0003              MOVS     r3,r0
000008  f7fffffe          BL       __ARM_common_switch8
00000c  110a690f          DCB      0x11,0x0a,0x69,0x0f
000010  1c1d245d          DCB      0x1c,0x1d,0x24,0x5d
000014  6a3c6b47          DCB      0x6a,0x3c,0x6b,0x47
000018  36526c39          DCB      0x36,0x52,0x6c,0x39
00001c  6d6e6800          DCB      0x6d,0x6e,0x68,0x00
;;;171        {
;;;172            case PM_EVT_BONDED_PEER_CONNECTED:
;;;173            {
;;;174                NRF_LOG_INFO("Connected to a previously bonded device.\r\n");
000020  a133              ADR      r1,|L17.240|
000022  2003              MOVS     r0,#3
000024  f7fffffe          BL       nrf_log_frontend_std_0
;;;175            } break;
000028  e05f              B        |L17.234|
;;;176    
;;;177            case PM_EVT_CONN_SEC_SUCCEEDED:
;;;178            {
;;;179                NRF_LOG_INFO("Connection secured. Role: %d. conn_handle: %d, Procedure: %d\r\n",
00002a  8860              LDRH     r0,[r4,#2]
00002c  f7fffffe          BL       ble_conn_state_role
000030  4606              MOV      r6,r0
000032  7a20              LDRB     r0,[r4,#8]
000034  9000              STR      r0,[sp,#0]
000036  8863              LDRH     r3,[r4,#2]
000038  4632              MOV      r2,r6
00003a  493d              LDR      r1,|L17.304|
00003c  2003              MOVS     r0,#3
00003e  f7fffffe          BL       nrf_log_frontend_std_3
;;;180                             ble_conn_state_role(p_evt->conn_handle),
;;;181                             p_evt->conn_handle,
;;;182                             p_evt->params.conn_sec_succeeded.procedure);
;;;183            } break;
000042  e052              B        |L17.234|
;;;184    
;;;185            case PM_EVT_CONN_SEC_FAILED:
;;;186            {
;;;187                /* Often, when securing fails, it shouldn't be restarted, for security reasons.
;;;188                 * Other times, it can be restarted directly.
;;;189                 * Sometimes it can be restarted, but only after changing some Security Parameters.
;;;190                 * Sometimes, it cannot be restarted until the link is disconnected and reconnected.
;;;191                 * Sometimes it is impossible, to secure the link, or the peer device does not support it.
;;;192                 * How to handle this error is highly application dependent. */
;;;193            } break;
000044  e051              B        |L17.234|
;;;194    
;;;195            case PM_EVT_CONN_SEC_CONFIG_REQ:
;;;196            {
;;;197                // Reject pairing request from an already bonded peer.
;;;198                pm_conn_sec_config_t conn_sec_config = {.allow_repairing = false};
000046  2000              MOVS     r0,#0
000048  9000              STR      r0,[sp,#0]
;;;199                pm_conn_sec_config_reply(p_evt->conn_handle, &conn_sec_config);
00004a  8860              LDRH     r0,[r4,#2]
00004c  4669              MOV      r1,sp
00004e  f7fffffe          BL       pm_conn_sec_config_reply
;;;200            } break;
000052  e04a              B        |L17.234|
;;;201    
;;;202            case PM_EVT_STORAGE_FULL:
;;;203            {
;;;204                // Run garbage collection on the flash.
;;;205                err_code = fds_gc();
000054  f7fffffe          BL       fds_gc
000058  4605              MOV      r5,r0
;;;206                if (err_code == FDS_ERR_BUSY || err_code == FDS_ERR_NO_SPACE_IN_QUEUES)
00005a  2d0e              CMP      r5,#0xe
00005c  d00b              BEQ      |L17.118|
00005e  2d08              CMP      r5,#8
000060  d009              BEQ      |L17.118|
;;;207                {
;;;208                    // Retry.
;;;209                }
;;;210                else
;;;211                {
;;;212                    APP_ERROR_CHECK(err_code);
000062  bf00              NOP      
000064  462e              MOV      r6,r5
000066  2e00              CMP      r6,#0
000068  d004              BEQ      |L17.116|
00006a  bf00              NOP      
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       app_error_handler_bare
000072  bf00              NOP      
                  |L17.116|
000074  bf00              NOP      
                  |L17.118|
;;;213                }
;;;214            } break;
000076  e038              B        |L17.234|
;;;215    
;;;216            case PM_EVT_PEERS_DELETE_SUCCEEDED:
;;;217            {
;;;218                advertising_start();
000078  f7fffffe          BL       advertising_start
;;;219            } break;
00007c  e035              B        |L17.234|
;;;220    
;;;221            case PM_EVT_LOCAL_DB_CACHE_APPLY_FAILED:
;;;222            {
;;;223                // The local database has likely changed, send service changed indications.
;;;224                pm_local_database_has_changed();
00007e  f7fffffe          BL       pm_local_database_has_changed
;;;225            } break;
000082  e032              B        |L17.234|
;;;226    
;;;227            case PM_EVT_PEER_DATA_UPDATE_FAILED:
;;;228            {
;;;229                // Assert.
;;;230                APP_ERROR_CHECK(p_evt->params.peer_data_update_failed.error);
000084  bf00              NOP      
000086  6926              LDR      r6,[r4,#0x10]
000088  2e00              CMP      r6,#0
00008a  d004              BEQ      |L17.150|
00008c  bf00              NOP      
00008e  4630              MOV      r0,r6
000090  f7fffffe          BL       app_error_handler_bare
000094  bf00              NOP      
                  |L17.150|
000096  bf00              NOP      
;;;231            } break;
000098  e027              B        |L17.234|
;;;232    
;;;233            case PM_EVT_PEER_DELETE_FAILED:
;;;234            {
;;;235                // Assert.
;;;236                APP_ERROR_CHECK(p_evt->params.peer_delete_failed.error);
00009a  bf00              NOP      
00009c  68a6              LDR      r6,[r4,#8]
00009e  2e00              CMP      r6,#0
0000a0  d004              BEQ      |L17.172|
0000a2  bf00              NOP      
0000a4  4630              MOV      r0,r6
0000a6  f7fffffe          BL       app_error_handler_bare
0000aa  bf00              NOP      
                  |L17.172|
0000ac  bf00              NOP      
;;;237            } break;
0000ae  e01c              B        |L17.234|
;;;238    
;;;239            case PM_EVT_PEERS_DELETE_FAILED:
;;;240            {
;;;241                // Assert.
;;;242                APP_ERROR_CHECK(p_evt->params.peers_delete_failed_evt.error);
0000b0  bf00              NOP      
0000b2  68a6              LDR      r6,[r4,#8]
0000b4  2e00              CMP      r6,#0
0000b6  d004              BEQ      |L17.194|
0000b8  bf00              NOP      
0000ba  4630              MOV      r0,r6
0000bc  f7fffffe          BL       app_error_handler_bare
0000c0  bf00              NOP      
                  |L17.194|
0000c2  bf00              NOP      
;;;243            } break;
0000c4  e011              B        |L17.234|
;;;244    
;;;245            case PM_EVT_ERROR_UNEXPECTED:
;;;246            {
;;;247                // Assert.
;;;248                APP_ERROR_CHECK(p_evt->params.error_unexpected.error);
0000c6  bf00              NOP      
0000c8  68a6              LDR      r6,[r4,#8]
0000ca  2e00              CMP      r6,#0
0000cc  d004              BEQ      |L17.216|
0000ce  bf00              NOP      
0000d0  4630              MOV      r0,r6
0000d2  f7fffffe          BL       app_error_handler_bare
0000d6  bf00              NOP      
                  |L17.216|
0000d8  bf00              NOP      
;;;249            } break;
0000da  e006              B        |L17.234|
;;;250    
;;;251            case PM_EVT_CONN_SEC_START:
0000dc  bf00              NOP      
;;;252            case PM_EVT_PEER_DATA_UPDATE_SUCCEEDED:
0000de  bf00              NOP      
;;;253            case PM_EVT_PEER_DELETE_SUCCEEDED:
0000e0  bf00              NOP      
;;;254            case PM_EVT_LOCAL_DB_CACHE_APPLIED:
0000e2  bf00              NOP      
;;;255            case PM_EVT_SERVICE_CHANGED_IND_SENT:
0000e4  bf00              NOP      
;;;256            case PM_EVT_SERVICE_CHANGED_IND_CONFIRMED:
0000e6  bf00              NOP      
;;;257            default:
;;;258                break;
0000e8  bf00              NOP      
                  |L17.234|
0000ea  bf00              NOP                            ;175
;;;259        }
;;;260    }
0000ec  bdf8              POP      {r3-r7,pc}
;;;261    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L17.240|
0000f0  1b5b313b          DCB      27,"[1;32mMAIN.c:INFO:Connected to a previously bonded d"
0000f4  33326d4d
0000f8  41494e2e
0000fc  633a494e
000100  464f3a43
000104  6f6e6e65
000108  63746564
00010c  20746f20
000110  61207072
000114  6576696f
000118  75736c79
00011c  20626f6e
000120  64656420
000124  64      
000125  65766963          DCB      "evice.\r\n",0
000129  652e0d0a
00012d  00      
00012e  00                DCB      0
00012f  00                DCB      0
                  |L17.304|
                          DCD      ||.conststring||

                          AREA ||i.power_manage||, CODE, READONLY, ALIGN=1

                  power_manage PROC
;;;820     */
;;;821    static void power_manage(void)
000000  b570              PUSH     {r4-r6,lr}
;;;822    {
;;;823        uint32_t err_code = sd_app_evt_wait();
000002  df48              SVC      #0x48
000004  4604              MOV      r4,r0
;;;824    
;;;825        APP_ERROR_CHECK(err_code);
000006  bf00              NOP      
000008  4625              MOV      r5,r4
00000a  2d00              CMP      r5,#0
00000c  d004              BEQ      |L18.24|
00000e  bf00              NOP      
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       app_error_handler_bare
000016  bf00              NOP      
                  |L18.24|
000018  bf00              NOP      
;;;826    }
00001a  bd70              POP      {r4-r6,pc}
;;;827    
                          ENDP


                          AREA ||i.services_init||, CODE, READONLY, ALIGN=2

                  services_init PROC
;;;345     */
;;;346    static void services_init(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;347    {
;;;348    	uint32_t err_code;
;;;349    	ble_sls_init_t sls_init;
;;;350    	//ble_dis_init_t dis_init;
;;;351    	
;;;352    	err_code= ble_sls_init( &m_sls ,&sls_init);
000002  4669              MOV      r1,sp
000004  4807              LDR      r0,|L19.36|
000006  f7fffffe          BL       ble_sls_init
00000a  4604              MOV      r4,r0
;;;353    	APP_ERROR_CHECK(err_code);
00000c  bf00              NOP      
00000e  4625              MOV      r5,r4
000010  2d00              CMP      r5,#0
000012  d004              BEQ      |L19.30|
000014  bf00              NOP      
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       app_error_handler_bare
00001c  bf00              NOP      
                  |L19.30|
00001e  bf00              NOP      
;;;354    
;;;355    //	memset(&dis_init,0,sizeof(dis_init));
;;;356    //	
;;;357    //	dis_init.fw_rev_str.p_str="0.0.1";
;;;358    //	dis_init.fw_rev_str.length=sizeof("0.0.1");
;;;359    //	
;;;360    //	dis_init.hw_rev_str.p_str="0.0.2";
;;;361    //	dis_init.hw_rev_str.length=sizeof("0.0.2");
;;;362    //	
;;;363    //	dis_init.manufact_name_str.p_str=MANUFACTURER_NAME;
;;;364    //	dis_init.manufact_name_str.length=sizeof(MANUFACTURER_NAME);
;;;365    //	err_code=ble_dis_init(&dis_init);
;;;366    //	APP_ERROR_CHECK(err_code);
;;;367        /* YOUR_JOB: Add code to initialize the services used by the application.
;;;368           uint32_t                           err_code;
;;;369           ble_xxs_init_t                     xxs_init;
;;;370           ble_yys_init_t                     yys_init;
;;;371    
;;;372           // Initialize XXX Service.
;;;373           memset(&xxs_init, 0, sizeof(xxs_init));
;;;374    
;;;375           xxs_init.evt_handler                = NULL;
;;;376           xxs_init.is_xxx_notify_supported    = true;
;;;377           xxs_init.ble_xx_initial_value.level = 100;
;;;378    
;;;379           err_code = ble_bas_init(&m_xxs, &xxs_init);
;;;380           APP_ERROR_CHECK(err_code);
;;;381    
;;;382           // Initialize YYY Service.
;;;383           memset(&yys_init, 0, sizeof(yys_init));
;;;384           yys_init.evt_handler                  = on_yys_evt;
;;;385           yys_init.ble_yy_initial_value.counter = 0;
;;;386    
;;;387           err_code = ble_yy_service_init(&yys_init, &yy_init);
;;;388           APP_ERROR_CHECK(err_code);
;;;389         */
;;;390    		 
;;;391    		 
;;;392    		 
;;;393    }
000020  bd7f              POP      {r0-r6,pc}
;;;394    
                          ENDP

000022  0000              DCW      0x0000
                  |L19.36|
                          DCD      m_sls

                          AREA ||i.sleep_mode_enter||, CODE, READONLY, ALIGN=1

                  sleep_mode_enter PROC
;;;467     */
;;;468    static void sleep_mode_enter(void)
000000  4770              BX       lr
;;;469    {
;;;470    //    uint32_t err_code = bsp_indication_set(BSP_INDICATE_IDLE);
;;;471    
;;;472    //    APP_ERROR_CHECK(err_code);
;;;473    
;;;474    //    // Prepare wakeup buttons.
;;;475    //    err_code = bsp_btn_ble_sleep_mode_prepare();
;;;476    //    APP_ERROR_CHECK(err_code);
;;;477    
;;;478    //    // Go to system-off mode (this function will not return; wakeup will cause a reset).
;;;479    //    err_code = sd_power_system_off();
;;;480    //    APP_ERROR_CHECK(err_code);
;;;481    }
;;;482    
                          ENDP


                          AREA ||i.sys_evt_dispatch||, CODE, READONLY, ALIGN=1

                  sys_evt_dispatch PROC
;;;632     */
;;;633    static void sys_evt_dispatch(uint32_t sys_evt)
000000  b510              PUSH     {r4,lr}
;;;634    {
000002  4604              MOV      r4,r0
;;;635        // Dispatch the system event to the fstorage module, where it will be
;;;636        // dispatched to the Flash Data Storage (FDS) module.
;;;637        fs_sys_event_handler(sys_evt);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       fs_sys_event_handler
;;;638    
;;;639        // Dispatch to the Advertising module last, since it will check if there are any
;;;640        // pending flash operations in fstorage. Let fstorage process system events first,
;;;641        // so that it can report correctly to the Advertising module.
;;;642        ble_advertising_on_sys_evt(sys_evt);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       ble_advertising_on_sys_evt
;;;643    }
000010  bd10              POP      {r4,pc}
;;;644    
                          ENDP


                          AREA ||i.timers_init||, CODE, READONLY, ALIGN=2

                  timers_init PROC
;;;266     */
;;;267    static void timers_init(void)
000000  b570              PUSH     {r4-r6,lr}
;;;268    {
;;;269    
;;;270        // Initialize timer module.
;;;271        APP_TIMER_INIT(APP_TIMER_PRESCALER, APP_TIMER_OP_QUEUE_SIZE, false);
000002  bf00              NOP      
000004  2300              MOVS     r3,#0
000006  4a09              LDR      r2,|L22.44|
000008  2105              MOVS     r1,#5
00000a  4618              MOV      r0,r3
00000c  f7fffffe          BL       app_timer_init
000010  4604              MOV      r4,r0
000012  bf00              NOP      
000014  4625              MOV      r5,r4
000016  2d00              CMP      r5,#0
000018  d004              BEQ      |L22.36|
00001a  bf00              NOP      
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       app_error_handler_bare
000022  bf00              NOP      
                  |L22.36|
000024  bf00              NOP      
000026  bf00              NOP      
;;;272    
;;;273        // Create timers.
;;;274    
;;;275        /* YOUR_JOB: Create any timers to be used by the application.
;;;276                     Below is an example of how to create a timer.
;;;277                     For every new timer needed, increase the value of the macro APP_TIMER_MAX_TIMERS by
;;;278                     one.
;;;279           uint32_t err_code;
;;;280           err_code = app_timer_create(&m_app_timer_id, APP_TIMER_MODE_REPEATED, timer_timeout_handler);
;;;281           APP_ERROR_CHECK(err_code); */
;;;282    }
000028  bd70              POP      {r4-r6,pc}
;;;283    
                          ENDP

00002a  0000              DCW      0x0000
                  |L22.44|
                          DCD      APP_TIMER_BUF

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_sls
                          %        64
                  APP_TIMER_BUF
                          %        120
                  BLE_EVT_BUFFER
                          %        72

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  01000007          DCB      0x01,0x00,0x00,0x07

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  1b5b313b          DCB      27,"[1;32mMAIN.c:INFO:Connection secured. Role: %d. conn"
000004  33326d4d
000008  41494e2e
00000c  633a494e
000010  464f3a43
000014  6f6e6e65
000018  6374696f
00001c  6e207365
000020  63757265
000024  642e2052
000028  6f6c653a
00002c  2025642e
000030  20636f6e
000034  6e      
000035  5f68616e          DCB      "_handle: %d, Procedure: %d\r\n",0
000039  646c653a
00003d  2025642c
000041  2050726f
000045  63656475
000049  72653a20
00004d  25640d0a
000051  00      

                          AREA ||.data||, DATA, ALIGN=1

                  m_conn_handle
000000  ffff              DCW      0xffff
                  m_adv_uuids
000002  180a              DCW      0x180a
000004  0100              DCB      0x01,0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L125.24|
                  |L125.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L125.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L125.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_48b9ef9b____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.2.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_48b9ef9b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_48b9ef9b____REVSH|
#line 144
|__asm___6_main_c_48b9ef9b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
