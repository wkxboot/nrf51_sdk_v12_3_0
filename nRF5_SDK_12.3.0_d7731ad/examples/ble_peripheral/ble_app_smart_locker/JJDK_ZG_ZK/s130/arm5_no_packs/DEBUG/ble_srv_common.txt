; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\ble_srv_common.o --asm_dir=.\DEBUG\ --list_dir=.\DEBUG\ --depend=.\debug\ble_srv_common.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\power -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\usbd -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\gpiote -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\queue -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\sensorsim -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\usbd -I..\..\..\..\..\..\components\libraries\usbd\class\audio -I..\..\..\..\..\..\components\libraries\usbd\class\cdc -I..\..\..\..\..\..\components\libraries\usbd\class\cdc\acm -I..\..\..\..\..\..\components\libraries\usbd\class\hid -I..\..\..\..\..\..\components\libraries\usbd\class\hid\generic -I..\..\..\..\..\..\components\libraries\usbd\class\hid\kbd -I..\..\..\..\..\..\components\libraries\usbd\class\hid\mouse -I..\..\..\..\..\..\components\libraries\usbd\class\msc -I..\..\..\..\..\..\components\libraries\usbd\config -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s130\headers -I..\..\..\..\..\..\components\softdevice\s130\headers\nrf51 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_sls -ID:\development\nordic_ble\src_code\nrf51_sdk_v12_3_0\nRF5_SDK_12.3.0_d7731ad\examples\ble_peripheral\ble_app_smart_locker\JJDK_ZG_ZK\s130\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.11.1\Device\Include -D__MICROLIB -D_RTE_ -DNRF51 -DBLE_STACK_SUPPORT_REQD -DNRF51822 -DBOARD_JJDK_ZG_ZK -DNRF_SD_BLE_API_VERSION=2 -DS130 -DNRF51 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 --omf_browse=.\debug\ble_srv_common.crf ..\..\..\..\..\..\components\ble\common\ble_srv_common.c]
                          THUMB

                          AREA ||i.ble_srv_ascii_to_utf8||, CODE, READONLY, ALIGN=1

                  ble_srv_ascii_to_utf8 PROC
;;;76     
;;;77     void ble_srv_ascii_to_utf8(ble_srv_utf8_str_t * p_utf8, char * p_ascii)
000000  b570              PUSH     {r4-r6,lr}
;;;78     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;79         p_utf8->length = (uint16_t)strlen(p_ascii);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       strlen
00000c  8020              STRH     r0,[r4,#0]
;;;80         p_utf8->p_str  = (uint8_t *)p_ascii;
00000e  6065              STR      r5,[r4,#4]
;;;81     }
000010  bd70              POP      {r4-r6,pc}
;;;82     
                          ENDP


                          AREA ||i.ble_srv_is_indication_enabled||, CODE, READONLY, ALIGN=1

                  ble_srv_is_indication_enabled PROC
;;;57     
;;;58     bool ble_srv_is_indication_enabled(uint8_t const * p_encoded_data)
000000  b570              PUSH     {r4-r6,lr}
;;;59     {
000002  4604              MOV      r4,r0
;;;60         uint16_t cccd_value = uint16_decode(p_encoded_data);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       uint16_decode
00000a  4605              MOV      r5,r0
;;;61         return ((cccd_value & BLE_GATT_HVX_INDICATION) != 0);
00000c  2002              MOVS     r0,#2
00000e  4028              ANDS     r0,r0,r5
000010  0840              LSRS     r0,r0,#1
;;;62     }
000012  bd70              POP      {r4-r6,pc}
;;;63     
                          ENDP


                          AREA ||i.ble_srv_is_notification_enabled||, CODE, READONLY, ALIGN=1

                  ble_srv_is_notification_enabled PROC
;;;51     
;;;52     bool ble_srv_is_notification_enabled(uint8_t const * p_encoded_data)
000000  b570              PUSH     {r4-r6,lr}
;;;53     {
000002  4604              MOV      r4,r0
;;;54         uint16_t cccd_value = uint16_decode(p_encoded_data);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       uint16_decode
00000a  4605              MOV      r5,r0
;;;55         return ((cccd_value & BLE_GATT_HVX_NOTIFICATION) != 0);
00000c  07e8              LSLS     r0,r5,#31
00000e  0fc0              LSRS     r0,r0,#31
;;;56     }
000010  bd70              POP      {r4-r6,pc}
;;;57     
                          ENDP


                          AREA ||i.ble_srv_report_ref_encode||, CODE, READONLY, ALIGN=1

                  ble_srv_report_ref_encode PROC
;;;63     
;;;64     uint8_t ble_srv_report_ref_encode(uint8_t                    * p_encoded_buffer,
000000  b5f8              PUSH     {r3-r7,lr}
;;;65                                       const ble_srv_report_ref_t * p_report_ref)
;;;66     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;67         uint8_t len = 0;
000006  2400              MOVS     r4,#0
;;;68     
;;;69         p_encoded_buffer[len++] = p_report_ref->report_id;
000008  7832              LDRB     r2,[r6,#0]
00000a  4621              MOV      r1,r4
00000c  1c64              ADDS     r4,r4,#1
00000e  546a              STRB     r2,[r5,r1]
;;;70         p_encoded_buffer[len++] = p_report_ref->report_type;
000010  7872              LDRB     r2,[r6,#1]
000012  4621              MOV      r1,r4
000014  1c64              ADDS     r4,r4,#1
000016  546a              STRB     r2,[r5,r1]
;;;71     
;;;72         APP_ERROR_CHECK_BOOL(len == BLE_SRV_ENCODED_REPORT_REF_LEN);
000018  bf00              NOP      
00001a  2c02              CMP      r4,#2
00001c  d101              BNE      |L4.34|
00001e  2001              MOVS     r0,#1
000020  e000              B        |L4.36|
                  |L4.34|
000022  2000              MOVS     r0,#0
                  |L4.36|
000024  4607              MOV      r7,r0
000026  2f00              CMP      r7,#0
000028  d103              BNE      |L4.50|
00002a  bf00              NOP      
00002c  f7fffffe          BL       app_error_handler_bare
000030  bf00              NOP      
                  |L4.50|
000032  bf00              NOP      
;;;73         return len;
000034  4620              MOV      r0,r4
;;;74     }
000036  bdf8              POP      {r3-r7,pc}
;;;75     
                          ENDP


                          AREA ||i.characteristic_add||, CODE, READONLY, ALIGN=1

                  characteristic_add PROC
;;;120    
;;;121    uint32_t characteristic_add(uint16_t                   service_handle,
000000  b570              PUSH     {r4-r6,lr}
;;;122                                ble_add_char_params_t *    p_char_props,
;;;123                                ble_gatts_char_handles_t * p_char_handle)
;;;124    {
000002  b090              SUB      sp,sp,#0x40
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;125        ble_gatts_char_md_t char_md;
;;;126        ble_gatts_attr_t    attr_char_value;
;;;127        ble_uuid_t          char_uuid;
;;;128        ble_gatts_attr_md_t attr_md;
;;;129        ble_gatts_attr_md_t user_descr_attr_md;
;;;130        ble_gatts_attr_md_t cccd_md;
;;;131    
;;;132        if (p_char_props->uuid_type == 0)
00000a  78a0              LDRB     r0,[r4,#2]
00000c  2800              CMP      r0,#0
00000e  d103              BNE      |L5.24|
;;;133        {
;;;134            char_uuid.type = BLE_UUID_TYPE_BLE;
000010  2001              MOVS     r0,#1
000012  4669              MOV      r1,sp
000014  7388              STRB     r0,[r1,#0xe]
000016  e002              B        |L5.30|
                  |L5.24|
;;;135        }
;;;136        else
;;;137        {
;;;138            char_uuid.type = p_char_props->uuid_type;
000018  78a0              LDRB     r0,[r4,#2]
00001a  4669              MOV      r1,sp
00001c  7388              STRB     r0,[r1,#0xe]
                  |L5.30|
;;;139        }
;;;140        char_uuid.uuid = p_char_props->uuid;
00001e  8821              LDRH     r1,[r4,#0]
000020  4668              MOV      r0,sp
000022  8181              STRH     r1,[r0,#0xc]
;;;141    
;;;142        memset(&attr_md, 0, sizeof(ble_gatts_attr_md_t));
000024  2000              MOVS     r0,#0
000026  9002              STR      r0,[sp,#8]
;;;143        set_security_req(p_char_props->read_access, &attr_md.read_perm);
000028  7c60              LDRB     r0,[r4,#0x11]
00002a  a902              ADD      r1,sp,#8
00002c  f7fffffe          BL       set_security_req
;;;144        set_security_req(p_char_props->write_access, & attr_md.write_perm);
000030  7ca0              LDRB     r0,[r4,#0x12]
000032  a902              ADD      r1,sp,#8
000034  3101              ADDS     r1,#1
000036  f7fffffe          BL       set_security_req
;;;145        attr_md.rd_auth    = (p_char_props->is_defered_read ? 1 : 0);
00003a  4668              MOV      r0,sp
00003c  7a80              LDRB     r0,[r0,#0xa]
00003e  2108              MOVS     r1,#8
000040  4388              BICS     r0,r0,r1
000042  7be1              LDRB     r1,[r4,#0xf]
000044  2900              CMP      r1,#0
000046  d001              BEQ      |L5.76|
000048  2101              MOVS     r1,#1
00004a  e000              B        |L5.78|
                  |L5.76|
00004c  2100              MOVS     r1,#0
                  |L5.78|
00004e  00c9              LSLS     r1,r1,#3
000050  2208              MOVS     r2,#8
000052  4011              ANDS     r1,r1,r2
000054  4308              ORRS     r0,r0,r1
000056  4669              MOV      r1,sp
000058  7288              STRB     r0,[r1,#0xa]
;;;146        attr_md.wr_auth    = (p_char_props->is_defered_write ? 1 : 0);
00005a  7a88              LDRB     r0,[r1,#0xa]
00005c  2110              MOVS     r1,#0x10
00005e  4388              BICS     r0,r0,r1
000060  7c21              LDRB     r1,[r4,#0x10]
000062  2900              CMP      r1,#0
000064  d001              BEQ      |L5.106|
000066  2101              MOVS     r1,#1
000068  e000              B        |L5.108|
                  |L5.106|
00006a  2100              MOVS     r1,#0
                  |L5.108|
00006c  0109              LSLS     r1,r1,#4
00006e  2210              MOVS     r2,#0x10
000070  4011              ANDS     r1,r1,r2
000072  4308              ORRS     r0,r0,r1
000074  4669              MOV      r1,sp
000076  7288              STRB     r0,[r1,#0xa]
;;;147        attr_md.vlen       = (p_char_props->is_var_len ? 1 : 0);
000078  7a88              LDRB     r0,[r1,#0xa]
00007a  0840              LSRS     r0,r0,#1
00007c  0040              LSLS     r0,r0,#1
00007e  7b21              LDRB     r1,[r4,#0xc]
000080  2900              CMP      r1,#0
000082  d001              BEQ      |L5.136|
000084  2101              MOVS     r1,#1
000086  e000              B        |L5.138|
                  |L5.136|
000088  2100              MOVS     r1,#0
                  |L5.138|
00008a  07c9              LSLS     r1,r1,#31
00008c  0fc9              LSRS     r1,r1,#31
00008e  4308              ORRS     r0,r0,r1
000090  4669              MOV      r1,sp
000092  7288              STRB     r0,[r1,#0xa]
;;;148        attr_md.vloc       = (p_char_props->is_value_user ? BLE_GATTS_VLOC_USER : BLE_GATTS_VLOC_STACK);
000094  7a88              LDRB     r0,[r1,#0xa]
000096  2106              MOVS     r1,#6
000098  4388              BICS     r0,r0,r1
00009a  7d21              LDRB     r1,[r4,#0x14]
00009c  2900              CMP      r1,#0
00009e  d001              BEQ      |L5.164|
0000a0  2102              MOVS     r1,#2
0000a2  e000              B        |L5.166|
                  |L5.164|
0000a4  2101              MOVS     r1,#1
                  |L5.166|
0000a6  0049              LSLS     r1,r1,#1
0000a8  2206              MOVS     r2,#6
0000aa  4011              ANDS     r1,r1,r2
0000ac  4308              ORRS     r0,r0,r1
0000ae  4669              MOV      r1,sp
0000b0  7288              STRB     r0,[r1,#0xa]
;;;149    
;;;150    
;;;151        memset(&char_md, 0, sizeof(ble_gatts_char_md_t));
0000b2  211c              MOVS     r1,#0x1c
0000b4  a809              ADD      r0,sp,#0x24
0000b6  f7fffffe          BL       __aeabi_memclr4
;;;152        if ((p_char_props->char_props.notify == 1)||(p_char_props->char_props.indicate == 1))
0000ba  7b60              LDRB     r0,[r4,#0xd]
0000bc  06c0              LSLS     r0,r0,#27
0000be  0fc0              LSRS     r0,r0,#31
0000c0  2800              CMP      r0,#0
0000c2  d104              BNE      |L5.206|
0000c4  7b60              LDRB     r0,[r4,#0xd]
0000c6  0680              LSLS     r0,r0,#26
0000c8  0fc0              LSRS     r0,r0,#31
0000ca  2800              CMP      r0,#0
0000cc  d01d              BEQ      |L5.266|
                  |L5.206|
;;;153        {
;;;154    
;;;155            memset(&cccd_md, 0, sizeof(cccd_md));
0000ce  2000              MOVS     r0,#0
0000d0  9000              STR      r0,[sp,#0]
;;;156            set_security_req(p_char_props->cccd_write_access, &cccd_md.write_perm);
0000d2  7ce0              LDRB     r0,[r4,#0x13]
0000d4  a900              ADD      r1,sp,#0
0000d6  3101              ADDS     r1,#1
0000d8  f7fffffe          BL       set_security_req
;;;157            BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
0000dc  bf00              NOP      
0000de  4668              MOV      r0,sp
0000e0  7800              LDRB     r0,[r0,#0]
0000e2  0901              LSRS     r1,r0,#4
0000e4  0109              LSLS     r1,r1,#4
0000e6  1c49              ADDS     r1,r1,#1
0000e8  4668              MOV      r0,sp
0000ea  7001              STRB     r1,[r0,#0]
0000ec  7800              LDRB     r0,[r0,#0]
0000ee  21f0              MOVS     r1,#0xf0
0000f0  4388              BICS     r0,r0,r1
0000f2  3010              ADDS     r0,r0,#0x10
0000f4  4669              MOV      r1,sp
0000f6  7008              STRB     r0,[r1,#0]
0000f8  bf00              NOP      
;;;158    
;;;159            cccd_md.vloc       = BLE_GATTS_VLOC_STACK;
0000fa  7888              LDRB     r0,[r1,#2]
0000fc  2106              MOVS     r1,#6
0000fe  4388              BICS     r0,r0,r1
000100  1c80              ADDS     r0,r0,#2
000102  4669              MOV      r1,sp
000104  7088              STRB     r0,[r1,#2]
;;;160    
;;;161            char_md.p_cccd_md  = &cccd_md;
000106  4668              MOV      r0,sp
000108  900e              STR      r0,[sp,#0x38]
                  |L5.266|
;;;162        }
;;;163        char_md.char_props     = p_char_props->char_props;
00010a  7b61              LDRB     r1,[r4,#0xd]
00010c  a808              ADD      r0,sp,#0x20
00010e  7101              STRB     r1,[r0,#4]
;;;164        char_md.char_ext_props = p_char_props->char_ext_props;
000110  7ba1              LDRB     r1,[r4,#0xe]
000112  7141              STRB     r1,[r0,#5]
;;;165    
;;;166        memset(&attr_char_value, 0, sizeof(ble_gatts_attr_t));
000114  2114              MOVS     r1,#0x14
000116  a804              ADD      r0,sp,#0x10
000118  f7fffffe          BL       __aeabi_memclr4
;;;167        attr_char_value.p_uuid    = &char_uuid;
00011c  a803              ADD      r0,sp,#0xc
00011e  9004              STR      r0,[sp,#0x10]
;;;168        attr_char_value.p_attr_md = &attr_md;
000120  a802              ADD      r0,sp,#8
000122  9005              STR      r0,[sp,#0x14]
;;;169        attr_char_value.max_len   = p_char_props->max_len;
000124  88a1              LDRH     r1,[r4,#4]
000126  4668              MOV      r0,sp
000128  8381              STRH     r1,[r0,#0x1c]
;;;170        if (p_char_props->p_init_value != NULL)
00012a  68a0              LDR      r0,[r4,#8]
00012c  2800              CMP      r0,#0
00012e  d004              BEQ      |L5.314|
;;;171        {
;;;172            attr_char_value.init_len  = p_char_props->init_len;
000130  88e0              LDRH     r0,[r4,#6]
000132  4669              MOV      r1,sp
000134  8308              STRH     r0,[r1,#0x18]
;;;173            attr_char_value.p_value   = p_char_props->p_init_value;
000136  68a0              LDR      r0,[r4,#8]
000138  9008              STR      r0,[sp,#0x20]
                  |L5.314|
;;;174        }
;;;175        if (p_char_props->p_user_descr != NULL)
00013a  69a0              LDR      r0,[r4,#0x18]
00013c  2800              CMP      r0,#0
00013e  d059              BEQ      |L5.500|
;;;176        {
;;;177            memset(&user_descr_attr_md, 0, sizeof(ble_gatts_attr_md_t));
000140  2000              MOVS     r0,#0
000142  9001              STR      r0,[sp,#4]
;;;178            char_md.char_user_desc_max_size = p_char_props->p_user_descr->max_size;
000144  69a0              LDR      r0,[r4,#0x18]
000146  8801              LDRH     r1,[r0,#0]
000148  4668              MOV      r0,sp
00014a  8581              STRH     r1,[r0,#0x2c]
;;;179            char_md.char_user_desc_size     = p_char_props->p_user_descr->size;
00014c  69a0              LDR      r0,[r4,#0x18]
00014e  8841              LDRH     r1,[r0,#2]
000150  4668              MOV      r0,sp
000152  85c1              STRH     r1,[r0,#0x2e]
;;;180            char_md.p_char_user_desc        = p_char_props->p_user_descr->p_char_user_desc;
000154  69a0              LDR      r0,[r4,#0x18]
000156  6840              LDR      r0,[r0,#4]
000158  900a              STR      r0,[sp,#0x28]
;;;181    
;;;182            char_md.p_user_desc_md          = &user_descr_attr_md;
00015a  a801              ADD      r0,sp,#4
00015c  900d              STR      r0,[sp,#0x34]
;;;183    
;;;184            set_security_req(p_char_props->p_user_descr->read_access, &user_descr_attr_md.read_perm);
00015e  69a1              LDR      r1,[r4,#0x18]
000160  7b08              LDRB     r0,[r1,#0xc]
000162  a901              ADD      r1,sp,#4
000164  f7fffffe          BL       set_security_req
;;;185            set_security_req(p_char_props->p_user_descr->write_access, &user_descr_attr_md.write_perm);
000168  69a1              LDR      r1,[r4,#0x18]
00016a  7b48              LDRB     r0,[r1,#0xd]
00016c  a901              ADD      r1,sp,#4
00016e  3101              ADDS     r1,#1
000170  f7fffffe          BL       set_security_req
;;;186    
;;;187            user_descr_attr_md.rd_auth      = (p_char_props->p_user_descr->is_defered_read ? 1 : 0);
000174  4668              MOV      r0,sp
000176  7980              LDRB     r0,[r0,#6]
000178  2108              MOVS     r1,#8
00017a  4388              BICS     r0,r0,r1
00017c  69a1              LDR      r1,[r4,#0x18]
00017e  7a89              LDRB     r1,[r1,#0xa]
000180  2900              CMP      r1,#0
000182  d001              BEQ      |L5.392|
000184  2101              MOVS     r1,#1
000186  e000              B        |L5.394|
                  |L5.392|
000188  2100              MOVS     r1,#0
                  |L5.394|
00018a  00c9              LSLS     r1,r1,#3
00018c  2208              MOVS     r2,#8
00018e  4011              ANDS     r1,r1,r2
000190  4308              ORRS     r0,r0,r1
000192  4669              MOV      r1,sp
000194  7188              STRB     r0,[r1,#6]
;;;188            user_descr_attr_md.wr_auth      = (p_char_props->p_user_descr->is_defered_write ? 1 : 0);
000196  7988              LDRB     r0,[r1,#6]
000198  2110              MOVS     r1,#0x10
00019a  4388              BICS     r0,r0,r1
00019c  69a1              LDR      r1,[r4,#0x18]
00019e  7ac9              LDRB     r1,[r1,#0xb]
0001a0  2900              CMP      r1,#0
0001a2  d001              BEQ      |L5.424|
0001a4  2101              MOVS     r1,#1
0001a6  e000              B        |L5.426|
                  |L5.424|
0001a8  2100              MOVS     r1,#0
                  |L5.426|
0001aa  0109              LSLS     r1,r1,#4
0001ac  2210              MOVS     r2,#0x10
0001ae  4011              ANDS     r1,r1,r2
0001b0  4308              ORRS     r0,r0,r1
0001b2  4669              MOV      r1,sp
0001b4  7188              STRB     r0,[r1,#6]
;;;189            user_descr_attr_md.vlen         = (p_char_props->p_user_descr->is_var_len ? 1 : 0);
0001b6  7988              LDRB     r0,[r1,#6]
0001b8  0840              LSRS     r0,r0,#1
0001ba  0040              LSLS     r0,r0,#1
0001bc  69a1              LDR      r1,[r4,#0x18]
0001be  7a09              LDRB     r1,[r1,#8]
0001c0  2900              CMP      r1,#0
0001c2  d001              BEQ      |L5.456|
0001c4  2101              MOVS     r1,#1
0001c6  e000              B        |L5.458|
                  |L5.456|
0001c8  2100              MOVS     r1,#0
                  |L5.458|
0001ca  07c9              LSLS     r1,r1,#31
0001cc  0fc9              LSRS     r1,r1,#31
0001ce  4308              ORRS     r0,r0,r1
0001d0  4669              MOV      r1,sp
0001d2  7188              STRB     r0,[r1,#6]
;;;190            user_descr_attr_md.vloc         = (p_char_props->p_user_descr->is_value_user ? BLE_GATTS_VLOC_USER : BLE_GATTS_VLOC_STACK);
0001d4  7988              LDRB     r0,[r1,#6]
0001d6  2106              MOVS     r1,#6
0001d8  4388              BICS     r0,r0,r1
0001da  69a1              LDR      r1,[r4,#0x18]
0001dc  7b89              LDRB     r1,[r1,#0xe]
0001de  2900              CMP      r1,#0
0001e0  d001              BEQ      |L5.486|
0001e2  2102              MOVS     r1,#2
0001e4  e000              B        |L5.488|
                  |L5.486|
0001e6  2101              MOVS     r1,#1
                  |L5.488|
0001e8  0049              LSLS     r1,r1,#1
0001ea  2206              MOVS     r2,#6
0001ec  4011              ANDS     r1,r1,r2
0001ee  4308              ORRS     r0,r0,r1
0001f0  4669              MOV      r1,sp
0001f2  7188              STRB     r0,[r1,#6]
                  |L5.500|
;;;191        }
;;;192        if (p_char_props->p_presentation_format != NULL)
0001f4  69e0              LDR      r0,[r4,#0x1c]
0001f6  2800              CMP      r0,#0
0001f8  d001              BEQ      |L5.510|
;;;193        {
;;;194            char_md.p_char_pf = p_char_props->p_presentation_format;
0001fa  69e0              LDR      r0,[r4,#0x1c]
0001fc  900c              STR      r0,[sp,#0x30]
                  |L5.510|
;;;195        }
;;;196        return sd_ble_gatts_characteristic_add(service_handle,
0001fe  462b              MOV      r3,r5
000200  aa04              ADD      r2,sp,#0x10
000202  a909              ADD      r1,sp,#0x24
000204  4630              MOV      r0,r6
000206  dfa2              SVC      #0xa2
;;;197                                               &char_md,
;;;198                                               &attr_char_value,
;;;199                                               p_char_handle);
;;;200    }
000208  b010              ADD      sp,sp,#0x40
00020a  bd70              POP      {r4-r6,pc}
;;;201    
                          ENDP


                          AREA ||i.descriptor_add||, CODE, READONLY, ALIGN=1

                  descriptor_add PROC
;;;202    
;;;203    uint32_t descriptor_add(uint16_t                   char_handle,
000000  b570              PUSH     {r4-r6,lr}
;;;204                            ble_add_descr_params_t *   p_descr_props,
;;;205                            uint16_t *                 p_descr_handle)
;;;206    {
000002  b088              SUB      sp,sp,#0x20
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;207        ble_gatts_attr_t    descr_params;
;;;208        ble_uuid_t          desc_uuid;
;;;209        ble_gatts_attr_md_t attr_md;
;;;210    
;;;211        memset(&descr_params, 0, sizeof(descr_params));
00000a  2114              MOVS     r1,#0x14
00000c  a803              ADD      r0,sp,#0xc
00000e  f7fffffe          BL       __aeabi_memclr4
;;;212        if (p_descr_props->uuid_type == 0)
000012  78a0              LDRB     r0,[r4,#2]
000014  2800              CMP      r0,#0
000016  d103              BNE      |L6.32|
;;;213        {
;;;214            desc_uuid.type = BLE_UUID_TYPE_BLE;
000018  2001              MOVS     r0,#1
00001a  4669              MOV      r1,sp
00001c  7288              STRB     r0,[r1,#0xa]
00001e  e002              B        |L6.38|
                  |L6.32|
;;;215        }
;;;216        else
;;;217        {
;;;218            desc_uuid.type = p_descr_props->uuid_type;
000020  78a0              LDRB     r0,[r4,#2]
000022  4669              MOV      r1,sp
000024  7288              STRB     r0,[r1,#0xa]
                  |L6.38|
;;;219        }
;;;220        desc_uuid.uuid = p_descr_props->uuid;
000026  8821              LDRH     r1,[r4,#0]
000028  4668              MOV      r0,sp
00002a  8101              STRH     r1,[r0,#8]
;;;221        descr_params.p_uuid = &desc_uuid;
00002c  a802              ADD      r0,sp,#8
00002e  9003              STR      r0,[sp,#0xc]
;;;222    
;;;223        set_security_req(p_descr_props->read_access, &attr_md.read_perm);
000030  79a0              LDRB     r0,[r4,#6]
000032  a901              ADD      r1,sp,#4
000034  f7fffffe          BL       set_security_req
;;;224        set_security_req(p_descr_props->write_access,&attr_md.write_perm);
000038  79e0              LDRB     r0,[r4,#7]
00003a  a901              ADD      r1,sp,#4
00003c  3101              ADDS     r1,#1
00003e  f7fffffe          BL       set_security_req
;;;225    
;;;226        attr_md.rd_auth        = (p_descr_props->is_defered_read ? 1 : 0);
000042  4668              MOV      r0,sp
000044  7980              LDRB     r0,[r0,#6]
000046  2108              MOVS     r1,#8
000048  4388              BICS     r0,r0,r1
00004a  78e1              LDRB     r1,[r4,#3]
00004c  2900              CMP      r1,#0
00004e  d001              BEQ      |L6.84|
000050  2101              MOVS     r1,#1
000052  e000              B        |L6.86|
                  |L6.84|
000054  2100              MOVS     r1,#0
                  |L6.86|
000056  00c9              LSLS     r1,r1,#3
000058  2208              MOVS     r2,#8
00005a  4011              ANDS     r1,r1,r2
00005c  4308              ORRS     r0,r0,r1
00005e  4669              MOV      r1,sp
000060  7188              STRB     r0,[r1,#6]
;;;227        attr_md.wr_auth        = (p_descr_props->is_defered_write ? 1 : 0);
000062  7988              LDRB     r0,[r1,#6]
000064  2110              MOVS     r1,#0x10
000066  4388              BICS     r0,r0,r1
000068  7921              LDRB     r1,[r4,#4]
00006a  2900              CMP      r1,#0
00006c  d001              BEQ      |L6.114|
00006e  2101              MOVS     r1,#1
000070  e000              B        |L6.116|
                  |L6.114|
000072  2100              MOVS     r1,#0
                  |L6.116|
000074  0109              LSLS     r1,r1,#4
000076  2210              MOVS     r2,#0x10
000078  4011              ANDS     r1,r1,r2
00007a  4308              ORRS     r0,r0,r1
00007c  4669              MOV      r1,sp
00007e  7188              STRB     r0,[r1,#6]
;;;228        attr_md.vlen           = (p_descr_props->is_var_len ? 1 : 0);
000080  7988              LDRB     r0,[r1,#6]
000082  0840              LSRS     r0,r0,#1
000084  0040              LSLS     r0,r0,#1
000086  7961              LDRB     r1,[r4,#5]
000088  2900              CMP      r1,#0
00008a  d001              BEQ      |L6.144|
00008c  2101              MOVS     r1,#1
00008e  e000              B        |L6.146|
                  |L6.144|
000090  2100              MOVS     r1,#0
                  |L6.146|
000092  07c9              LSLS     r1,r1,#31
000094  0fc9              LSRS     r1,r1,#31
000096  4308              ORRS     r0,r0,r1
000098  4669              MOV      r1,sp
00009a  7188              STRB     r0,[r1,#6]
;;;229        attr_md.vloc           = (p_descr_props->is_value_user ? BLE_GATTS_VLOC_USER : BLE_GATTS_VLOC_STACK);
00009c  7988              LDRB     r0,[r1,#6]
00009e  2106              MOVS     r1,#6
0000a0  4388              BICS     r0,r0,r1
0000a2  7a21              LDRB     r1,[r4,#8]
0000a4  2900              CMP      r1,#0
0000a6  d001              BEQ      |L6.172|
0000a8  2102              MOVS     r1,#2
0000aa  e000              B        |L6.174|
                  |L6.172|
0000ac  2101              MOVS     r1,#1
                  |L6.174|
0000ae  0049              LSLS     r1,r1,#1
0000b0  2206              MOVS     r2,#6
0000b2  4011              ANDS     r1,r1,r2
0000b4  4308              ORRS     r0,r0,r1
0000b6  4669              MOV      r1,sp
0000b8  7188              STRB     r0,[r1,#6]
;;;230        descr_params.p_attr_md = &attr_md;
0000ba  a801              ADD      r0,sp,#4
0000bc  9004              STR      r0,[sp,#0x10]
;;;231    
;;;232        descr_params.init_len  = p_descr_props->init_len;
0000be  8961              LDRH     r1,[r4,#0xa]
0000c0  4668              MOV      r0,sp
0000c2  8281              STRH     r1,[r0,#0x14]
;;;233        descr_params.init_offs = p_descr_props->init_offs;
0000c4  89a1              LDRH     r1,[r4,#0xc]
0000c6  82c1              STRH     r1,[r0,#0x16]
;;;234        descr_params.max_len   = p_descr_props->max_len;
0000c8  89e1              LDRH     r1,[r4,#0xe]
0000ca  8301              STRH     r1,[r0,#0x18]
;;;235        descr_params.p_value   = p_descr_props->p_value;
0000cc  6920              LDR      r0,[r4,#0x10]
0000ce  9007              STR      r0,[sp,#0x1c]
;;;236    
;;;237        return sd_ble_gatts_descriptor_add(char_handle, &descr_params, p_descr_handle);
0000d0  4632              MOV      r2,r6
0000d2  a903              ADD      r1,sp,#0xc
0000d4  4628              MOV      r0,r5
0000d6  dfa3              SVC      #0xa3
;;;238    }
0000d8  b008              ADD      sp,sp,#0x20
0000da  bd70              POP      {r4-r6,pc}
                          ENDP


                          AREA ||i.set_security_req||, CODE, READONLY, ALIGN=1

                  set_security_req PROC
;;;90      */
;;;91     static inline void set_security_req(security_req_t level, ble_gap_conn_sec_mode_t * p_perm)
000000  b500              PUSH     {lr}
;;;92     {
;;;93     
;;;94     
;;;95         BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(p_perm);
000002  bf00              NOP      
000004  780a              LDRB     r2,[r1,#0]
000006  0912              LSRS     r2,r2,#4
000008  0112              LSLS     r2,r2,#4
00000a  700a              STRB     r2,[r1,#0]
00000c  780a              LDRB     r2,[r1,#0]
00000e  23f0              MOVS     r3,#0xf0
000010  439a              BICS     r2,r2,r3
000012  700a              STRB     r2,[r1,#0]
000014  bf00              NOP      
;;;96         switch (level)
000016  0003              MOVS     r3,r0
000018  f7fffffe          BL       __ARM_common_switch8
00001c  06040f1c          DCB      0x06,0x04,0x0f,0x1c
000020  29364350          DCB      0x29,0x36,0x43,0x50
;;;97         {
;;;98             case SEC_NO_ACCESS:
;;;99                 BLE_GAP_CONN_SEC_MODE_SET_NO_ACCESS(p_perm);
000024  bf00              NOP      
000026  780a              LDRB     r2,[r1,#0]
000028  0912              LSRS     r2,r2,#4
00002a  0112              LSLS     r2,r2,#4
00002c  700a              STRB     r2,[r1,#0]
00002e  780a              LDRB     r2,[r1,#0]
000030  23f0              MOVS     r3,#0xf0
000032  439a              BICS     r2,r2,r3
000034  700a              STRB     r2,[r1,#0]
000036  bf00              NOP      
;;;100            break;
000038  e040              B        |L7.188|
;;;101            case SEC_OPEN:
;;;102                BLE_GAP_CONN_SEC_MODE_SET_OPEN(p_perm);
00003a  bf00              NOP      
00003c  780a              LDRB     r2,[r1,#0]
00003e  0912              LSRS     r2,r2,#4
000040  0112              LSLS     r2,r2,#4
000042  1c52              ADDS     r2,r2,#1
000044  700a              STRB     r2,[r1,#0]
000046  780a              LDRB     r2,[r1,#0]
000048  23f0              MOVS     r3,#0xf0
00004a  439a              BICS     r2,r2,r3
00004c  3210              ADDS     r2,r2,#0x10
00004e  700a              STRB     r2,[r1,#0]
000050  bf00              NOP      
;;;103            break;
000052  e033              B        |L7.188|
;;;104            case SEC_JUST_WORKS:
;;;105                BLE_GAP_CONN_SEC_MODE_SET_ENC_NO_MITM(p_perm);
000054  bf00              NOP      
000056  780a              LDRB     r2,[r1,#0]
000058  0912              LSRS     r2,r2,#4
00005a  0112              LSLS     r2,r2,#4
00005c  1c52              ADDS     r2,r2,#1
00005e  700a              STRB     r2,[r1,#0]
000060  780a              LDRB     r2,[r1,#0]
000062  23f0              MOVS     r3,#0xf0
000064  439a              BICS     r2,r2,r3
000066  3220              ADDS     r2,r2,#0x20
000068  700a              STRB     r2,[r1,#0]
00006a  bf00              NOP      
;;;106            break;
00006c  e026              B        |L7.188|
;;;107            case SEC_MITM:
;;;108                BLE_GAP_CONN_SEC_MODE_SET_ENC_WITH_MITM(p_perm);
00006e  bf00              NOP      
000070  780a              LDRB     r2,[r1,#0]
000072  0912              LSRS     r2,r2,#4
000074  0112              LSLS     r2,r2,#4
000076  1c52              ADDS     r2,r2,#1
000078  700a              STRB     r2,[r1,#0]
00007a  780a              LDRB     r2,[r1,#0]
00007c  23f0              MOVS     r3,#0xf0
00007e  439a              BICS     r2,r2,r3
000080  3230              ADDS     r2,r2,#0x30
000082  700a              STRB     r2,[r1,#0]
000084  bf00              NOP      
;;;109            break;
000086  e019              B        |L7.188|
;;;110            case SEC_SIGNED:
;;;111                BLE_GAP_CONN_SEC_MODE_SET_SIGNED_NO_MITM(p_perm);
000088  bf00              NOP      
00008a  780a              LDRB     r2,[r1,#0]
00008c  0912              LSRS     r2,r2,#4
00008e  0112              LSLS     r2,r2,#4
000090  1c92              ADDS     r2,r2,#2
000092  700a              STRB     r2,[r1,#0]
000094  780a              LDRB     r2,[r1,#0]
000096  23f0              MOVS     r3,#0xf0
000098  439a              BICS     r2,r2,r3
00009a  3210              ADDS     r2,r2,#0x10
00009c  700a              STRB     r2,[r1,#0]
00009e  bf00              NOP      
;;;112            break;
0000a0  e00c              B        |L7.188|
;;;113            case SEC_SIGNED_MITM:
;;;114                BLE_GAP_CONN_SEC_MODE_SET_SIGNED_WITH_MITM(p_perm);
0000a2  bf00              NOP      
0000a4  780a              LDRB     r2,[r1,#0]
0000a6  0912              LSRS     r2,r2,#4
0000a8  0112              LSLS     r2,r2,#4
0000aa  1c92              ADDS     r2,r2,#2
0000ac  700a              STRB     r2,[r1,#0]
0000ae  780a              LDRB     r2,[r1,#0]
0000b0  23f0              MOVS     r3,#0xf0
0000b2  439a              BICS     r2,r2,r3
0000b4  3220              ADDS     r2,r2,#0x20
0000b6  700a              STRB     r2,[r1,#0]
0000b8  bf00              NOP      
;;;115            break;
0000ba  bf00              NOP      
                  |L7.188|
0000bc  bf00              NOP                            ;100
;;;116        }
;;;117        return;
;;;118    }
0000be  bd00              POP      {pc}
;;;119    
                          ENDP


                          AREA ||i.uint16_decode||, CODE, READONLY, ALIGN=1

                  uint16_decode PROC
;;;823     */
;;;824    static __INLINE uint16_t uint16_decode(const uint8_t * p_encoded_data)
000000  4601              MOV      r1,r0
;;;825    {
;;;826            return ( (((uint16_t)((uint8_t *)p_encoded_data)[0])) |
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  0212              LSLS     r2,r2,#8
000008  4310              ORRS     r0,r0,r2
;;;827                     (((uint16_t)((uint8_t *)p_encoded_data)[1]) << 8 ));
;;;828    }
00000a  4770              BX       lr
;;;829    
                          ENDP


                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L53.24|
                  |L53.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L53.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L53.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\common\\ble_srv_common.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_ble_srv_common_c_d5496d4d____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.2.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_ble_srv_common_c_d5496d4d____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_ble_srv_common_c_d5496d4d____REVSH|
#line 144
|__asm___16_ble_srv_common_c_d5496d4d____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
