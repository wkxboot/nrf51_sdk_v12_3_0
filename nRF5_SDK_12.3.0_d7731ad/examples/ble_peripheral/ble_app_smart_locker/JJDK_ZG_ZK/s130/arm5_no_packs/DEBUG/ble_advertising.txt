; generated by Component: ARM Compiler 5.05 (build 41) Tool: ArmCC [4d0eb9]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\ble_advertising.o --asm_dir=.\DEBUG\ --list_dir=.\DEBUG\ --depend=.\debug\ble_advertising.d --cpu=Cortex-M0 --apcs=interwork -O0 -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\components\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_services\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\..\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\ble_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\..\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tps -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\..\..\..\components\drivers_nrf\adc -I..\..\..\..\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\components\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I..\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\drivers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\power -I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\drivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I..\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\drivers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drivers_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\usbd -I..\..\..\..\..\..\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\bsp -I..\..\..\..\..\..\components\libraries\button -I..\..\..\..\..\..\components\libraries\crc16 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..\..\..\..\components\libraries\experimental_section_vars -I..\..\..\..\..\..\components\libraries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\..\components\libraries\gpiote -I..\..\..\..\..\..\components\libraries\hardfault -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\libraries\led_softblink -I..\..\..\..\..\..\components\libraries\log -I..\..\..\..\..\..\components\libraries\log\src -I..\..\..\..\..\..\components\libraries\low_power_pwm -I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..\..\..\components\libraries\queue -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\components\libraries\sensorsim -I..\..\..\..\..\..\components\libraries\slip -I..\..\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\libraries\twi -I..\..\..\..\..\..\components\libraries\uart -I..\..\..\..\..\..\components\libraries\usbd -I..\..\..\..\..\..\components\libraries\usbd\class\audio -I..\..\..\..\..\..\components\libraries\usbd\class\cdc -I..\..\..\..\..\..\components\libraries\usbd\class\cdc\acm -I..\..\..\..\..\..\components\libraries\usbd\class\hid -I..\..\..\..\..\..\components\libraries\usbd\class\hid\generic -I..\..\..\..\..\..\components\libraries\usbd\class\hid\kbd -I..\..\..\..\..\..\components\libraries\usbd\class\hid\mouse -I..\..\..\..\..\..\components\libraries\usbd\class\msc -I..\..\..\..\..\..\components\libraries\usbd\config -I..\..\..\..\..\..\components\libraries\util -I..\..\..\..\..\..\components\softdevice\common\softdevice_handler -I..\..\..\..\..\..\components\softdevice\s130\headers -I..\..\..\..\..\..\components\softdevice\s130\headers\nrf51 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\external\segger_rtt -I..\config -I..\..\..\..\..\..\components\ble\ble_services\ble_sls -ID:\development\nordic_ble\src_code\nrf51_sdk_v12_3_0\nRF5_SDK_12.3.0_d7731ad\examples\ble_peripheral\ble_app_smart_locker\JJDK_ZG_ZK\s130\arm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.11.1\Device\Include -D__MICROLIB -D_RTE_ -DNRF51 -DBLE_STACK_SUPPORT_REQD -DNRF51822 -DBOARD_JJDK_ZG_ZK -DNRF_SD_BLE_API_VERSION=2 -DS130 -DNRF51 -DSOFTDEVICE_PRESENT -DSWI_DISABLE0 --omf_browse=.\debug\ble_advertising.crf ..\..\..\..\..\..\components\ble\ble_advertising\ble_advertising.c]
                          THUMB

                          AREA ||i.addr_is_valid||, CODE, READONLY, ALIGN=1

                  addr_is_valid PROC
;;;126     */
;;;127    static bool addr_is_valid(uint8_t const * const addr)
000000  4602              MOV      r2,r0
;;;128    {
;;;129        for (uint32_t i = 0; i < BLE_GAP_ADDR_LEN; i++)
000002  2100              MOVS     r1,#0
000004  e005              B        |L1.18|
                  |L1.6|
;;;130        {
;;;131            if (addr[i] != 0)
000006  5c50              LDRB     r0,[r2,r1]
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L1.16|
;;;132            {
;;;133                return true;
00000c  2001              MOVS     r0,#1
                  |L1.14|
;;;134            }
;;;135        }
;;;136        return false;
;;;137    }
00000e  4770              BX       lr
                  |L1.16|
000010  1c49              ADDS     r1,r1,#1              ;129
                  |L1.18|
000012  2906              CMP      r1,#6                 ;129
000014  d3f7              BCC      |L1.6|
000016  2000              MOVS     r0,#0                 ;136
000018  e7f9              B        |L1.14|
;;;138    
                          ENDP


                          AREA ||i.adv_mode_next_avail_get||, CODE, READONLY, ALIGN=2

                  adv_mode_next_avail_get PROC
;;;224     */
;;;225    static ble_adv_mode_t adv_mode_next_avail_get(ble_adv_mode_t adv_mode)
000000  b570              PUSH     {r4-r6,lr}
;;;226    {
000002  4604              MOV      r4,r0
;;;227        bool peer_addr_is_valid = addr_is_valid(m_peer_address.addr);
000004  4817              LDR      r0,|L2.100|
000006  f7fffffe          BL       addr_is_valid
00000a  4605              MOV      r5,r0
;;;228    
;;;229        // If a mode is disabled, continue to the next mode.
;;;230    
;;;231        switch (adv_mode)
00000c  2c01              CMP      r4,#1
00000e  d006              BEQ      |L2.30|
000010  2c02              CMP      r4,#2
000012  d00d              BEQ      |L2.48|
000014  2c03              CMP      r4,#3
000016  d014              BEQ      |L2.66|
000018  2c04              CMP      r4,#4
00001a  d120              BNE      |L2.94|
00001c  e018              B        |L2.80|
                  |L2.30|
;;;232        {
;;;233            case BLE_ADV_MODE_DIRECTED:
;;;234                if ((m_adv_modes_config.ble_adv_directed_enabled) && peer_addr_is_valid)
00001e  4812              LDR      r0,|L2.104|
000020  7840              LDRB     r0,[r0,#1]  ; m_adv_modes_config
000022  2800              CMP      r0,#0
000024  d003              BEQ      |L2.46|
000026  2d00              CMP      r5,#0
000028  d001              BEQ      |L2.46|
;;;235                {
;;;236                    return BLE_ADV_MODE_DIRECTED;
00002a  2001              MOVS     r0,#1
                  |L2.44|
;;;237                }
;;;238                // Fallthrough.
;;;239    
;;;240            case BLE_ADV_MODE_DIRECTED_SLOW:
;;;241                if ((m_adv_modes_config.ble_adv_directed_slow_enabled) && peer_addr_is_valid)
;;;242                {
;;;243                    return BLE_ADV_MODE_DIRECTED_SLOW;
;;;244                }
;;;245                // Fallthrough.
;;;246    
;;;247            case BLE_ADV_MODE_FAST:
;;;248                if (m_adv_modes_config.ble_adv_fast_enabled)
;;;249                {
;;;250                    return BLE_ADV_MODE_FAST;
;;;251                }
;;;252                // Fallthrough.
;;;253    
;;;254            case BLE_ADV_MODE_SLOW:
;;;255                if (m_adv_modes_config.ble_adv_slow_enabled)
;;;256                {
;;;257                    return BLE_ADV_MODE_SLOW;
;;;258                }
;;;259                // Fallthrough.
;;;260    
;;;261            default:
;;;262                return BLE_ADV_MODE_IDLE;
;;;263        }
;;;264    }
00002c  bd70              POP      {r4-r6,pc}
                  |L2.46|
00002e  bf00              NOP                            ;240
                  |L2.48|
000030  480d              LDR      r0,|L2.104|
000032  7880              LDRB     r0,[r0,#2]            ;241  ; m_adv_modes_config
000034  2800              CMP      r0,#0                 ;241
000036  d003              BEQ      |L2.64|
000038  2d00              CMP      r5,#0                 ;241
00003a  d001              BEQ      |L2.64|
00003c  2002              MOVS     r0,#2                 ;243
00003e  e7f5              B        |L2.44|
                  |L2.64|
000040  bf00              NOP                            ;247
                  |L2.66|
000042  4809              LDR      r0,|L2.104|
000044  78c0              LDRB     r0,[r0,#3]            ;248  ; m_adv_modes_config
000046  2800              CMP      r0,#0                 ;248
000048  d001              BEQ      |L2.78|
00004a  2003              MOVS     r0,#3                 ;250
00004c  e7ee              B        |L2.44|
                  |L2.78|
00004e  bf00              NOP                            ;254
                  |L2.80|
000050  4805              LDR      r0,|L2.104|
000052  7900              LDRB     r0,[r0,#4]            ;255  ; m_adv_modes_config
000054  2800              CMP      r0,#0                 ;255
000056  d001              BEQ      |L2.92|
000058  2004              MOVS     r0,#4                 ;257
00005a  e7e7              B        |L2.44|
                  |L2.92|
00005c  bf00              NOP                            ;261
                  |L2.94|
00005e  2000              MOVS     r0,#0                 ;262
000060  e7e4              B        |L2.44|
;;;265    
                          ENDP

000062  0000              DCW      0x0000
                  |L2.100|
                          DCD      m_peer_address+0x1
                  |L2.104|
                          DCD      m_adv_modes_config

                          AREA ||i.adv_mode_next_get||, CODE, READONLY, ALIGN=1

                  adv_mode_next_get PROC
;;;139    
;;;140    static ble_adv_mode_t adv_mode_next_get(ble_adv_mode_t adv_mode)
000000  b510              PUSH     {r4,lr}
;;;141    {
000002  4604              MOV      r4,r0
;;;142        return (ble_adv_mode_t)((adv_mode + 1) % BLE_ADV_MODES);
000004  2105              MOVS     r1,#5
000006  1c60              ADDS     r0,r4,#1
000008  f7fffffe          BL       __aeabi_idivmod
00000c  b2c8              UXTB     r0,r1
;;;143    }
00000e  bd10              POP      {r4,pc}
;;;144    
                          ENDP


                          AREA ||i.ble_advertising_init||, CODE, READONLY, ALIGN=2

                  ble_advertising_init PROC
;;;388    
;;;389    uint32_t ble_advertising_init(ble_advdata_t                   const * p_advdata,
000000  b5f8              PUSH     {r3-r7,lr}
;;;390                                  ble_advdata_t                   const * p_srdata,
;;;391                                  ble_adv_modes_config_t          const * p_config,
;;;392                                  ble_advertising_evt_handler_t   const   evt_handler,
;;;393                                  ble_advertising_error_handler_t const   error_handler)
;;;394    {
000002  4604              MOV      r4,r0
000004  460f              MOV      r7,r1
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
;;;395        uint32_t ret;
;;;396    
;;;397        if ((p_advdata == NULL) || (p_config == NULL))
00000a  2c00              CMP      r4,#0
00000c  d001              BEQ      |L4.18|
00000e  2d00              CMP      r5,#0
000010  d101              BNE      |L4.22|
                  |L4.18|
;;;398        {
;;;399            return NRF_ERROR_NULL;
000012  200e              MOVS     r0,#0xe
                  |L4.20|
;;;400        }
;;;401    
;;;402        m_initialized                    = true;
;;;403        m_adv_mode_current               = BLE_ADV_MODE_IDLE;
;;;404        m_adv_modes_config               = *p_config;
;;;405        m_evt_handler                    = evt_handler;
;;;406        m_error_handler                  = error_handler;
;;;407        m_current_slave_link_conn_handle = BLE_CONN_HANDLE_INVALID;
;;;408    
;;;409        memset(&m_peer_address, 0, sizeof(m_peer_address));
;;;410        memset(&m_advdata,      0, sizeof(m_advdata));
;;;411    
;;;412        // Copy advertising data.
;;;413        m_advdata.name_type            = p_advdata->name_type;
;;;414        m_advdata.include_appearance   = p_advdata->include_appearance;
;;;415        m_advdata.flags                = p_advdata->flags;
;;;416        m_advdata.short_name_len       = p_advdata->short_name_len;
;;;417    
;;;418        m_advdata.uuids_complete       = p_advdata->uuids_complete;
;;;419        m_advdata.uuids_more_available = p_advdata->uuids_more_available;
;;;420        m_advdata.uuids_solicited      = p_advdata->uuids_solicited;
;;;421    
;;;422        if (p_advdata->p_manuf_specific_data != NULL)
;;;423        {
;;;424            m_advdata.p_manuf_specific_data   = &m_manuf_specific_data;
;;;425            m_manuf_specific_data.data.p_data = m_manuf_data_array;
;;;426            m_advdata.p_manuf_specific_data->company_identifier =
;;;427            p_advdata->p_manuf_specific_data->company_identifier;
;;;428            m_advdata.p_manuf_specific_data->data.size = p_advdata->p_manuf_specific_data->data.size;
;;;429    
;;;430            for (uint32_t i = 0; i < m_advdata.p_manuf_specific_data->data.size; i++)
;;;431            {
;;;432                m_manuf_data_array[i] = p_advdata->p_manuf_specific_data->data.p_data[i];
;;;433            }
;;;434        }
;;;435    
;;;436        if (p_advdata->p_service_data_array != NULL)
;;;437        {
;;;438            m_service_data.data.p_data                   = m_service_data_array;
;;;439            m_advdata.p_service_data_array               = &m_service_data;
;;;440            m_advdata.p_service_data_array->data.p_data  = m_service_data_array;
;;;441            m_advdata.p_service_data_array->data.size    = p_advdata->p_service_data_array->data.size;
;;;442            m_advdata.p_service_data_array->service_uuid = p_advdata->p_service_data_array->service_uuid;
;;;443    
;;;444            for (uint32_t i = 0; i < m_advdata.p_service_data_array->data.size; i++)
;;;445            {
;;;446                m_service_data_array[i] = p_advdata->p_service_data_array->data.p_data[i];
;;;447            }
;;;448    
;;;449            m_advdata.service_data_count = p_advdata->service_data_count;
;;;450        }
;;;451    
;;;452        if (p_advdata->p_slave_conn_int != NULL)
;;;453        {
;;;454            m_advdata.p_slave_conn_int                    = &m_slave_conn_int;
;;;455            m_advdata.p_slave_conn_int->max_conn_interval = p_advdata->p_slave_conn_int->max_conn_interval;
;;;456            m_advdata.p_slave_conn_int->min_conn_interval = p_advdata->p_slave_conn_int->min_conn_interval;
;;;457        }
;;;458    
;;;459        if (p_advdata->p_tx_power_level != NULL)
;;;460        {
;;;461            m_advdata.p_tx_power_level = p_advdata->p_tx_power_level;
;;;462        }
;;;463    
;;;464    #if (NRF_SD_BLE_API_VERSION == 2)
;;;465            for (int i = 0; i <BLE_GAP_WHITELIST_ADDR_MAX_COUNT ; i++)
;;;466            {
;;;467                m_whitelist.pp_addrs[i] = &m_whitelist_addrs[i];
;;;468            }
;;;469    
;;;470            for (int i = 0; i <BLE_GAP_WHITELIST_IRK_MAX_COUNT ; i++)
;;;471            {
;;;472                m_whitelist.pp_irks[i] = &m_whitelist_irks[i];
;;;473            }
;;;474    #endif
;;;475    
;;;476        ret = ble_advdata_set(&m_advdata, p_srdata);
;;;477        return ret;
;;;478    }
000014  bdf8              POP      {r3-r7,pc}
                  |L4.22|
000016  2001              MOVS     r0,#1                 ;402
000018  4957              LDR      r1,|L4.376|
00001a  7008              STRB     r0,[r1,#0]            ;402
00001c  2000              MOVS     r0,#0                 ;403
00001e  4957              LDR      r1,|L4.380|
000020  7008              STRB     r0,[r1,#0]            ;403
000022  2220              MOVS     r2,#0x20              ;404
000024  4629              MOV      r1,r5                 ;404
000026  4856              LDR      r0,|L4.384|
000028  f7fffffe          BL       __aeabi_memcpy4
00002c  4855              LDR      r0,|L4.388|
00002e  6006              STR      r6,[r0,#0]            ;405  ; m_evt_handler
000030  4955              LDR      r1,|L4.392|
000032  9806              LDR      r0,[sp,#0x18]         ;406
000034  6008              STR      r0,[r1,#0]            ;406  ; m_error_handler
000036  2000              MOVS     r0,#0                 ;407
000038  43c0              MVNS     r0,r0                 ;407
00003a  4954              LDR      r1,|L4.396|
00003c  8008              STRH     r0,[r1,#0]            ;407
00003e  2107              MOVS     r1,#7                 ;409
000040  4853              LDR      r0,|L4.400|
000042  f7fffffe          BL       __aeabi_memclr4
000046  213c              MOVS     r1,#0x3c              ;410
000048  4852              LDR      r0,|L4.404|
00004a  f7fffffe          BL       __aeabi_memclr4
00004e  7820              LDRB     r0,[r4,#0]            ;413
000050  4950              LDR      r1,|L4.404|
000052  7008              STRB     r0,[r1,#0]            ;413
000054  78a0              LDRB     r0,[r4,#2]            ;414
000056  7088              STRB     r0,[r1,#2]            ;414
000058  78e0              LDRB     r0,[r4,#3]            ;415
00005a  70c8              STRB     r0,[r1,#3]            ;415
00005c  7860              LDRB     r0,[r4,#1]            ;416
00005e  7048              STRB     r0,[r1,#1]            ;416
000060  4608              MOV      r0,r1                 ;418
000062  6962              LDR      r2,[r4,#0x14]         ;418
000064  6921              LDR      r1,[r4,#0x10]         ;418
000066  6142              STR      r2,[r0,#0x14]         ;418  ; m_advdata
000068  6101              STR      r1,[r0,#0x10]         ;418  ; m_advdata
00006a  4601              MOV      r1,r0                 ;419
00006c  68e2              LDR      r2,[r4,#0xc]          ;419
00006e  68a0              LDR      r0,[r4,#8]            ;419
000070  60ca              STR      r2,[r1,#0xc]          ;419  ; m_advdata
000072  6088              STR      r0,[r1,#8]            ;419  ; m_advdata
000074  4608              MOV      r0,r1                 ;420
000076  69e2              LDR      r2,[r4,#0x1c]         ;420
000078  69a1              LDR      r1,[r4,#0x18]         ;420
00007a  61c2              STR      r2,[r0,#0x1c]         ;420  ; m_advdata
00007c  6181              STR      r1,[r0,#0x18]         ;420  ; m_advdata
00007e  6a60              LDR      r0,[r4,#0x24]         ;422
000080  2800              CMP      r0,#0                 ;422
000082  d01b              BEQ      |L4.188|
000084  4844              LDR      r0,|L4.408|
000086  4943              LDR      r1,|L4.404|
000088  6248              STR      r0,[r1,#0x24]         ;424  ; m_advdata
00008a  4944              LDR      r1,|L4.412|
00008c  6081              STR      r1,[r0,#8]            ;425
00008e  6a60              LDR      r0,[r4,#0x24]         ;426
000090  8800              LDRH     r0,[r0,#0]            ;426
000092  4940              LDR      r1,|L4.404|
000094  6a49              LDR      r1,[r1,#0x24]         ;426  ; m_advdata
000096  8008              STRH     r0,[r1,#0]            ;426
000098  6a60              LDR      r0,[r4,#0x24]         ;428
00009a  8880              LDRH     r0,[r0,#4]            ;428
00009c  493d              LDR      r1,|L4.404|
00009e  6a49              LDR      r1,[r1,#0x24]         ;428  ; m_advdata
0000a0  8088              STRH     r0,[r1,#4]            ;428
0000a2  2000              MOVS     r0,#0                 ;430
0000a4  e005              B        |L4.178|
                  |L4.166|
0000a6  6a61              LDR      r1,[r4,#0x24]         ;432
0000a8  6889              LDR      r1,[r1,#8]            ;432
0000aa  5c09              LDRB     r1,[r1,r0]            ;432
0000ac  4a3b              LDR      r2,|L4.412|
0000ae  5411              STRB     r1,[r2,r0]            ;432
0000b0  1c40              ADDS     r0,r0,#1              ;430
                  |L4.178|
0000b2  4938              LDR      r1,|L4.404|
0000b4  6a49              LDR      r1,[r1,#0x24]         ;430  ; m_advdata
0000b6  8889              LDRH     r1,[r1,#4]            ;430
0000b8  4281              CMP      r1,r0                 ;430
0000ba  d8f4              BHI      |L4.166|
                  |L4.188|
0000bc  6aa0              LDR      r0,[r4,#0x28]         ;436
0000be  2800              CMP      r0,#0                 ;436
0000c0  d024              BEQ      |L4.268|
0000c2  4937              LDR      r1,|L4.416|
0000c4  4837              LDR      r0,|L4.420|
0000c6  6081              STR      r1,[r0,#8]            ;438
0000c8  4932              LDR      r1,|L4.404|
0000ca  6288              STR      r0,[r1,#0x28]         ;439  ; m_advdata
0000cc  4934              LDR      r1,|L4.416|
0000ce  4831              LDR      r0,|L4.404|
0000d0  6a80              LDR      r0,[r0,#0x28]         ;440  ; m_advdata
0000d2  6081              STR      r1,[r0,#8]            ;440
0000d4  6aa0              LDR      r0,[r4,#0x28]         ;441
0000d6  8880              LDRH     r0,[r0,#4]            ;441
0000d8  492e              LDR      r1,|L4.404|
0000da  6a89              LDR      r1,[r1,#0x28]         ;441  ; m_advdata
0000dc  8088              STRH     r0,[r1,#4]            ;441
0000de  6aa0              LDR      r0,[r4,#0x28]         ;442
0000e0  8800              LDRH     r0,[r0,#0]            ;442
0000e2  492c              LDR      r1,|L4.404|
0000e4  6a89              LDR      r1,[r1,#0x28]         ;442  ; m_advdata
0000e6  8008              STRH     r0,[r1,#0]            ;442
0000e8  2000              MOVS     r0,#0                 ;444
0000ea  e005              B        |L4.248|
                  |L4.236|
0000ec  6aa1              LDR      r1,[r4,#0x28]         ;446
0000ee  6889              LDR      r1,[r1,#8]            ;446
0000f0  5c09              LDRB     r1,[r1,r0]            ;446
0000f2  4a2b              LDR      r2,|L4.416|
0000f4  5411              STRB     r1,[r2,r0]            ;446
0000f6  1c40              ADDS     r0,r0,#1              ;444
                  |L4.248|
0000f8  4926              LDR      r1,|L4.404|
0000fa  6a89              LDR      r1,[r1,#0x28]         ;444  ; m_advdata
0000fc  8889              LDRH     r1,[r1,#4]            ;444
0000fe  4281              CMP      r1,r0                 ;444
000100  d8f4              BHI      |L4.236|
000102  202c              MOVS     r0,#0x2c              ;449
000104  5d01              LDRB     r1,[r0,r4]            ;449
000106  4823              LDR      r0,|L4.404|
000108  3020              ADDS     r0,r0,#0x20           ;449
00010a  7301              STRB     r1,[r0,#0xc]          ;449
                  |L4.268|
00010c  6a20              LDR      r0,[r4,#0x20]         ;452
00010e  2800              CMP      r0,#0                 ;452
000110  d00b              BEQ      |L4.298|
000112  4825              LDR      r0,|L4.424|
000114  491f              LDR      r1,|L4.404|
000116  6208              STR      r0,[r1,#0x20]         ;454  ; m_advdata
000118  6a20              LDR      r0,[r4,#0x20]         ;455
00011a  8840              LDRH     r0,[r0,#2]            ;455
00011c  6a09              LDR      r1,[r1,#0x20]         ;455  ; m_advdata
00011e  8048              STRH     r0,[r1,#2]            ;455
000120  6a20              LDR      r0,[r4,#0x20]         ;456
000122  8800              LDRH     r0,[r0,#0]            ;456
000124  491b              LDR      r1,|L4.404|
000126  6a09              LDR      r1,[r1,#0x20]         ;456  ; m_advdata
000128  8008              STRH     r0,[r1,#0]            ;456
                  |L4.298|
00012a  6860              LDR      r0,[r4,#4]            ;459
00012c  2800              CMP      r0,#0                 ;459
00012e  d002              BEQ      |L4.310|
000130  4918              LDR      r1,|L4.404|
000132  6860              LDR      r0,[r4,#4]            ;461
000134  6048              STR      r0,[r1,#4]            ;461  ; m_advdata
                  |L4.310|
000136  2000              MOVS     r0,#0                 ;465
000138  e008              B        |L4.332|
                  |L4.314|
00013a  00c1              LSLS     r1,r0,#3              ;467
00013c  1a09              SUBS     r1,r1,r0              ;467
00013e  4a1b              LDR      r2,|L4.428|
000140  1889              ADDS     r1,r1,r2              ;467
000142  4a1b              LDR      r2,|L4.432|
000144  6812              LDR      r2,[r2,#0]            ;467  ; m_whitelist
000146  0083              LSLS     r3,r0,#2              ;467
000148  50d1              STR      r1,[r2,r3]            ;467
00014a  1c40              ADDS     r0,r0,#1              ;465
                  |L4.332|
00014c  2808              CMP      r0,#8                 ;465
00014e  dbf4              BLT      |L4.314|
000150  2000              MOVS     r0,#0                 ;470
000152  e007              B        |L4.356|
                  |L4.340|
000154  0101              LSLS     r1,r0,#4              ;472
000156  4a17              LDR      r2,|L4.436|
000158  188a              ADDS     r2,r1,r2              ;472
00015a  4915              LDR      r1,|L4.432|
00015c  6889              LDR      r1,[r1,#8]            ;472  ; m_whitelist
00015e  0083              LSLS     r3,r0,#2              ;472
000160  50ca              STR      r2,[r1,r3]            ;472
000162  1c40              ADDS     r0,r0,#1              ;470
                  |L4.356|
000164  2808              CMP      r0,#8                 ;470
000166  dbf5              BLT      |L4.340|
000168  4639              MOV      r1,r7                 ;476
00016a  480a              LDR      r0,|L4.404|
00016c  f7fffffe          BL       ble_advdata_set
000170  9000              STR      r0,[sp,#0]            ;476
000172  9800              LDR      r0,[sp,#0]            ;477
000174  e74e              B        |L4.20|
;;;479    
                          ENDP

000176  0000              DCW      0x0000
                  |L4.376|
                          DCD      m_initialized
                  |L4.380|
                          DCD      m_adv_mode_current
                  |L4.384|
                          DCD      m_adv_modes_config
                  |L4.388|
                          DCD      m_evt_handler
                  |L4.392|
                          DCD      m_error_handler
                  |L4.396|
                          DCD      m_current_slave_link_conn_handle
                  |L4.400|
                          DCD      m_peer_address
                  |L4.404|
                          DCD      m_advdata
                  |L4.408|
                          DCD      m_manuf_specific_data
                  |L4.412|
                          DCD      m_manuf_data_array
                  |L4.416|
                          DCD      m_service_data_array
                  |L4.420|
                          DCD      m_service_data
                  |L4.424|
                          DCD      m_slave_conn_int
                  |L4.428|
                          DCD      m_whitelist_addrs
                  |L4.432|
                          DCD      m_whitelist
                  |L4.436|
                          DCD      m_whitelist_irks

                          AREA ||i.ble_advertising_on_ble_evt||, CODE, READONLY, ALIGN=1

                  ble_advertising_on_ble_evt PROC
;;;587    
;;;588    void ble_advertising_on_ble_evt(ble_evt_t const * p_ble_evt)
000000  b510              PUSH     {r4,lr}
;;;589    {
000002  4604              MOV      r4,r0
;;;590        switch (p_ble_evt->header.evt_id)
000004  8820              LDRH     r0,[r4,#0]
000006  2810              CMP      r0,#0x10
000008  d004              BEQ      |L5.20|
00000a  2811              CMP      r0,#0x11
00000c  d006              BEQ      |L5.28|
00000e  281b              CMP      r0,#0x1b
000010  d10c              BNE      |L5.44|
000012  e007              B        |L5.36|
                  |L5.20|
;;;591        {
;;;592            case BLE_GAP_EVT_CONNECTED:
;;;593                on_connected(p_ble_evt);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       on_connected
;;;594                break;
00001a  e008              B        |L5.46|
                  |L5.28|
;;;595    
;;;596            // Upon disconnection, whitelist will be activated and direct advertising is started.
;;;597            case BLE_GAP_EVT_DISCONNECTED:
;;;598                on_disconnected(p_ble_evt);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       on_disconnected
;;;599                break;
000022  e004              B        |L5.46|
                  |L5.36|
;;;600    
;;;601            // Upon time-out, the next advertising mode is started.
;;;602            case BLE_GAP_EVT_TIMEOUT:
;;;603                on_timeout(p_ble_evt);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       on_timeout
;;;604                break;
00002a  e000              B        |L5.46|
                  |L5.44|
;;;605    
;;;606            default:
;;;607                break;
00002c  bf00              NOP      
                  |L5.46|
00002e  bf00              NOP                            ;594
;;;608        }
;;;609    }
000030  bd10              POP      {r4,pc}
;;;610    
                          ENDP


                          AREA ||i.ble_advertising_on_sys_evt||, CODE, READONLY, ALIGN=2

                  ble_advertising_on_sys_evt PROC
;;;611    
;;;612    void ble_advertising_on_sys_evt(uint32_t sys_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;613    {
000002  4605              MOV      r5,r0
;;;614        uint32_t ret;
;;;615    
;;;616        switch (sys_evt)
000004  2d02              CMP      r5,#2
000006  d002              BEQ      |L6.14|
000008  2d03              CMP      r5,#3
00000a  d118              BNE      |L6.62|
00000c  e000              B        |L6.16|
                  |L6.14|
;;;617        {
;;;618            //When a flash operation finishes, re-attempt to start advertising operations.
;;;619            case NRF_EVT_FLASH_OPERATION_SUCCESS:
;;;620            case NRF_EVT_FLASH_OPERATION_ERROR:
00000e  bf00              NOP      
                  |L6.16|
;;;621                if (m_advertising_start_pending)
000010  480c              LDR      r0,|L6.68|
000012  7800              LDRB     r0,[r0,#0]  ; m_advertising_start_pending
000014  2800              CMP      r0,#0
000016  d011              BEQ      |L6.60|
;;;622                {
;;;623                    m_advertising_start_pending = false;
000018  2000              MOVS     r0,#0
00001a  490a              LDR      r1,|L6.68|
00001c  7008              STRB     r0,[r1,#0]
;;;624                    ret = ble_advertising_start(m_adv_mode_current);
00001e  480a              LDR      r0,|L6.72|
000020  7800              LDRB     r0,[r0,#0]  ; m_adv_mode_current
000022  f7fffffe          BL       ble_advertising_start
000026  4604              MOV      r4,r0
;;;625                    if ((ret != NRF_SUCCESS) && (m_error_handler != NULL))
000028  2c00              CMP      r4,#0
00002a  d007              BEQ      |L6.60|
00002c  4807              LDR      r0,|L6.76|
00002e  6800              LDR      r0,[r0,#0]  ; m_error_handler
000030  2800              CMP      r0,#0
000032  d003              BEQ      |L6.60|
;;;626                    {
;;;627                        m_error_handler(ret);
000034  4620              MOV      r0,r4
000036  4905              LDR      r1,|L6.76|
000038  6809              LDR      r1,[r1,#0]  ; m_error_handler
00003a  4788              BLX      r1
                  |L6.60|
;;;628                    }
;;;629                }
;;;630                break;
00003c  e000              B        |L6.64|
                  |L6.62|
;;;631    
;;;632            default:
;;;633                // No implementation needed.
;;;634                break;
00003e  bf00              NOP      
                  |L6.64|
000040  bf00              NOP                            ;630
;;;635        }
;;;636    }
000042  bd70              POP      {r4-r6,pc}
;;;637    
                          ENDP

                  |L6.68|
                          DCD      m_advertising_start_pending
                  |L6.72|
                          DCD      m_adv_mode_current
                  |L6.76|
                          DCD      m_error_handler

                          AREA ||i.ble_advertising_peer_addr_reply||, CODE, READONLY, ALIGN=2

                  ble_advertising_peer_addr_reply PROC
;;;638    
;;;639    uint32_t ble_advertising_peer_addr_reply(ble_gap_addr_t * p_peer_address)
000000  b510              PUSH     {r4,lr}
;;;640    {
000002  4604              MOV      r4,r0
;;;641        if (!m_peer_addr_reply_expected)
000004  4807              LDR      r0,|L7.36|
000006  7800              LDRB     r0,[r0,#0]  ; m_peer_addr_reply_expected
000008  2800              CMP      r0,#0
00000a  d101              BNE      |L7.16|
;;;642        {
;;;643            return NRF_ERROR_INVALID_STATE;
00000c  2008              MOVS     r0,#8
                  |L7.14|
;;;644        }
;;;645    
;;;646        m_peer_addr_reply_expected = false;
;;;647    
;;;648        memcpy(&m_peer_address, p_peer_address, sizeof(m_peer_address));
;;;649    
;;;650        return NRF_SUCCESS;
;;;651    }
00000e  bd10              POP      {r4,pc}
                  |L7.16|
000010  2000              MOVS     r0,#0                 ;646
000012  4904              LDR      r1,|L7.36|
000014  7008              STRB     r0,[r1,#0]            ;646
000016  2207              MOVS     r2,#7                 ;648
000018  4621              MOV      r1,r4                 ;648
00001a  4803              LDR      r0,|L7.40|
00001c  f7fffffe          BL       __aeabi_memcpy
000020  2000              MOVS     r0,#0                 ;650
000022  e7f4              B        |L7.14|
;;;652    
                          ENDP

                  |L7.36|
                          DCD      m_peer_addr_reply_expected
                  |L7.40|
                          DCD      m_peer_address

                          AREA ||i.ble_advertising_restart_without_whitelist||, CODE, READONLY, ALIGN=2

                  ble_advertising_restart_without_whitelist PROC
;;;690    
;;;691    uint32_t ble_advertising_restart_without_whitelist(void)
000000  b510              PUSH     {r4,lr}
;;;692    {
;;;693        uint32_t ret;
;;;694    
;;;695        (void) sd_ble_gap_adv_stop();
000002  df74              SVC      #0x74
;;;696    
;;;697        m_whitelist_temporarily_disabled = true;
000004  2001              MOVS     r0,#1
000006  490f              LDR      r1,|L8.68|
000008  7008              STRB     r0,[r1,#0]
;;;698    
;;;699        #if (NRF_SD_BLE_API_VERSION == 3)
;;;700            m_whitelist_in_use = false;
;;;701        #endif
;;;702    
;;;703        m_advdata.flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
00000a  2006              MOVS     r0,#6
00000c  490e              LDR      r1,|L8.72|
00000e  70c8              STRB     r0,[r1,#3]
;;;704    
;;;705        ret = ble_advdata_set(&m_advdata, NULL);
000010  2100              MOVS     r1,#0
000012  480d              LDR      r0,|L8.72|
000014  f7fffffe          BL       ble_advdata_set
000018  4604              MOV      r4,r0
;;;706        if (ret != NRF_SUCCESS)
00001a  2c00              CMP      r4,#0
00001c  d001              BEQ      |L8.34|
;;;707        {
;;;708            return ret;
00001e  4620              MOV      r0,r4
                  |L8.32|
;;;709        }
;;;710    
;;;711        ret = ble_advertising_start(m_adv_mode_current);
;;;712        if ((ret != NRF_SUCCESS) && (m_error_handler != NULL))
;;;713        {
;;;714            m_error_handler(ret);
;;;715        }
;;;716    
;;;717        return NRF_SUCCESS;
;;;718    }
000020  bd10              POP      {r4,pc}
                  |L8.34|
000022  480a              LDR      r0,|L8.76|
000024  7800              LDRB     r0,[r0,#0]            ;711  ; m_adv_mode_current
000026  f7fffffe          BL       ble_advertising_start
00002a  4604              MOV      r4,r0                 ;711
00002c  2c00              CMP      r4,#0                 ;712
00002e  d007              BEQ      |L8.64|
000030  4807              LDR      r0,|L8.80|
000032  6800              LDR      r0,[r0,#0]            ;712  ; m_error_handler
000034  2800              CMP      r0,#0                 ;712
000036  d003              BEQ      |L8.64|
000038  4620              MOV      r0,r4                 ;714
00003a  4905              LDR      r1,|L8.80|
00003c  6809              LDR      r1,[r1,#0]            ;714  ; m_error_handler
00003e  4788              BLX      r1                    ;714
                  |L8.64|
000040  2000              MOVS     r0,#0                 ;717
000042  e7ed              B        |L8.32|
;;;719    
                          ENDP

                  |L8.68|
                          DCD      m_whitelist_temporarily_disabled
                  |L8.72|
                          DCD      m_advdata
                  |L8.76|
                          DCD      m_adv_mode_current
                  |L8.80|
                          DCD      m_error_handler

                          AREA ||i.ble_advertising_start||, CODE, READONLY, ALIGN=2

                  ble_advertising_start PROC
;;;480    
;;;481    uint32_t ble_advertising_start(ble_adv_mode_t advertising_mode)
000000  b530              PUSH     {r4,r5,lr}
;;;482    {
000002  b087              SUB      sp,sp,#0x1c
000004  4605              MOV      r5,r0
;;;483        uint32_t             ret;
;;;484        ble_gap_adv_params_t adv_params;
;;;485    
;;;486        if (m_initialized == false)
000006  4851              LDR      r0,|L9.332|
000008  7800              LDRB     r0,[r0,#0]  ; m_initialized
00000a  2800              CMP      r0,#0
00000c  d102              BNE      |L9.20|
;;;487        {
;;;488            return NRF_ERROR_INVALID_STATE;
00000e  2008              MOVS     r0,#8
                  |L9.16|
;;;489        }
;;;490    
;;;491        m_adv_mode_current = advertising_mode;
;;;492    
;;;493        // Delay starting advertising until the flash operations are complete.
;;;494        if (flash_access_in_progress())
;;;495        {
;;;496            m_advertising_start_pending = true;
;;;497            return NRF_SUCCESS;
;;;498        }
;;;499    
;;;500       memset(&m_peer_address, 0, sizeof(m_peer_address));
;;;501    
;;;502        if (  ((m_adv_modes_config.ble_adv_directed_enabled)      && (m_adv_mode_current == BLE_ADV_MODE_DIRECTED))
;;;503            ||((m_adv_modes_config.ble_adv_directed_slow_enabled) && (m_adv_mode_current == BLE_ADV_MODE_DIRECTED))
;;;504            ||((m_adv_modes_config.ble_adv_directed_slow_enabled) && (m_adv_mode_current == BLE_ADV_MODE_DIRECTED_SLOW))
;;;505           )
;;;506        {
;;;507            if (m_evt_handler != NULL)
;;;508            {
;;;509                m_peer_addr_reply_expected = true;
;;;510                m_evt_handler(BLE_ADV_EVT_PEER_ADDR_REQUEST);
;;;511            }
;;;512            else
;;;513            {
;;;514                m_peer_addr_reply_expected = false;
;;;515            }
;;;516        }
;;;517    
;;;518        m_adv_mode_current = adv_mode_next_avail_get(advertising_mode);
;;;519    
;;;520        // Fetch the whitelist.
;;;521        if ((m_evt_handler != NULL) &&
;;;522            (m_adv_mode_current == BLE_ADV_MODE_FAST || m_adv_mode_current == BLE_ADV_MODE_SLOW) &&
;;;523            (m_adv_modes_config.ble_adv_whitelist_enabled) &&
;;;524            (!m_whitelist_temporarily_disabled))
;;;525        {
;;;526            #if (NRF_SD_BLE_API_VERSION == 3)
;;;527                m_whitelist_in_use = false;
;;;528            #endif
;;;529            m_whitelist_reply_expected = true;
;;;530            m_evt_handler(BLE_ADV_EVT_WHITELIST_REQUEST);
;;;531        }
;;;532        else
;;;533        {
;;;534            m_whitelist_reply_expected = false;
;;;535        }
;;;536    
;;;537        // Initialize advertising parameters with default values.
;;;538        memset(&adv_params, 0, sizeof(adv_params));
;;;539    
;;;540        adv_params.type = BLE_GAP_ADV_TYPE_ADV_IND;
;;;541        adv_params.fp   = BLE_GAP_ADV_FP_ANY;
;;;542    
;;;543        // Set advertising parameters and events according to selected advertising mode.
;;;544        switch (m_adv_mode_current)
;;;545        {
;;;546            case BLE_ADV_MODE_DIRECTED:
;;;547                ret = set_adv_mode_directed(&adv_params);
;;;548                break;
;;;549    
;;;550            case BLE_ADV_MODE_DIRECTED_SLOW:
;;;551                ret = set_adv_mode_directed_slow(&adv_params);
;;;552                break;
;;;553    
;;;554            case BLE_ADV_MODE_FAST:
;;;555                ret = set_adv_mode_fast(&adv_params);
;;;556                break;
;;;557    
;;;558            case BLE_ADV_MODE_SLOW:
;;;559                ret = set_adv_mode_slow(&adv_params);
;;;560                break;
;;;561    
;;;562            case BLE_ADV_MODE_IDLE:
;;;563                m_adv_evt = BLE_ADV_EVT_IDLE;
;;;564                break;
;;;565    
;;;566            default:
;;;567                break;
;;;568        }
;;;569    
;;;570        if (m_adv_mode_current != BLE_ADV_MODE_IDLE)
;;;571        {
;;;572            ret = sd_ble_gap_adv_start(&adv_params);
;;;573            if (ret != NRF_SUCCESS)
;;;574            {
;;;575                return ret;
;;;576            }
;;;577        }
;;;578    
;;;579        if (m_evt_handler != NULL)
;;;580        {
;;;581            m_evt_handler(m_adv_evt);
;;;582        }
;;;583    
;;;584        return NRF_SUCCESS;
;;;585    }
000010  b007              ADD      sp,sp,#0x1c
000012  bd30              POP      {r4,r5,pc}
                  |L9.20|
000014  484e              LDR      r0,|L9.336|
000016  7005              STRB     r5,[r0,#0]            ;491
000018  f7fffffe          BL       flash_access_in_progress
00001c  2800              CMP      r0,#0                 ;494
00001e  d004              BEQ      |L9.42|
000020  2001              MOVS     r0,#1                 ;496
000022  494c              LDR      r1,|L9.340|
000024  7008              STRB     r0,[r1,#0]            ;496
000026  2000              MOVS     r0,#0                 ;497
000028  e7f2              B        |L9.16|
                  |L9.42|
00002a  2107              MOVS     r1,#7                 ;500
00002c  484a              LDR      r0,|L9.344|
00002e  f7fffffe          BL       __aeabi_memclr4
000032  484a              LDR      r0,|L9.348|
000034  7840              LDRB     r0,[r0,#1]            ;502  ; m_adv_modes_config
000036  2800              CMP      r0,#0                 ;502
000038  d003              BEQ      |L9.66|
00003a  4845              LDR      r0,|L9.336|
00003c  7800              LDRB     r0,[r0,#0]            ;502  ; m_adv_mode_current
00003e  2801              CMP      r0,#1                 ;502
000040  d00f              BEQ      |L9.98|
                  |L9.66|
000042  4846              LDR      r0,|L9.348|
000044  7880              LDRB     r0,[r0,#2]            ;503  ; m_adv_modes_config
000046  2800              CMP      r0,#0                 ;503
000048  d003              BEQ      |L9.82|
00004a  4841              LDR      r0,|L9.336|
00004c  7800              LDRB     r0,[r0,#0]            ;503  ; m_adv_mode_current
00004e  2801              CMP      r0,#1                 ;503
000050  d007              BEQ      |L9.98|
                  |L9.82|
000052  4842              LDR      r0,|L9.348|
000054  7880              LDRB     r0,[r0,#2]            ;504  ; m_adv_modes_config
000056  2800              CMP      r0,#0                 ;504
000058  d012              BEQ      |L9.128|
00005a  483d              LDR      r0,|L9.336|
00005c  7800              LDRB     r0,[r0,#0]            ;504  ; m_adv_mode_current
00005e  2802              CMP      r0,#2                 ;504
000060  d10e              BNE      |L9.128|
                  |L9.98|
000062  483f              LDR      r0,|L9.352|
000064  6800              LDR      r0,[r0,#0]            ;507  ; m_evt_handler
000066  2800              CMP      r0,#0                 ;507
000068  d007              BEQ      |L9.122|
00006a  2001              MOVS     r0,#1                 ;509
00006c  493d              LDR      r1,|L9.356|
00006e  7008              STRB     r0,[r1,#0]            ;509
000070  2008              MOVS     r0,#8                 ;510
000072  493b              LDR      r1,|L9.352|
000074  6809              LDR      r1,[r1,#0]            ;510  ; m_evt_handler
000076  4788              BLX      r1                    ;510
000078  e002              B        |L9.128|
                  |L9.122|
00007a  2000              MOVS     r0,#0                 ;514
00007c  4939              LDR      r1,|L9.356|
00007e  7008              STRB     r0,[r1,#0]            ;514
                  |L9.128|
000080  4628              MOV      r0,r5                 ;518
000082  f7fffffe          BL       adv_mode_next_avail_get
000086  4932              LDR      r1,|L9.336|
000088  7008              STRB     r0,[r1,#0]            ;518
00008a  4835              LDR      r0,|L9.352|
00008c  6800              LDR      r0,[r0,#0]            ;521  ; m_evt_handler
00008e  2800              CMP      r0,#0                 ;521
000090  d017              BEQ      |L9.194|
000092  4608              MOV      r0,r1                 ;522
000094  7800              LDRB     r0,[r0,#0]            ;522  ; m_adv_mode_current
000096  2803              CMP      r0,#3                 ;522
000098  d003              BEQ      |L9.162|
00009a  4608              MOV      r0,r1                 ;522
00009c  7800              LDRB     r0,[r0,#0]            ;522  ; m_adv_mode_current
00009e  2804              CMP      r0,#4                 ;522
0000a0  d10f              BNE      |L9.194|
                  |L9.162|
0000a2  482e              LDR      r0,|L9.348|
0000a4  7800              LDRB     r0,[r0,#0]            ;523  ; m_adv_modes_config
0000a6  2800              CMP      r0,#0                 ;523
0000a8  d00b              BEQ      |L9.194|
0000aa  482f              LDR      r0,|L9.360|
0000ac  7800              LDRB     r0,[r0,#0]            ;524  ; m_whitelist_temporarily_disabled
0000ae  2800              CMP      r0,#0                 ;524
0000b0  d107              BNE      |L9.194|
0000b2  2001              MOVS     r0,#1                 ;529
0000b4  492d              LDR      r1,|L9.364|
0000b6  7008              STRB     r0,[r1,#0]            ;529
0000b8  2007              MOVS     r0,#7                 ;530
0000ba  4929              LDR      r1,|L9.352|
0000bc  6809              LDR      r1,[r1,#0]            ;530  ; m_evt_handler
0000be  4788              BLX      r1                    ;530
0000c0  e002              B        |L9.200|
                  |L9.194|
0000c2  2000              MOVS     r0,#0                 ;534
0000c4  4929              LDR      r1,|L9.364|
0000c6  7008              STRB     r0,[r1,#0]            ;534
                  |L9.200|
0000c8  2118              MOVS     r1,#0x18              ;538
0000ca  a801              ADD      r0,sp,#4              ;538
0000cc  f7fffffe          BL       __aeabi_memclr4
0000d0  2100              MOVS     r1,#0                 ;540
0000d2  4668              MOV      r0,sp                 ;540
0000d4  7101              STRB     r1,[r0,#4]            ;540
0000d6  7301              STRB     r1,[r0,#0xc]          ;541
0000d8  481d              LDR      r0,|L9.336|
0000da  7800              LDRB     r0,[r0,#0]            ;544  ; m_adv_mode_current
0000dc  0003              MOVS     r3,r0                 ;544
0000de  f7fffffe          BL       __ARM_common_switch8
0000e2  0518              DCB      0x05,0x18
0000e4  04090e13          DCB      0x04,0x09,0x0e,0x13
0000e8  1c00              DCB      0x1c,0x00
0000ea  a801              ADD      r0,sp,#4              ;547
0000ec  f7fffffe          BL       set_adv_mode_directed
0000f0  4604              MOV      r4,r0                 ;547
0000f2  e013              B        |L9.284|
0000f4  a801              ADD      r0,sp,#4              ;551
0000f6  f7fffffe          BL       set_adv_mode_directed_slow
0000fa  4604              MOV      r4,r0                 ;551
0000fc  e00e              B        |L9.284|
0000fe  a801              ADD      r0,sp,#4              ;555
000100  f7fffffe          BL       set_adv_mode_fast
000104  4604              MOV      r4,r0                 ;555
000106  e009              B        |L9.284|
000108  a801              ADD      r0,sp,#4              ;559
00010a  f7fffffe          BL       set_adv_mode_slow
00010e  4604              MOV      r4,r0                 ;559
000110  e004              B        |L9.284|
000112  2000              MOVS     r0,#0                 ;563
000114  4916              LDR      r1,|L9.368|
000116  7008              STRB     r0,[r1,#0]            ;563
000118  e000              B        |L9.284|
00011a  bf00              NOP                            ;567
                  |L9.284|
00011c  bf00              NOP                            ;548
00011e  480c              LDR      r0,|L9.336|
000120  7800              LDRB     r0,[r0,#0]            ;570  ; m_adv_mode_current
000122  2800              CMP      r0,#0                 ;570
000124  d006              BEQ      |L9.308|
000126  a801              ADD      r0,sp,#4              ;572
000128  df73              SVC      #0x73                 ;572
00012a  4604              MOV      r4,r0                 ;572
00012c  2c00              CMP      r4,#0                 ;573
00012e  d001              BEQ      |L9.308|
000130  4620              MOV      r0,r4                 ;575
000132  e76d              B        |L9.16|
                  |L9.308|
000134  480a              LDR      r0,|L9.352|
000136  6800              LDR      r0,[r0,#0]            ;579  ; m_evt_handler
000138  2800              CMP      r0,#0                 ;579
00013a  d004              BEQ      |L9.326|
00013c  480c              LDR      r0,|L9.368|
00013e  7800              LDRB     r0,[r0,#0]            ;581  ; m_adv_evt
000140  4907              LDR      r1,|L9.352|
000142  6809              LDR      r1,[r1,#0]            ;581  ; m_evt_handler
000144  4788              BLX      r1                    ;581
                  |L9.326|
000146  2000              MOVS     r0,#0                 ;584
000148  e762              B        |L9.16|
;;;586    
                          ENDP

00014a  0000              DCW      0x0000
                  |L9.332|
                          DCD      m_initialized
                  |L9.336|
                          DCD      m_adv_mode_current
                  |L9.340|
                          DCD      m_advertising_start_pending
                  |L9.344|
                          DCD      m_peer_address
                  |L9.348|
                          DCD      m_adv_modes_config
                  |L9.352|
                          DCD      m_evt_handler
                  |L9.356|
                          DCD      m_peer_addr_reply_expected
                  |L9.360|
                          DCD      m_whitelist_temporarily_disabled
                  |L9.364|
                          DCD      m_whitelist_reply_expected
                  |L9.368|
                          DCD      m_adv_evt

                          AREA ||i.ble_advertising_whitelist_reply||, CODE, READONLY, ALIGN=2

                  ble_advertising_whitelist_reply PROC
;;;653    
;;;654    uint32_t ble_advertising_whitelist_reply(ble_gap_addr_t const * p_gap_addrs,
000000  b5ff              PUSH     {r0-r7,lr}
;;;655                                             uint32_t               addr_cnt,
;;;656                                             ble_gap_irk_t  const * p_gap_irks,
;;;657                                             uint32_t               irk_cnt)
;;;658    {
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  461e              MOV      r6,r3
;;;659        if (!m_whitelist_reply_expected)
00000a  4816              LDR      r0,|L10.100|
00000c  7800              LDRB     r0,[r0,#0]  ; m_whitelist_reply_expected
00000e  2800              CMP      r0,#0
000010  d102              BNE      |L10.24|
;;;660        {
;;;661            return NRF_ERROR_INVALID_STATE;
000012  2008              MOVS     r0,#8
                  |L10.20|
;;;662        }
;;;663    
;;;664        m_whitelist_reply_expected = false;
;;;665    
;;;666        #if (NRF_SD_BLE_API_VERSION == 2)
;;;667    
;;;668            m_whitelist.addr_count = addr_cnt;
;;;669            m_whitelist.irk_count  = irk_cnt;
;;;670    
;;;671            for (uint32_t i = 0; i < addr_cnt; i++)
;;;672            {
;;;673                *m_whitelist.pp_addrs[i] = p_gap_addrs[i];
;;;674            }
;;;675    
;;;676            for (uint32_t i = 0; i < irk_cnt; i++)
;;;677            {
;;;678                *m_whitelist.pp_irks[i] = p_gap_irks[i];
;;;679            }
;;;680    
;;;681        #else
;;;682    
;;;683            m_whitelist_in_use = ((addr_cnt > 0) || (irk_cnt > 0));
;;;684    
;;;685        #endif
;;;686    
;;;687        return NRF_SUCCESS;
;;;688    }
000014  b005              ADD      sp,sp,#0x14
000016  bdf0              POP      {r4-r7,pc}
                  |L10.24|
000018  2000              MOVS     r0,#0                 ;664
00001a  4912              LDR      r1,|L10.100|
00001c  7008              STRB     r0,[r1,#0]            ;664
00001e  4912              LDR      r1,|L10.104|
000020  710d              STRB     r5,[r1,#4]            ;668
000022  730e              STRB     r6,[r1,#0xc]          ;669
000024  2400              MOVS     r4,#0                 ;671
000026  e00a              B        |L10.62|
                  |L10.40|
000028  4a0f              LDR      r2,|L10.104|
00002a  6812              LDR      r2,[r2,#0]            ;673  ; m_whitelist
00002c  00a3              LSLS     r3,r4,#2              ;673
00002e  58d0              LDR      r0,[r2,r3]            ;673
000030  00e2              LSLS     r2,r4,#3              ;673
000032  1b12              SUBS     r2,r2,r4              ;673
000034  19d1              ADDS     r1,r2,r7              ;673
000036  2207              MOVS     r2,#7                 ;673
000038  f7fffffe          BL       __aeabi_memcpy
00003c  1c64              ADDS     r4,r4,#1              ;671
                  |L10.62|
00003e  42ac              CMP      r4,r5                 ;671
000040  d3f2              BCC      |L10.40|
000042  2400              MOVS     r4,#0                 ;676
000044  e00a              B        |L10.92|
                  |L10.70|
000046  4a08              LDR      r2,|L10.104|
000048  6892              LDR      r2,[r2,#8]            ;678  ; m_whitelist
00004a  00a3              LSLS     r3,r4,#2              ;678
00004c  58d0              LDR      r0,[r2,r3]            ;678
00004e  0123              LSLS     r3,r4,#4              ;678
000050  9a03              LDR      r2,[sp,#0xc]          ;678
000052  1899              ADDS     r1,r3,r2              ;678
000054  2210              MOVS     r2,#0x10              ;678
000056  f7fffffe          BL       __aeabi_memcpy
00005a  1c64              ADDS     r4,r4,#1              ;676
                  |L10.92|
00005c  42b4              CMP      r4,r6                 ;676
00005e  d3f2              BCC      |L10.70|
000060  2000              MOVS     r0,#0                 ;687
000062  e7d7              B        |L10.20|
;;;689    
                          ENDP

                  |L10.100|
                          DCD      m_whitelist_reply_expected
                  |L10.104|
                          DCD      m_whitelist

                          AREA ||i.flash_access_in_progress||, CODE, READONLY, ALIGN=1

                  flash_access_in_progress PROC
;;;208     */
;;;209    static bool flash_access_in_progress()
000000  b508              PUSH     {r3,lr}
;;;210    {
;;;211        uint32_t count;
;;;212    
;;;213        (void)fs_queued_op_count_get(&count);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       fs_queued_op_count_get
;;;214    
;;;215        return (count != 0);
000008  9800              LDR      r0,[sp,#0]
00000a  2800              CMP      r0,#0
00000c  d001              BEQ      |L11.18|
00000e  2001              MOVS     r0,#1
                  |L11.16|
;;;216    }
000010  bd08              POP      {r3,pc}
                  |L11.18|
000012  2000              MOVS     r0,#0                 ;215
000014  e7fc              B        |L11.16|
;;;217    
                          ENDP


                          AREA ||i.on_connected||, CODE, READONLY, ALIGN=2

                  on_connected PROC
;;;149     */
;;;150    static void on_connected(ble_evt_t const * p_ble_evt)
000000  7d81              LDRB     r1,[r0,#0x16]
;;;151    {
;;;152        if (p_ble_evt->evt.gap_evt.params.connected.role == BLE_GAP_ROLE_PERIPH)
000002  2901              CMP      r1,#1
000004  d102              BNE      |L12.12|
;;;153        {
;;;154            m_current_slave_link_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
000006  8881              LDRH     r1,[r0,#4]
000008  4a01              LDR      r2,|L12.16|
00000a  8011              STRH     r1,[r2,#0]
                  |L12.12|
;;;155        }
;;;156    }
00000c  4770              BX       lr
;;;157    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      m_current_slave_link_conn_handle

                          AREA ||i.on_disconnected||, CODE, READONLY, ALIGN=2

                  on_disconnected PROC
;;;162     */
;;;163    static void on_disconnected(ble_evt_t const * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;164    {
000002  4605              MOV      r5,r0
;;;165        uint32_t ret;
;;;166    
;;;167        m_whitelist_temporarily_disabled = false;
000004  2000              MOVS     r0,#0
000006  490b              LDR      r1,|L13.52|
000008  7008              STRB     r0,[r1,#0]
;;;168    
;;;169        if (p_ble_evt->evt.gap_evt.conn_handle == m_current_slave_link_conn_handle)
00000a  88a8              LDRH     r0,[r5,#4]
00000c  490a              LDR      r1,|L13.56|
00000e  8809              LDRH     r1,[r1,#0]  ; m_current_slave_link_conn_handle
000010  4288              CMP      r0,r1
000012  d10e              BNE      |L13.50|
;;;170        {
;;;171           //ret = ble_advertising_start(BLE_ADV_MODE_DIRECTED);
;;;172    		  	ret = ble_advertising_start(m_adv_mode_current);
000014  4809              LDR      r0,|L13.60|
000016  7800              LDRB     r0,[r0,#0]  ; m_adv_mode_current
000018  f7fffffe          BL       ble_advertising_start
00001c  4604              MOV      r4,r0
;;;173           if ((ret != NRF_SUCCESS) && (m_error_handler != NULL))
00001e  2c00              CMP      r4,#0
000020  d007              BEQ      |L13.50|
000022  4807              LDR      r0,|L13.64|
000024  6800              LDR      r0,[r0,#0]  ; m_error_handler
000026  2800              CMP      r0,#0
000028  d003              BEQ      |L13.50|
;;;174           {
;;;175               m_error_handler(ret);
00002a  4620              MOV      r0,r4
00002c  4904              LDR      r1,|L13.64|
00002e  6809              LDR      r1,[r1,#0]  ; m_error_handler
000030  4788              BLX      r1
                  |L13.50|
;;;176           }
;;;177        }
;;;178    }
000032  bd70              POP      {r4-r6,pc}
;;;179    
                          ENDP

                  |L13.52|
                          DCD      m_whitelist_temporarily_disabled
                  |L13.56|
                          DCD      m_current_slave_link_conn_handle
                  |L13.60|
                          DCD      m_adv_mode_current
                  |L13.64|
                          DCD      m_error_handler

                          AREA ||i.on_timeout||, CODE, READONLY, ALIGN=2

                  on_timeout PROC
;;;184     */
;;;185    static void on_timeout(ble_evt_t const * p_ble_evt)
000000  b570              PUSH     {r4-r6,lr}
;;;186    {
000002  4605              MOV      r5,r0
;;;187        ret_code_t ret;
;;;188    
;;;189        if (p_ble_evt->evt.gap_evt.params.timeout.src != BLE_GAP_TIMEOUT_SRC_ADVERTISING)
000004  7a28              LDRB     r0,[r5,#8]
000006  2800              CMP      r0,#0
000008  d000              BEQ      |L14.12|
                  |L14.10|
;;;190        {
;;;191            // Nothing to do.
;;;192            return;
;;;193        }
;;;194    
;;;195        // Start advertising in the next mode.
;;;196        //ret = ble_advertising_start(adv_mode_next_get(m_adv_mode_current));
;;;197        ret = ble_advertising_start(m_adv_mode_current);
;;;198        if ((ret != NRF_SUCCESS) && (m_error_handler != NULL))
;;;199        {
;;;200            m_error_handler(ret);
;;;201        }
;;;202    }
00000a  bd70              POP      {r4-r6,pc}
                  |L14.12|
00000c  4808              LDR      r0,|L14.48|
00000e  7800              LDRB     r0,[r0,#0]            ;197  ; m_adv_mode_current
000010  f7fffffe          BL       ble_advertising_start
000014  4604              MOV      r4,r0                 ;197
000016  2c00              CMP      r4,#0                 ;198
000018  d007              BEQ      |L14.42|
00001a  4806              LDR      r0,|L14.52|
00001c  6800              LDR      r0,[r0,#0]            ;198  ; m_error_handler
00001e  2800              CMP      r0,#0                 ;198
000020  d003              BEQ      |L14.42|
000022  4620              MOV      r0,r4                 ;200
000024  4903              LDR      r1,|L14.52|
000026  6809              LDR      r1,[r1,#0]            ;200  ; m_error_handler
000028  4788              BLX      r1                    ;200
                  |L14.42|
00002a  bf00              NOP      
00002c  e7ed              B        |L14.10|
;;;203    
                          ENDP

00002e  0000              DCW      0x0000
                  |L14.48|
                          DCD      m_adv_mode_current
                  |L14.52|
                          DCD      m_error_handler

                          AREA ||i.set_adv_mode_directed||, CODE, READONLY, ALIGN=2

                  set_adv_mode_directed PROC
;;;272     */
;;;273    static ret_code_t set_adv_mode_directed(ble_gap_adv_params_t * p_adv_params)
000000  4601              MOV      r1,r0
;;;274    {
;;;275        m_adv_evt  = BLE_ADV_EVT_DIRECTED;
000002  2001              MOVS     r0,#1
000004  4a04              LDR      r2,|L15.24|
000006  7010              STRB     r0,[r2,#0]
;;;276    
;;;277        p_adv_params->p_peer_addr = &m_peer_address;
000008  4804              LDR      r0,|L15.28|
00000a  6048              STR      r0,[r1,#4]
;;;278        p_adv_params->type        = BLE_GAP_ADV_TYPE_ADV_DIRECT_IND;
00000c  2001              MOVS     r0,#1
00000e  7008              STRB     r0,[r1,#0]
;;;279        p_adv_params->timeout     = 0;
000010  2000              MOVS     r0,#0
000012  8248              STRH     r0,[r1,#0x12]
;;;280        p_adv_params->interval    = 0;
000014  8208              STRH     r0,[r1,#0x10]
;;;281    
;;;282        return NRF_SUCCESS;
;;;283    }
000016  4770              BX       lr
;;;284    
                          ENDP

                  |L15.24|
                          DCD      m_adv_evt
                  |L15.28|
                          DCD      m_peer_address

                          AREA ||i.set_adv_mode_directed_slow||, CODE, READONLY, ALIGN=2

                  set_adv_mode_directed_slow PROC
;;;291     */
;;;292    static ret_code_t set_adv_mode_directed_slow(ble_gap_adv_params_t * p_adv_params)
000000  4601              MOV      r1,r0
;;;293    {
;;;294        m_adv_evt = BLE_ADV_EVT_DIRECTED_SLOW;
000002  2002              MOVS     r0,#2
000004  4a06              LDR      r2,|L16.32|
000006  7010              STRB     r0,[r2,#0]
;;;295    
;;;296        p_adv_params->p_peer_addr = &m_peer_address;
000008  4806              LDR      r0,|L16.36|
00000a  6048              STR      r0,[r1,#4]
;;;297        p_adv_params->type        = BLE_GAP_ADV_TYPE_ADV_DIRECT_IND;
00000c  2001              MOVS     r0,#1
00000e  7008              STRB     r0,[r1,#0]
;;;298        p_adv_params->timeout     = m_adv_modes_config.ble_adv_directed_slow_timeout;
000010  4805              LDR      r0,|L16.40|
000012  8980              LDRH     r0,[r0,#0xc]  ; m_adv_modes_config
000014  8248              STRH     r0,[r1,#0x12]
;;;299        p_adv_params->interval    = m_adv_modes_config.ble_adv_directed_slow_interval;
000016  4804              LDR      r0,|L16.40|
000018  8900              LDRH     r0,[r0,#8]  ; m_adv_modes_config
00001a  8208              STRH     r0,[r1,#0x10]
;;;300    
;;;301        return NRF_SUCCESS;
00001c  2000              MOVS     r0,#0
;;;302    }
00001e  4770              BX       lr
;;;303    
                          ENDP

                  |L16.32|
                          DCD      m_adv_evt
                  |L16.36|
                          DCD      m_peer_address
                  |L16.40|
                          DCD      m_adv_modes_config

                          AREA ||i.set_adv_mode_fast||, CODE, READONLY, ALIGN=2

                  set_adv_mode_fast PROC
;;;310     */
;;;311    static ret_code_t set_adv_mode_fast(ble_gap_adv_params_t * p_adv_params)
000000  b570              PUSH     {r4-r6,lr}
;;;312    {
000002  4604              MOV      r4,r0
;;;313        ret_code_t ret;
;;;314    
;;;315        p_adv_params->interval = m_adv_modes_config.ble_adv_fast_interval;
000004  4815              LDR      r0,|L17.92|
000006  8a00              LDRH     r0,[r0,#0x10]  ; m_adv_modes_config
000008  8220              STRH     r0,[r4,#0x10]
;;;316        p_adv_params->timeout  = m_adv_modes_config.ble_adv_fast_timeout;
00000a  4814              LDR      r0,|L17.92|
00000c  8a80              LDRH     r0,[r0,#0x14]  ; m_adv_modes_config
00000e  8260              STRH     r0,[r4,#0x12]
;;;317    
;;;318        if ((m_adv_modes_config.ble_adv_whitelist_enabled) &&
000010  4812              LDR      r0,|L17.92|
000012  7800              LDRB     r0,[r0,#0]  ; m_adv_modes_config
000014  2800              CMP      r0,#0
000016  d01b              BEQ      |L17.80|
;;;319            (!m_whitelist_temporarily_disabled) &&
000018  4811              LDR      r0,|L17.96|
00001a  7800              LDRB     r0,[r0,#0]  ; m_whitelist_temporarily_disabled
00001c  2800              CMP      r0,#0
00001e  d117              BNE      |L17.80|
;;;320            (whitelist_has_entries()))
000020  f7fffffe          BL       whitelist_has_entries
000024  2800              CMP      r0,#0
000026  d013              BEQ      |L17.80|
;;;321        {
;;;322            #if (NRF_SD_BLE_API_VERSION == 2)
;;;323                p_adv_params->p_whitelist = &m_whitelist;
000028  480e              LDR      r0,|L17.100|
00002a  60e0              STR      r0,[r4,#0xc]
;;;324            #endif
;;;325    
;;;326            p_adv_params->fp = BLE_GAP_ADV_FP_FILTER_CONNREQ;
00002c  2002              MOVS     r0,#2
00002e  7220              STRB     r0,[r4,#8]
;;;327            m_advdata.flags  = BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED;
000030  2004              MOVS     r0,#4
000032  490d              LDR      r1,|L17.104|
000034  70c8              STRB     r0,[r1,#3]
;;;328    
;;;329            ret = ble_advdata_set(&m_advdata, NULL);
000036  2100              MOVS     r1,#0
000038  480b              LDR      r0,|L17.104|
00003a  f7fffffe          BL       ble_advdata_set
00003e  4605              MOV      r5,r0
;;;330            if (ret != NRF_SUCCESS)
000040  2d00              CMP      r5,#0
000042  d001              BEQ      |L17.72|
;;;331            {
;;;332                return ret;
000044  4628              MOV      r0,r5
                  |L17.70|
;;;333            }
;;;334    
;;;335            m_adv_evt = BLE_ADV_EVT_FAST_WHITELIST;
;;;336        }
;;;337        else
;;;338        {
;;;339            m_adv_evt = BLE_ADV_EVT_FAST;
;;;340        }
;;;341    
;;;342        return NRF_SUCCESS;
;;;343    }
000046  bd70              POP      {r4-r6,pc}
                  |L17.72|
000048  2005              MOVS     r0,#5                 ;335
00004a  4908              LDR      r1,|L17.108|
00004c  7008              STRB     r0,[r1,#0]            ;335
00004e  e002              B        |L17.86|
                  |L17.80|
000050  2003              MOVS     r0,#3                 ;339
000052  4906              LDR      r1,|L17.108|
000054  7008              STRB     r0,[r1,#0]            ;339
                  |L17.86|
000056  2000              MOVS     r0,#0                 ;342
000058  e7f5              B        |L17.70|
;;;344    
                          ENDP

00005a  0000              DCW      0x0000
                  |L17.92|
                          DCD      m_adv_modes_config
                  |L17.96|
                          DCD      m_whitelist_temporarily_disabled
                  |L17.100|
                          DCD      m_whitelist
                  |L17.104|
                          DCD      m_advdata
                  |L17.108|
                          DCD      m_adv_evt

                          AREA ||i.set_adv_mode_slow||, CODE, READONLY, ALIGN=2

                  set_adv_mode_slow PROC
;;;351     */
;;;352    static ret_code_t set_adv_mode_slow(ble_gap_adv_params_t * p_adv_params)
000000  b570              PUSH     {r4-r6,lr}
;;;353    {
000002  4604              MOV      r4,r0
;;;354        ret_code_t ret;
;;;355    
;;;356        p_adv_params->interval = m_adv_modes_config.ble_adv_slow_interval;
000004  4815              LDR      r0,|L18.92|
000006  8b00              LDRH     r0,[r0,#0x18]  ; m_adv_modes_config
000008  8220              STRH     r0,[r4,#0x10]
;;;357        p_adv_params->timeout  = m_adv_modes_config.ble_adv_slow_timeout;
00000a  4814              LDR      r0,|L18.92|
00000c  8b80              LDRH     r0,[r0,#0x1c]  ; m_adv_modes_config
00000e  8260              STRH     r0,[r4,#0x12]
;;;358    
;;;359        if ((m_adv_modes_config.ble_adv_whitelist_enabled) &&
000010  4812              LDR      r0,|L18.92|
000012  7800              LDRB     r0,[r0,#0]  ; m_adv_modes_config
000014  2800              CMP      r0,#0
000016  d01b              BEQ      |L18.80|
;;;360            (!m_whitelist_temporarily_disabled) &&
000018  4811              LDR      r0,|L18.96|
00001a  7800              LDRB     r0,[r0,#0]  ; m_whitelist_temporarily_disabled
00001c  2800              CMP      r0,#0
00001e  d117              BNE      |L18.80|
;;;361            (whitelist_has_entries()))
000020  f7fffffe          BL       whitelist_has_entries
000024  2800              CMP      r0,#0
000026  d013              BEQ      |L18.80|
;;;362        {
;;;363            #if (NRF_SD_BLE_API_VERSION == 2)
;;;364            {
;;;365                p_adv_params->p_whitelist = &m_whitelist;
000028  480e              LDR      r0,|L18.100|
00002a  60e0              STR      r0,[r4,#0xc]
;;;366            }
;;;367            #endif
;;;368    
;;;369            p_adv_params->fp = BLE_GAP_ADV_FP_FILTER_CONNREQ;
00002c  2002              MOVS     r0,#2
00002e  7220              STRB     r0,[r4,#8]
;;;370            m_advdata.flags  = BLE_GAP_ADV_FLAG_BR_EDR_NOT_SUPPORTED;
000030  2004              MOVS     r0,#4
000032  490d              LDR      r1,|L18.104|
000034  70c8              STRB     r0,[r1,#3]
;;;371    
;;;372            ret = ble_advdata_set(&m_advdata, NULL);
000036  2100              MOVS     r1,#0
000038  480b              LDR      r0,|L18.104|
00003a  f7fffffe          BL       ble_advdata_set
00003e  4605              MOV      r5,r0
;;;373            if (ret != NRF_SUCCESS)
000040  2d00              CMP      r5,#0
000042  d001              BEQ      |L18.72|
;;;374            {
;;;375                return ret;
000044  4628              MOV      r0,r5
                  |L18.70|
;;;376            }
;;;377    
;;;378            m_adv_evt = BLE_ADV_EVT_SLOW_WHITELIST;
;;;379        }
;;;380        else
;;;381        {
;;;382            m_adv_evt = BLE_ADV_EVT_SLOW;
;;;383        }
;;;384    
;;;385        return NRF_SUCCESS;
;;;386    }
000046  bd70              POP      {r4-r6,pc}
                  |L18.72|
000048  2006              MOVS     r0,#6                 ;378
00004a  4908              LDR      r1,|L18.108|
00004c  7008              STRB     r0,[r1,#0]            ;378
00004e  e002              B        |L18.86|
                  |L18.80|
000050  2004              MOVS     r0,#4                 ;382
000052  4906              LDR      r1,|L18.108|
000054  7008              STRB     r0,[r1,#0]            ;382
                  |L18.86|
000056  2000              MOVS     r0,#0                 ;385
000058  e7f5              B        |L18.70|
;;;387    
                          ENDP

00005a  0000              DCW      0x0000
                  |L18.92|
                          DCD      m_adv_modes_config
                  |L18.96|
                          DCD      m_whitelist_temporarily_disabled
                  |L18.100|
                          DCD      m_whitelist
                  |L18.104|
                          DCD      m_advdata
                  |L18.108|
                          DCD      m_adv_evt

                          AREA ||i.whitelist_has_entries||, CODE, READONLY, ALIGN=2

                  whitelist_has_entries PROC
;;;108    
;;;109        static bool whitelist_has_entries()
000000  4805              LDR      r0,|L19.24|
;;;110        {
;;;111            return ((m_whitelist.addr_count != 0) || (m_whitelist.irk_count != 0));
000002  7900              LDRB     r0,[r0,#4]  ; m_whitelist
000004  2800              CMP      r0,#0
000006  d103              BNE      |L19.16|
000008  4803              LDR      r0,|L19.24|
00000a  7b00              LDRB     r0,[r0,#0xc]  ; m_whitelist
00000c  2800              CMP      r0,#0
00000e  d001              BEQ      |L19.20|
                  |L19.16|
000010  2001              MOVS     r0,#1
                  |L19.18|
;;;112        }
000012  4770              BX       lr
                  |L19.20|
000014  2000              MOVS     r0,#0                 ;111
000016  e7fc              B        |L19.18|
;;;113    
                          ENDP

                  |L19.24|
                          DCD      m_whitelist

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  m_adv_modes_config
                          %        32
                  m_advdata
                          %        60
                  m_manuf_specific_data
                          %        12
                  m_manuf_data_array
                          %        32
                  m_service_data
                          %        12
                  m_service_data_array
                          %        32
                  m_p_whitelist_addrs
                          %        32
                  m_p_whitelist_irks
                          %        32
                  m_whitelist_addrs
                          %        56
                  m_whitelist_irks
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  m_initialized
000000  00                DCB      0x00
                  m_advertising_start_pending
000001  00                DCB      0x00
                  m_adv_evt
000002  00                DCB      0x00
                  m_adv_mode_current
000003  00                DCB      0x00
                  m_peer_address
                          DCD      0x00000000
000008  000000            DCB      0x00,0x00,0x00
                  m_peer_addr_reply_expected
00000b  00                DCB      0x00
                  m_slave_conn_int
                          DCD      0x00000000
                  m_current_slave_link_conn_handle
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  m_evt_handler
                          DCD      0x00000000
                  m_error_handler
                          DCD      0x00000000
                  m_whitelist_temporarily_disabled
00001c  00                DCB      0x00
                  m_whitelist_reply_expected
00001d  000000            DCB      0x00,0x00,0x00
                  m_whitelist
                          DCD      m_p_whitelist_addrs
000024  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      m_p_whitelist_irks
00002c  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L112.24|
                  |L112.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L112.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L112.14|
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\components\\ble\\ble_advertising\\ble_advertising.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_advertising_c_8e1d628c____REV16|
#line 129 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.2.0\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_ble_advertising_c_8e1d628c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_ble_advertising_c_8e1d628c____REVSH|
#line 144
|__asm___17_ble_advertising_c_8e1d628c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
